{"meta":{"title":"Jerry Simple","subtitle":null,"description":null,"author":"John Doe","url":"https://blog.milk4j.com"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2018-10-21T15:06:58.893Z","updated":"2018-10-21T15:06:58.892Z","comments":false,"path":"/404.html","permalink":"https://blog.milk4j.com//404.html","excerpt":"","text":""},{"title":"关于","date":"2018-10-21T15:07:09.476Z","updated":"2018-10-21T15:07:09.475Z","comments":false,"path":"about/index.html","permalink":"https://blog.milk4j.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2018-10-21T15:06:46.286Z","updated":"2018-10-21T15:06:46.286Z","comments":false,"path":"books/index.html","permalink":"https://blog.milk4j.com/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-10-21T15:07:19.450Z","updated":"2018-10-21T15:07:19.450Z","comments":false,"path":"categories/index.html","permalink":"https://blog.milk4j.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-10-21T15:07:32.536Z","updated":"2018-10-21T15:07:32.536Z","comments":true,"path":"links/index.html","permalink":"https://blog.milk4j.com/links/index.html","excerpt":"","text":""},{"title":"Github仓库","date":"2018-10-21T16:49:07.578Z","updated":"2018-10-21T16:49:07.578Z","comments":false,"path":"repository/index.html","permalink":"https://blog.milk4j.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-10-21T15:07:32.536Z","updated":"2018-10-21T15:07:32.536Z","comments":false,"path":"tags/index.html","permalink":"https://blog.milk4j.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Docker安装nginx","slug":"Docker安装nginx","date":"2018-10-22T04:34:08.000Z","updated":"2018-10-22T04:34:51.589Z","comments":true,"path":"2018/10/22/Docker安装nginx/","link":"","permalink":"https://blog.milk4j.com/2018/10/22/Docker安装nginx/","excerpt":"","text":"Docker 安装 nginx方式一：通过 pull 仓库镜像一、下载镜像1docker pull nginx 二、使用镜像创建容器1234567891011121314151617181920212223242526cd ~mkdir -p ~/nginx/www ~/nginx/logs ~/nginx/conf#www目录将映射为nginx容器配置的虚拟目录#logs目录将映射为nginx容器的日志目录#conf目录里的配置文件将映射为nginx容器的配置文件#找一份默认的 nginx.conf 配置文件放在 conf 目录下,否则下面启动会报错docker run -p 80:80 --name web -v $PWD/www:/www -v $PWD/logs:/wwwlogs -d nginxdocker cp web:/etc/nginx/nginx.conf #删除容器后再运行下面的命令docker run -p 80:80 --name web --link=app1:app1 --link=app2:app2 --link=app3:app3 -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/conf/servers:/etc/nginx/conf.d -v $PWD/logs:/wwwlogs -d nginx#此时打开浏览器访问宿主机的 IP 就可看到 nginx 的界面了，安装启动成功#-d:让容器在后台运行。#-P:将容器内部使用的网络端口映射到我们使用的主机上。#使用命令进入交互式终端docker exec -it mynginx /bin/bash#查看 IPifconfig#发现找不到指令，需要安装 net-tools 工具依次执行，再执行 ifconfigapt-get updateapt-get install net-tools#在宿主机中查询容器的 IP，返回 json 串，里面包含了详细的容器信息，包括 IP ~#docker inspect [容器名|id]docker inspect mynginx 命令说明： -p 80:80：将容器的80端口映射到主机的80端口 –name web：将容器命名为web -v $PWD/www:/www：将主机中当前目录下的www挂载到容器的/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf：将主机中当前目录下的nginx.conf挂载到容器的/etc/nginx/nginx.conf -v $PWD/logs:/wwwlogs：将主机中当前目录下的logs挂载到容器的/wwwlogs 方式二：通过 Dockerfile构建构建准备工作123mkdir -p ~/nginx/www ~/nginx/logs ~/nginx/confcd ~/nginxvi Dockerfile 在 Dockerfile 中输入如下内容：123456789101112131415161718#指定使用那个基础镜像FROM centosMAINTAINER ginkgoLABEL Discription=\"基于centos的nginx镜像\" version=\"1.0\"WORKDIR /usr/local/srcRUN yum install -y wgetRUN wget http://nginx.org/download/nginx-1.8.0.tar.gzRUN tar -zxvf nginx-1.8.0.tar.gzWORKDIR nginx-1.8.0#安装nginx所依赖的包RUN yum -y install gcc-c++RUN yum -y install pcre pcre-develRUN yum -y install zlib zlib-develRUN yum -y install openssl openssl-devel libssl-devRUN ./configureRUN makeRUN make installEXPOSE 80 通过Dockerfile 构建一个镜像1234# -t 镜像名 , \".\" 是Dockerfile 所在的目录，可以使用绝对路径docker build -t ginkgo/nginx .#查看镜像docker images 构建|运行容器1234567891011121314151617#找一份默认的 nginx.conf 配置文件放在 ~/nginx/conf 目录下,否则下面启动会报错docker run -p 80:80 --name mynginx -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/logs:/wwwlogs -d nginx#此时打开浏览器访问宿主机的 IP 就可看到 nginx 的界面了，安装启动成功#-d:让容器在后台运行。#-P:将容器内部使用的网络端口映射到我们使用的主机上。#使用命令进入交互式终端docker exec -it mynginx /bin/bash#查看 IPifconfig#发现找不到指令，需要安装 net-tools 工具依次执行，再执行 ifconfigapt-get updateapt-get install net-tools#在宿主机中查询容器的 IP，返回 json 串，里面包含了详细的容器信息，包括 IP ~docker inspect [容器名|id]","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"https://blog.milk4j.com/tags/docker/"}]},{"title":"Docker基本使用","slug":"Docker基本使用","date":"2018-06-22T03:26:02.000Z","updated":"2018-10-22T06:31:43.286Z","comments":true,"path":"2018/06/22/Docker基本使用/","link":"","permalink":"https://blog.milk4j.com/2018/06/22/Docker基本使用/","excerpt":"","text":"一. docker使用1. docker ps 查看运行中的容器2. docker images 查看docker镜像3. docker rm id(容器id) 删除容器（容器id可以通过docker ps查看，容器必须停止后才能删除）3.1 删除全部的容器 docker rm docker ps -a -q4. docker stop id(容器id) 停止容器运行5. docker rmi id(镜像id) 删除镜像6. docker pull ubuntu:16.04(镜像名称:版本号) 下载镜像7. docker run -it ubuntu:16.04 创建并运行容器容器 -t 表示在新容器内指定一个伪终端或终端 -i 表示允许我们对容器内的 (STDIN) 进行交互 -p 指定映射端口 -d 在后台运行容器并打印容器ID 7.1 docker run -dit ubuntu:16.04 创建并后台运行容器7.2 docker run -ditp 8080:8080（主机端口:容器端口） ubuntu:16.04 创建并后台运行容器且映射容器的端口8. docker attach id(容器id) 进入正在运行中的容器环境9. 退出容器9.1 exit 直接退出容器并终止容器运行9.2 [ctrl+p]+[ctrl+q]（快捷键） 退出容器，但是不会终止容器运行10. docker commit -m’版本标识’ id(容器id) ubuntu:16.04(镜像与版本号) 提交镜像且生成镜像（可以通过该命令把搭建好的容器打包成一个新的镜像或者覆盖原镜像（即是修改原镜像内容，生成的镜像名与版本号相同就可以直接覆盖））","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"https://blog.milk4j.com/tags/docker/"}]},{"title":"Mac后端开发环境搭建","slug":"Mac后端开发环境搭建","date":"2018-04-14T02:01:56.000Z","updated":"2018-10-22T02:18:07.379Z","comments":true,"path":"2018/04/14/Mac后端开发环境搭建/","link":"","permalink":"https://blog.milk4j.com/2018/04/14/Mac后端开发环境搭建/","excerpt":"","text":"Mac 后端入门开发环境搭建作为一个开发人员，选择 Mac 是一个非常好的选择，首先 Mac 是 Unix 的内核，支持 Unix 内核的命令，使用 Mac 能帮助我们熟悉 Unix 的操作命令 1、HomeBrew1.1 简介Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。 简单点说，Homebrew 是以最简单、最灵活的方式来安装苹果公司在 MacOS 中不包含的 UNIX 工具。 1.2 安装与卸载安装打开终端，复制粘贴，大约1分钟左右，下载完成，过程中需要输入密码，其他无需任何操作： /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 卸载有安装就要有卸载，打开终端，复制粘贴： /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot; 其实只用把上面安装的install换成uninstall就行了。 使用Homebrew 常用命令，下面以安装 git 为例（使用 brew 安装默认安装软件包的最新版本） 123456789101112131415161718安装任意软件包：brew install git卸载已安装软件包：brew uninstall git搜索可用软件包：brew search git查看任意软件包信息：brew info git更新已安装的软件包：brew upgrade git查看所有已安装的软件包：brew list更新 Homebrew：brew update查看 HomeBrew 版本：brew -vHomeBrew 帮助信息：brew -h 使用 brew -h 看下官方帮助： 123456789101112131415161718192021222324$ brew -hExample usage: brew search [TEXT|/REGEX/] brew info [FORMULA...] brew install FORMULA... brew update brew upgrade [FORMULA...] brew uninstall FORMULA... brew list [FORMULA...]Troubleshooting: brew config brew doctor brew install --verbose --debug FORMULAContributing: brew create [URL [--no-fetch]] brew edit [FORMULA...]Further help: brew commands brew help [COMMAND] man brew https://docs.brew.sh 友情提示在Mac OS X 10.11系统以后，/usr/local/等系统目录下的文件读写是需要系统root权限的，以往的Homebrew安装如果没有指定安装路径，会默认安装在这些需要系统root用户读写权限的目录下，导致有些指令需要添加sudo前缀来执行，比如升级Homebrew需要：sudo brew update 推荐: 安装Homebrew时对安装路径进行指定，直接安装在不需要系统root用户授权就可以自由读写的目录下 1/usr/bin/ruby &lt;install path&gt; -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" 下面是我的 HomeBrew 的版本： 123$ brew -vHomebrew 1.6.0Homebrew/homebrew-core (no git repository) 默认安装的所有的命令都在/usr/local/bin目录下，安装文件都在/usr/local/Cellar下，对应的配置文件都在/usr/local/etc下 1.3 CakebrewCakebrew 是 HomeBrew 的 GUI 版本，提供图形化的方式安装和管理软件包，安装方式： 1brew cask install cakebrew 1.4 homebrew-caskhomebrew-cask安装常用软件，比在网上下载安装文件安装的优势在于：（1）节省下载安装包的过程，一行命令即可安装（2）一些在网上搜不到安装文件的软件也可以通过这种方法安装 12brew tap phinze/homebrew-caskbrew install brew-cask 使用方法：将上面的brew换成brew cask即可，如 1brew cask install qq 使用 brew cask 安装常用的软件： brew cask 搜索地址 https://caskroom.github.io/search 12345678910111213141516171819202122232425262728brew cask install yybrew cask install qqbrew cask install dash # 帮助文档brew cask install atombrew cask install sequel-pro # mysql可视化工具brew cask install sourcetree # git可视化工具brew cask install neteasemusic # 网易云音乐brew cask install android-file-transfer # android 传输工具brew cask install android-studiobrew cask install intellij-ideabrew cask install visual-studio-codebrew cask install mockplus # 比较不错的画原型工具brew cask install alfred # 小红帽brew cask install the-unarchiver # 压缩工具brew cask install thunder # 迅雷brew cask install mplayerx # 播放器brew cask install iterm2 # mac上最好用的终端brew cask install cd-to # 当前目录在终端显示brew cask install duet # ipad做外接显示器brew cask install ckb # 海盗船机械键盘驱动brew cask install shadowsocksx # 翻墙工具brew cask install firefox # 火狐brew cask install foxmail # 邮箱客户端brew cask install rdm # redis 客户端brew cask install typora # markdown工具brew cask install macdownbrew cask install cyberduck # ftp工具brew cask install bearychat 2、iTerm22.1 简介ITERM2 是 MAC 下最好的终端工具。直接去官网下载安装包安装即可使用。 2.2 iTerm2 常用快捷键 切换 tab：⌘+← ，⌘+→ ，⌘+{ ， ⌘+} ，⌘+数字直接定位到该 tab 新建 tab：⌘+t 顺序切换 pane：⌘+[ ， ⌘+] 按方向切换 pane：⌘+Option+方向键 切分屏幕：⌘+d 水平切分，⌘+Shift+d 垂直切分 智能查找，支持正则查找：⌘+f 3、安装OH MY ZSH安装ZSH 是一种Shell指令集，Mac 自带 ZSH 的安装。但 Oh my zsh 可以让你能更简便的配置 ZSH。 安装方式如下: 1wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh 等待安装完成即可 配置设置 zsh 为系统的默认的 shell 1chsh -s /bin/zsh 更改zsh主题编辑 ~/.zshrc ，将文本中的 ZSH_THEME 修改为如下（个人推荐主题：ys） 1ZSH_THEME=\"ys\" 注：主题文件在 ~/.oh-my-zsh/themes 目录 4、安装JDK安装通过 HomeBrew 安装 JDK 安装 jdk8 brew cask info java8 安装 jdk9 brew cask info java9 也可以通过官网下载安装包安装 上述两个文件安装完成后，执行下述命令 123echo \"alias setJdk9='export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk9.0.4.jdk/Contents/Home'\" &gt;&gt; ~/.zshrcecho \"alias setJdk8='export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home'\" &gt;&gt; ~/.zshrcecho \"export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home\" &gt;&gt; ~/.zshrc 这样在命令行中默认设置当前环境变量为 JAVA 8 , 当我们需要切换到 JAVA 9 时只需在命令行中执行命令 setJdk9 即可 。 5、安装 Maven安装Maven 是Java生态中用来构建项目的工具。通过brew安装 1brew install maven 等待安装完成后即可 验证在命令行中输入下述命令验证MAVEN是否正确安装 1234567$ mvn -vApache Maven 3.5.3 (3383c37e1f9e9b3bc3df5050c29c8aff9f295297; 2018-02-25T03:49:05+08:00)Maven home: /usr/local/Cellar/maven/3.5.3/libexecJava version: 1.8.0_161, vendor: Oracle CorporationJava home: /Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jreDefault locale: zh_CN, platform encoding: UTF-8OS name: \"mac os x\", version: \"10.13.4\", arch: \"x86_64\", family: \"mac\" 如果有以上输出内容即标识安装完成 配置在 ~/.m2 目录下创建 settings.xml 文件，使用阿里云的 maven 仓库，内容如下 12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt; &lt;pluginGroups&gt;&lt;/pluginGroups&gt; &lt;proxies&gt;&lt;/proxies&gt; &lt;servers&gt;&lt;/servers&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt; &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;JDK-1.8&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;jdk&gt;1.8&lt;/jdk&gt; &lt;/activation&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt; &lt;/properties&gt; &lt;/profile&gt; &lt;/profiles&gt; &lt;activeProfiles&gt; &lt;activeProfile&gt;JDK-1.8&lt;/activeProfile&gt; &lt;/activeProfiles&gt;&lt;/settings&gt; 6、安装 RedisRedis 是一款基于数据结构的内存数据库。在我们的项目中被用作高速集中式缓存的解决方案。 安装1brew install redis 等待安装完成即可 验证在命令行中输入下述命令查看 reids 版本 12$ redis-server -v Redis server v=2.8.3 sha=00000000:0 malloc=libc bits=64 build=e836d8ad888e21a1 如果有以上输出内容即表示安装完成 7、安装MySQLMysql 是业界主流的开源关系型数据库。在我们项目中用以持久化用户及系统数据。 安装1brew install mysql 等待安装完成即可 验证12$ mysql -Vmysql Ver 14.14 Distrib 5.6.15, for osx10.9 (x86_64) using EditLine wrapper 如果有以上输出内容即表示安装完成 8、安装 ElasticSearch安装Elasticsearch(简称ES）是一款基于lucene的全文搜索中间件。用于处理在大量文本中通过关键字搜索的场景（例如搜索商品、店铺等）。先在下面的链接中下载安装包（已集成相关插件）后解压, 将解压后的文件夹放到你想安装的目录。通过 brew 安装5.6版的 ES： 1brew install elasticsearch@5.6 验证打开Iterm2，进入 elasticsearch的安装目录，执行以下命令 1$ ./elasticsearch 就可以看到启动日志了 9、安装Nginx安装Nginx 是一款轻量的高性能的Http与反向代理服务器。可被用作转发页面的请求至后台的Tomcat服务器 1brew install nginx 等待安装完成即可 验证在命令行中输入下述命令验证 Nginx 是否正确安装 (版本可能有所不同) 12345$ nginx -Vnginx version: nginx/1.6.3built by clang 6.1.0 (clang-602.0.49) (based on LLVM 3.6.0svn)TLS SNI support enabledconfigure arguments: --prefix=/usr/local/Cellar/nginx/1.6.3 --with-http_ssl_module --with-pcre --with-ipv6 --sbin-path=/usr/local/Cellar/nginx/1.6.3/bin/nginx --with-cc-opt=&apos;-I/usr/local/Cellar/pcre/8.36/include -I/usr/local/Cellar/openssl/1.0.2a-1/include&apos; --with-ld-opt=&apos;-L/usr/local/Cellar/pcre/8.36/lib -L/usr/local/Cellar/openssl/1.0.2a-1/lib&apos; --conf-path=/usr/local/etc/nginx/nginx.conf --pid-path=/usr/local/var/run/nginx.pid --lock-path=/usr/local/var/run/nginx.lock --http-client-body-temp-path=/usr/local/var/run/nginx/client_body_temp --http-proxy-temp-path=/usr/local/var/run/nginx/proxy_temp --http-fastcgi-temp-path=/usr/local/var/run/nginx/fastcgi_temp --http-uwsgi-temp-path=/usr/local/var/run/nginx/uwsgi_temp --http-scgi-temp-path=/usr/local/var/run/nginx/scgi_temp --http-log-path=/usr/local/var/log/nginx/access.log --error-log-path=/usr/local/var/log/nginx/error.log --with-http_gzip_static_module 修改配置文件12345678910111213141516171819202122#user nobody;worker_processes 2;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; gzip on; include servers/*.conf;&#125; 10、安装 SEQUEL PROSequel Pro 是一款免费的 MySQL 的图形管理工具。 安装在官网可下载最新版本 11、安装 IntelliJ IDEAIntelliJ IDEA 业界公认为最好的 Java 开发工具之一 安装【官网】，网上有很多破解方法，如果资金允许请支持正版 12、安装 Zookeeper安装通过 brew 安装 1brew install zookeeper 13、LaunchRocket简介是一个帮助管理Homebrew安装的服务的软件，比如你使用brew安装的Mysql、Redis、MongoDB，LaunchRocket 可以管理这些服务的生命周期和启动方式（自启动、手动启动），传统方式需要使用命令行的命令，而使用LaunchRocket则可以在图形界面中进行管理。 安装brew 安装 1brew cask install launchrocket 14、一些其他实用软件办公：1234567891011121314markdown 编辑器：BoostNote、Typora、YuWriter、Mou文本编辑工具：Atom、Visual Studio Code、Sublime时间/项目管理工具：2Do、OmniPlan、OmniForce流程图绘制：OmniGraffle脑图绘制：Xmind、MindNode、iThoughtsX文稿编辑/演示： KeyNote、Pages、Scrivener、Quiver状态栏图标隐藏工具：Bartender3压缩工具：Dr.Unarchiver技术文档离线阅读：Dash效率搜索：Alfred3数据库管理工具：Sequel Pro、Navicat、TablePlusGit 的 GUI 工具：SourceTree、GitUpREST 客户端：Postman、PawHosts 切换管理工具：SwitchHosts 上班必备12社交软件：微信、QQ、钉钉上班听音乐：网易云音乐、酷我音乐、QQ音乐","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"https://blog.milk4j.com/tags/mac/"}]},{"title":"Hexo基本使用","slug":"Hexo基本使用","date":"2015-04-21T15:20:36.000Z","updated":"2018-10-22T02:18:04.969Z","comments":true,"path":"2015/04/21/Hexo基本使用/","link":"","permalink":"https://blog.milk4j.com/2015/04/21/Hexo基本使用/","excerpt":"","text":"官网 Hexo| 文档 documentation | 社区 troubleshooting | Git地址 GitHub. 快速入门新建文章1$ hexo new \"My New Post\" 详细说明: Writing 运行1$ hexo server 详细说明: Server 生成静态文件1$ hexo generate 详细说明: Generating 发布到远程站点1$ hexo deploy 详细说明: Deployment","categories":[{"name":"hexo","slug":"hexo","permalink":"https://blog.milk4j.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.milk4j.com/tags/hexo/"}]}]}