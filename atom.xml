<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jerry Simple</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.milk4j.com/"/>
  <updated>2018-11-20T10:56:03.384Z</updated>
  <id>https://blog.milk4j.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://blog.milk4j.com/2018/11/20/Docker%E6%9E%84%E5%BB%BAEpics/"/>
    <id>https://blog.milk4j.com/2018/11/20/Docker构建Epics/</id>
    <published>2018-11-20T07:43:25.517Z</published>
    <updated>2018-11-20T10:56:03.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker构建Epics"><a href="#Docker构建Epics" class="headerlink" title="Docker构建Epics"></a>Docker构建Epics</h1><h2 id="基于MySQL-5-7-24镜像"><a href="#基于MySQL-5-7-24镜像" class="headerlink" title="基于MySQL:5.7.24镜像"></a>基于MySQL:5.7.24镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7.24</span><br><span class="line">docker run -p 3307:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7.24</span><br><span class="line">docker <span class="built_in">exec</span> -it mysql /bin/bash</span><br><span class="line"><span class="comment"># mysql 镜像是基于debian发行版Linux系统</span></span><br><span class="line">apt-get update <span class="comment"># 更新源</span></span><br><span class="line">apt-get install build-essential  </span><br><span class="line"><span class="comment"># 这个命令最方便，把所有要安装的全部安装好：build-essential是c语言的开发包，包含了gcc make gdb和libc函数库等很多工具。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保证perl gcc g++ c++ 都已安装</span></span><br><span class="line"><span class="built_in">which</span> perl </span><br><span class="line"><span class="built_in">which</span> gcc</span><br><span class="line"><span class="built_in">which</span> g++</span><br><span class="line"><span class="built_in">which</span> c++</span><br><span class="line"><span class="comment"># 编译中可能出现缺少 readline.h</span></span><br><span class="line">apt-get install libreadline-dev</span><br></pre></td></tr></table></figure><h2 id="准备安装"><a href="#准备安装" class="headerlink" title="准备安装"></a>准备安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir epics </span><br><span class="line"><span class="built_in">cd</span> epics</span><br><span class="line">mkdir extensions <span class="comment"># 存放扩展程序</span></span><br><span class="line"><span class="built_in">cd</span> /usr/src</span><br><span class="line">wget https://epics.anl.gov/download/base/base-3.15.5.tar.gz</span><br><span class="line">tar -vxzf base-3.15.5.tar.gz</span><br><span class="line">ln -s base-3.15.5.tar.gz base <span class="comment">#创建软连接</span></span><br><span class="line"><span class="built_in">cd</span> base</span><br><span class="line">./startup/EpicsHostArch <span class="comment"># 获取系统架构, 我的是linux-x86_64</span></span><br><span class="line"><span class="built_in">pwd</span> <span class="comment"># 输出 /home/parallels/epics/base</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vi .bashrc</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line"><span class="comment"># export EPICS_HOST_ARCH=linux-x86_64</span></span><br><span class="line"><span class="comment"># export HOST_ARCH=linux-x86_64</span></span><br><span class="line"><span class="comment"># 上面的linux-x86_64根据系统情况设置，具体参考base/configure/CONFIG_SITE</span></span><br><span class="line"><span class="comment"># export EPICS_EXTENSIONS=/home/parallels/epics/extensions</span></span><br><span class="line"><span class="comment"># export EPICS_BASE=/home/parallels/epics/base</span></span><br><span class="line"><span class="built_in">source</span> .bashrc <span class="comment"># 使环境变量生效</span></span><br><span class="line"><span class="built_in">cd</span> ~/epics/base/startup</span><br><span class="line">./EpicsHostArch <span class="comment"># 获取系统架构, 我的是linux-x86_64</span></span><br><span class="line"><span class="built_in">cd</span> ~/epics/base/configure</span><br><span class="line">vim CONFIG_SITE</span><br><span class="line"><span class="comment"># 填写下面几项值 , 下面的值来自于获取系统架构的输出</span></span><br><span class="line">CROSS_COMPILER_TARGET_ARCHS=linux-x86_64</span><br><span class="line">CROSS_COMPILER_HOST_ARCHS=linux-x86_64</span><br><span class="line">CROSS_COMPILER_RUNTEST_ARCHS=linux-x86_64</span><br></pre></td></tr></table></figure><p>安装Python3</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python3</span><br></pre></td></tr></table></figure><p>安装pip3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python3-pip</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker构建Epics&quot;&gt;&lt;a href=&quot;#Docker构建Epics&quot; class=&quot;headerlink&quot; title=&quot;Docker构建Epics&quot;&gt;&lt;/a&gt;Docker构建Epics&lt;/h1&gt;&lt;h2 id=&quot;基于MySQL-5-7-24镜像&quot;&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://blog.milk4j.com/2018/11/20/Epics%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
    <id>https://blog.milk4j.com/2018/11/20/Epics编译安装/</id>
    <published>2018-11-20T01:14:18.886Z</published>
    <updated>2018-11-21T05:21:01.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Epics编译安装"><a href="#Epics编译安装" class="headerlink" title="Epics编译安装"></a>Epics编译安装</h1><h2 id="我的系统环境"><a href="#我的系统环境" class="headerlink" title="我的系统环境"></a>我的系统环境</h2><blockquote><p>macOS Mojave parallels desktop虚拟机系统: centos 7 linux-x86_64</p><p>Epics版本: <a href="https://epics.anl.gov/download/base/index.php" target="_blank" rel="noopener">3.15.5</a> 下载<a href="https://epics.anl.gov/download/base/base-3.15.5.tar.gz" target="_blank" rel="noopener">链接</a></p></blockquote><h3 id="记一笔"><a href="#记一笔" class="headerlink" title="记一笔:"></a>记一笔:</h3><p>parallels desktop下载的centos7 默认用户名是parallels 密码是需要设置的。软件没有自动设置。密码必须大于8位；</p><p>并且无法进行su命令，提示 Authentication failure。</p><p>这个问题产生的原因是由于系统默认是没有激活root用户的，需要我们手工进行操作，在命令行界面下，或者在终端中输入如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd</span><br><span class="line">Password：你当前的密码</span><br><span class="line">Enter new UNIX password：这个是root的密码</span><br><span class="line">Retype new UNIX password：重复root的密码</span><br></pre></td></tr></table></figure><p>然后会提示成功的信息。 在说明一点，使用su和sudo是有区别的，使用su切换用户需要输入所切换到的用户的密码，而使用sudo则是当前用户的密码。</p><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir epics </span><br><span class="line"><span class="built_in">cd</span> epics</span><br><span class="line">mkdir extensions <span class="comment"># 存放扩展程序</span></span><br><span class="line"><span class="built_in">cd</span> .. </span><br><span class="line">wget https://epics.anl.gov/download/base/base-3.15.5.tar.gz</span><br><span class="line">tar -vxzf base-3.15.5.tar.gz</span><br><span class="line">ln -s base-3.15.5.tar.gz base <span class="comment">#创建软连接</span></span><br><span class="line"><span class="built_in">cd</span> base</span><br><span class="line">./startup/EpicsHostArch <span class="comment"># 获取系统架构, 我的是linux-x86_64</span></span><br><span class="line"><span class="built_in">pwd</span> <span class="comment"># 输出 /home/parallels/epics/base</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vi .bashrc</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line"><span class="comment"># export EPICS_HOST_ARCH=linux-x86_64</span></span><br><span class="line"><span class="comment"># export HOST_ARCH=linux-x86_64</span></span><br><span class="line"><span class="comment"># 上面的linux-x86_64根据系统情况设置，具体参考base/configure/CONFIG_SITE</span></span><br><span class="line"><span class="comment"># export EPICS_EXTENSIONS=/home/parallels/epics/extensions</span></span><br><span class="line"><span class="comment"># export EPICS_BASE=/home/parallels/epics/base</span></span><br><span class="line"><span class="built_in">source</span> .bashrc <span class="comment"># 使环境变量生效</span></span><br><span class="line"><span class="built_in">cd</span> ~/epics/base/startup</span><br><span class="line">./EpicsHostArch <span class="comment"># 获取系统架构, 我的是linux-x86_64</span></span><br><span class="line"><span class="built_in">cd</span> ~/epics/base/configure</span><br><span class="line">vim CONFIG_SITE</span><br><span class="line"><span class="comment"># 填写下面几项值 , 下面的值来自于获取系统架构的输出</span></span><br><span class="line">CROSS_COMPILER_TARGET_ARCHS=linux-x86_64</span><br><span class="line">CROSS_COMPILER_HOST_ARCHS=linux-x86_64</span><br><span class="line">CROSS_COMPILER_RUNTEST_ARCHS=linux-x86_64</span><br></pre></td></tr></table></figure><p><strong>为了确保安装过程顺利</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译中可能出现缺少 readline.h</span></span><br><span class="line">sudo yum install readline-static.x86_64</span><br><span class="line"><span class="comment"># 确保环境安装了 g++ c++ gcc perl</span></span><br><span class="line"><span class="built_in">which</span> perl <span class="comment"># 输出 /usr/bin/perl表示安装了perl,其他三个类似</span></span><br><span class="line"><span class="comment"># 由于我的环境没有g++ 和 c++ ,安装一下</span></span><br><span class="line">sudo yum install gcc gcc-c++</span><br></pre></td></tr></table></figure><p>Make安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/epics/base <span class="comment"># 回到epics base的根目录</span></span><br><span class="line">make </span><br><span class="line"><span class="comment"># 下面就是漫长的等待...</span></span><br><span class="line"><span class="comment"># 如果没有什么问题就成功了,如果编译报缺失什么文件,安装后再依次执行 </span></span><br><span class="line"><span class="comment"># make distclean </span></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line"><span class="comment"># 我的make过程很顺利,花了大概1分钟,但是我在云主机上花了30多分钟</span></span><br><span class="line">ls </span><br><span class="line"><span class="comment"># bin  configure  db  dbd  documentation  html  include  lib  LICENSE  Makefile  README  src  startup  templates</span></span><br><span class="line">vi ~/.bashrc</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:/home/parallels/epics/base/bin/linux-x86_64</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"><span class="comment"># 生效环境变量</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>创建example软件和IOC环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/epics</span><br><span class="line">mkdir -p iocs/example</span><br><span class="line"><span class="built_in">cd</span> iocs</span><br><span class="line"><span class="built_in">cd</span> example</span><br><span class="line">makeBaseApp.pl -t example example</span><br><span class="line">makeBaseApp.pl -i -t example example</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># configure  exampleApp  iocBoot  Makefile</span></span><br><span class="line">make <span class="comment"># 等待完成</span></span><br><span class="line">ls</span><br><span class="line"><span class="comment"># bin  configure  db  dbd  exampleApp  include  iocBoot  lib  Makefile</span></span><br><span class="line"><span class="built_in">cd</span> iocBoot/iocexample/</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># envPaths  Makefile  README  st.cmd</span></span><br><span class="line">sudo chmod +x ./st.cmd</span><br><span class="line">./st.cmd</span><br><span class="line">epics&gt; dbl</span><br><span class="line">parallels:xxxExample</span><br><span class="line">parallels:compressExample</span><br><span class="line">parallels:calcExample</span><br><span class="line">parallels:calcExample1</span><br><span class="line">parallels:calc1</span><br><span class="line">parallels:calcExample2</span><br><span class="line">parallels:calc2</span><br><span class="line">parallels:calcExample3</span><br><span class="line">parallels:calc3</span><br><span class="line">parallels:aSubExample</span><br><span class="line">parallels:subExample</span><br><span class="line">parallels:aiExample</span><br><span class="line">parallels:aiExample1</span><br><span class="line">parallels:ai1</span><br><span class="line">parallels:aiExample2</span><br><span class="line">parallels:ai2</span><br><span class="line">parallels:aiExample3</span><br><span class="line">parallels:ai3</span><br><span class="line">epics&gt; dbpr parallels:ai1</span><br><span class="line">ASG:                DESC: Analog input No. 1                DISA: 0</span><br><span class="line">DISP: 0             DISV: 1             NAME: parallels:aiExample1</span><br><span class="line">RVAL: 0             SEVR: MAJOR         STAT: LOLO          SVAL: 0</span><br><span class="line">TPRO: 0             VAL: 0</span><br></pre></td></tr></table></figure><p>开启一个新终端,继续输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">camonitor parallels:aiExample</span><br></pre></td></tr></table></figure><p>mac os 安装问题</p><ol><li>EXTERN.h 文件缺失:是因为perl的原因, 解决方案 brew install perl-build</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Epics编译安装&quot;&gt;&lt;a href=&quot;#Epics编译安装&quot; class=&quot;headerlink&quot; title=&quot;Epics编译安装&quot;&gt;&lt;/a&gt;Epics编译安装&lt;/h1&gt;&lt;h2 id=&quot;我的系统环境&quot;&gt;&lt;a href=&quot;#我的系统环境&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring Boot 自动配置(autoconfigure)原理</title>
    <link href="https://blog.milk4j.com/2018/11/11/Spring%20Boot%20%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE(autoconfigure)%E5%8E%9F%E7%90%86/"/>
    <id>https://blog.milk4j.com/2018/11/11/Spring Boot 自动配置(autoconfigure)原理/</id>
    <published>2018-11-11T15:59:59.000Z</published>
    <updated>2018-11-27T14:31:09.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-说明"><a href="#0-说明" class="headerlink" title="0. 说明"></a>0. 说明</h2><p>环境配置清单</p><blockquote><p>java version “1.8.0_161”<br>Java(TM) SE Runtime Environment (build 1.8.0_161-b12)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)<br>Spring Boot  2.1.0.RELEASE</p></blockquote><p>项目 <a href="https://github.com/sunlightzy/spring-boot-auto-configuration" target="_blank" rel="noopener">GitHub</a></p><h2 id="1-前提知识"><a href="#1-前提知识" class="headerlink" title="1. 前提知识"></a>1. 前提知识</h2><h3 id="一、SPI扩展机制"><a href="#一、SPI扩展机制" class="headerlink" title="一、SPI扩展机制"></a>一、SPI扩展机制</h3><h4 id="1-解释"><a href="#1-解释" class="headerlink" title="1. 解释"></a>1. 解释</h4><p>SPI:  <code>Service Provider Interface</code> , 即 服务提供接口</p><h4 id="2-如何写一个Java-SPI呢"><a href="#2-如何写一个Java-SPI呢" class="headerlink" title="2. 如何写一个Java SPI呢?"></a>2. 如何写一个Java SPI呢?</h4><ol><li>定义一组接口， 接口是 <code>com.glmapper.spi.FilterProvider</code>；</li><li>接口的一个或多个实现(<code>com.glmapper.spi.provider.FileFilterProvider</code> [从文件系统加载filter], <code>com.glmapper.spi.provider.DataSourceFilterProvider</code> [从数据源中加载filter])；</li><li>在 <code>src/main/resources/</code> 下建立 <code>/META-INF/services</code> 目录， 新增一个以接口命名的文件 <code>com.glmapper.spi.FilterProvider</code>, 内容是要对应的实现类(<code>com.glmapper.spi.provider.FileFilterProvider</code> 或 <code>com.glmapper.spi.provider.DataSourceFilterProvider</code> 或两者)；</li><li>使用 <code>ServiceLoader</code> 来加载配置文件中指定的实现。</li></ol><h4 id="3-SPI应用案例"><a href="#3-SPI应用案例" class="headerlink" title="3. SPI应用案例"></a>3. SPI应用案例</h4><ol><li><p><code>Dubbo</code> 中有大量的<code>SPI</code>应用,不过<code>Dubbo</code>不是原生的<code>java spi</code>机制,他是原生的一个变种 . <code>Dubbo SPI</code>  约定:</p><ol><li>扩展点约定 :  扩展点必须是 <code>Interface</code> 类型 ， 必须被 <code>@SPI</code> 注解 ， 满足这两点才是一个扩展点。</li><li>扩展定义约定 ： 在 <code>META-INF/services/、META-INF/dubbo/、META-INF/dubbo/internal/</code>目录下新建扩展点文件,这些路径下定义的文件名称为扩展点接口的全类名 , 文件中以键值对的方式配置扩展点的扩展实现。例如文件  <code>META-INF/dubbo/internal/com.alibaba.dubbo.common.extension.ExtensionFactory</code>  中定义的扩展 ：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adaptive=com.alibaba.dubbo.common.extension.factory.AdaptiveExtensionFactory</span><br><span class="line">spi=com.alibaba.dubbo.common.extension.factory.SpiExtensionFactory</span><br><span class="line">spring=com.alibaba.dubbo.config.spring.extension.SpringExtensionFactory</span><br></pre></td></tr></table></figure><p>关于<code>Dubbo SPI</code>扩展机制在此不再继续展开描述</p></li><li><p><code>JDBC</code> 数据库驱动包: <code>java mysql</code> 驱动采用原生的<code>spi</code>机制<code>mysql-connector-java-xxx.jar</code> 就有一个 <code>/META-INF/services/java.sql.Driver</code> 里面内容是 </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.mysql.jdbc.Driver</span><br><span class="line">com.mysql.fabric.jdbc.FabricMySQLDriver</span><br></pre></td></tr></table></figure><ol start="3"><li>当然还有今天的主角 <code>spring boot</code> ,他也是原生<code>spi</code>的变种,它的约定是在<code>src/main/resorces/</code>下建立<code>META-INF/spring.factories</code>, 当springboot服务启动时，对象实例化过程会加载<code>META-INF/spring.factories</code>文件，将该配置文件中的配置的类载入到Spring容器中.下面是<code>spring-boot-autoconfigure jar</code>包中<code>spring.factories</code> 的内容:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span><br><span class="line">org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer</span><br><span class="line"></span><br><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span><br><span class="line"></span><br><span class="line"># Auto Configuration Import Listeners</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span><br><span class="line"></span><br><span class="line"># Auto Configuration Import Filters</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnClassCondition</span><br><span class="line"></span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line"># 这里省略了一堆</span><br><span class="line"></span><br><span class="line"># Failure analyzers</span><br><span class="line">org.springframework.boot.diagnostics.FailureAnalyzer=\</span><br><span class="line">org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceBeanCreationFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.HikariDriverConfigurationFailureAnalyzer</span><br><span class="line"></span><br><span class="line"># Template availability providers</span><br><span class="line">org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider=\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.JspTemplateAvailabilityProvider</span><br></pre></td></tr></table></figure><h2 id="2-Spring-Boot-自动配置机制"><a href="#2-Spring-Boot-自动配置机制" class="headerlink" title="2. Spring Boot 自动配置机制"></a>2. Spring Boot 自动配置机制</h2><h3 id="0-总体流程概述"><a href="#0-总体流程概述" class="headerlink" title="0. 总体流程概述"></a>0. 总体流程概述</h3><h3 id="1-几个重要的事件回调机制"><a href="#1-几个重要的事件回调机制" class="headerlink" title="1. 几个重要的事件回调机制"></a>1. 几个重要的事件回调机制</h3><h4 id="ApplicationContextInitializer"><a href="#ApplicationContextInitializer" class="headerlink" title="ApplicationContextInitializer"></a>ApplicationContextInitializer</h4><p>配置在<code>META-INF/spring.factories</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span><br><span class="line">org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer</span><br></pre></td></tr></table></figure><p><strong>ApplicationContextInitializer 是上下文初始化入口</strong></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxkeicqfdrj317y0u07f2.jpg" alt="image-20181125164451526"></p><h4 id="SpringApplicationRunListener"><a href="#SpringApplicationRunListener" class="headerlink" title="SpringApplicationRunListener"></a>SpringApplicationRunListener</h4><p>配置在<code>META-INF/spring.factories</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span><br></pre></td></tr></table></figure><p>SpringApplicationRunListener 的功能是监听容器启动过程也就是<code>SpringApplication.run()</code>方法,</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxkeh4v699j31c40qqteo.jpg" alt="image-20181125164340483"></p><h4 id="ApplicationRunner-amp-CommandLineRunner"><a href="#ApplicationRunner-amp-CommandLineRunner" class="headerlink" title="ApplicationRunner &amp; CommandLineRunner"></a>ApplicationRunner &amp; CommandLineRunner</h4><p><code>CommandLineRunner &amp; ApplicationRunner</code> 接口是在容器启动成功后的最后一步回调（类似开机自启动）, 两者功能差不多, 只需要将其实现类放在<code>IOC</code>容器中,应用启动后会自动回调接口方法</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxkeja1e7aj31bo0mktdo.jpg" alt="image-20181125164546033"></p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxkek96kk9j31b40ootfu.jpg" alt="image-20181125164642736"></p><h3 id="2-自动配置注解"><a href="#2-自动配置注解" class="headerlink" title="2. 自动配置注解"></a>2. 自动配置注解</h3><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><p><strong>@EnableAutoConfiguration是自动配置的开关, 下面看看他的结构</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Enable auto-configuration of the Spring Application Context, attempting to guess and</span></span><br><span class="line"><span class="comment"> * configure beans that you are likely to need. Auto-configuration classes are usually</span></span><br><span class="line"><span class="comment"> * applied based on your classpath and what beans you have defined. For example, if you</span></span><br><span class="line"><span class="comment"> * have &#123;<span class="doctag">@code</span> tomcat-embedded.jar&#125; on your classpath you are likely to want a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> TomcatServletWebServerFactory&#125; (unless you have defined your own</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ServletWebServerFactory&#125; bean).</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * When using &#123;<span class="doctag">@link</span> SpringBootApplication&#125;, the auto-configuration of the context is</span></span><br><span class="line"><span class="comment"> * automatically enabled and adding this annotation has therefore no additional effect.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Auto-configuration tries to be as intelligent as possible and will back-away as you</span></span><br><span class="line"><span class="comment"> * define more of your own configuration. You can always manually &#123;<span class="doctag">@link</span> #exclude()&#125; any</span></span><br><span class="line"><span class="comment"> * configuration that you never want to apply (use &#123;<span class="doctag">@link</span> #excludeName()&#125; if you don't</span></span><br><span class="line"><span class="comment"> * have access to them). You can also exclude them via the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> spring.autoconfigure.exclude&#125; property. Auto-configuration is always applied</span></span><br><span class="line"><span class="comment"> * after user-defined beans have been registered.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The package of the class that is annotated with &#123;<span class="doctag">@code</span> <span class="doctag">@EnableAutoConfiguration</span>&#125;,</span></span><br><span class="line"><span class="comment"> * usually via &#123;<span class="doctag">@code</span> <span class="doctag">@SpringBootApplication</span>&#125;, has specific significance and is often used</span></span><br><span class="line"><span class="comment"> * as a 'default'. For example, it will be used when scanning for &#123;<span class="doctag">@code</span> <span class="doctag">@Entity</span>&#125; classes.</span></span><br><span class="line"><span class="comment"> * It is generally recommended that you place &#123;<span class="doctag">@code</span> <span class="doctag">@EnableAutoConfiguration</span>&#125; (if you're</span></span><br><span class="line"><span class="comment"> * not using &#123;<span class="doctag">@code</span> <span class="doctag">@SpringBootApplication</span>&#125;) in a root package so that all sub-packages</span></span><br><span class="line"><span class="comment"> * and classes can be searched.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Auto-configuration classes are regular Spring &#123;<span class="doctag">@link</span> Configuration&#125; beans. They are</span></span><br><span class="line"><span class="comment"> * located using the &#123;<span class="doctag">@link</span> SpringFactoriesLoader&#125; mechanism (keyed against this class).</span></span><br><span class="line"><span class="comment"> * Generally auto-configuration beans are &#123;<span class="doctag">@link</span> Conditional <span class="doctag">@Conditional</span>&#125; beans (most</span></span><br><span class="line"><span class="comment"> * often using &#123;<span class="doctag">@link</span> ConditionalOnClass <span class="doctag">@ConditionalOnClass</span>&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ConditionalOnMissingBean <span class="doctag">@ConditionalOnMissingBean</span>&#125; annotations).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Phillip Webb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephane Nicoll</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ConditionalOnBean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ConditionalOnMissingBean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ConditionalOnClass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> AutoConfigureAfter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> SpringBootApplication</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="comment">// 自动配置包,注册扫描包</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="comment">// 导入的这个AutoConfigurationImportSelector是自动配置的关键</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude specific auto-configuration classes such that they will never be applied.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the classes to exclude</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude specific auto-configuration class names such that they will never be</span></span><br><span class="line"><span class="comment"> * applied.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the class names to exclude</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<code>AutoConfigurationImportSelector</code>找到<code>selectImports()</code>方法，他调用了<code>getCandidateConfigurations()</code>方法，在这里，这个方法又调用了<code>Spring Core</code>包中的<code>loadFactoryNames()</code>方法。这个方法的作用是，会查询<code>META-INF/spring.factories</code>文件中包含的<code>JAR</code>文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">       <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">           <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//1. 得到注解信息</span></span><br><span class="line">       AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader</span><br><span class="line">           .loadMetadata(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">       AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(</span><br><span class="line">           autoConfigurationMetadata, annotationMetadata);</span><br><span class="line">       <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the &#123;<span class="doctag">@link</span> AutoConfigurationEntry&#125; based on the &#123;<span class="doctag">@link</span> AnnotationMetadata&#125;</span></span><br><span class="line"><span class="comment"> * of the importing &#123;<span class="doctag">@link</span> Configuration <span class="doctag">@Configuration</span>&#125; class.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> autoConfigurationMetadata the auto-configuration metadata</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> annotationMetadata the annotation metadata of the configuration class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the auto-configurations that should be imported</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">AutoConfigurationMetadata autoConfigurationMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line"><span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">// 2. 得到注解中的所有属性信息</span></span><br><span class="line">AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class="line">       <span class="comment">// 3. 得到spring.factories中配置在EnableAutoConfiguration下的字符串列表</span></span><br><span class="line">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,</span><br><span class="line">attributes);</span><br><span class="line">       <span class="comment">// 4. 去重</span></span><br><span class="line">configurations = removeDuplicates(configurations);</span><br><span class="line">       <span class="comment">// 5. 根据注解中的exclude信息去除不需要的</span></span><br><span class="line">Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">checkExcludedClasses(configurations, exclusions);</span><br><span class="line">configurations.removeAll(exclusions);</span><br><span class="line">configurations = filter(configurations, autoConfigurationMetadata);</span><br><span class="line">       <span class="comment">// 7. 派发事件</span></span><br><span class="line">fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有的自动配置类,也就是配置在spring.factories中 EnableAutoConfiguration 下的所有字符串列表</span></span><br><span class="line"><span class="comment"> * Return the auto-configuration class names that should be considered. By default</span></span><br><span class="line"><span class="comment"> * this method will load candidates using &#123;<span class="doctag">@link</span> SpringFactoriesLoader&#125; with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #getSpringFactoriesLoaderFactoryClass()&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> metadata the source metadata</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> attributes the &#123;<span class="doctag">@link</span> #getAttributes(AnnotationMetadata) annotation</span></span><br><span class="line"><span class="comment"> * attributes&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a list of candidate configurations</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata,</span></span></span><br><span class="line"><span class="function"><span class="params">AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// getSpringFactoriesLoaderFactoryClass()直接返回EnableAutoConfiguration.class</span></span><br><span class="line">       <span class="comment">// 所以这一步加载了所有的自动配置类</span></span><br><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(</span><br><span class="line">getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());</span><br><span class="line">Assert.notEmpty(configurations,</span><br><span class="line"><span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span></span><br><span class="line">+ <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</span><br><span class="line"><span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the class used by &#123;<span class="doctag">@link</span> SpringFactoriesLoader&#125; to load configuration</span></span><br><span class="line"><span class="comment"> * candidates.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the factory class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line"><span class="keyword">return</span> EnableAutoConfiguration.class;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面进入<code>org.springframework.core.io.support.SpringFactoriesLoader#loadFactoryNames</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load the fully qualified class names of factory implementations of the</span></span><br><span class="line"><span class="comment"> * given type from &#123;<span class="doctag">@value</span> #FACTORIES_RESOURCE_LOCATION&#125;, using the given</span></span><br><span class="line"><span class="comment"> * class loader.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> factoryClass the interface or abstract class representing the factory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classLoader the ClassLoader to use for loading resources; can be</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> null&#125; to use the default</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if an error occurs while loading factory names</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #loadFactories</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取全类名</span></span><br><span class="line">   String factoryClassName = factoryClass.getName();</span><br><span class="line">    <span class="comment">// 加载所有的spring.factories中的配置,然后筛选出factoryClassName下的配置的值</span></span><br><span class="line">   <span class="keyword">return</span> loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxkfaf053aj31ac0u0h0m.jpg" alt="image-20181125170438713"></p><p>在上面的<code>spring-boot-autoconfigure.jar</code>里的<code>spring.factories</code>文件下我们可以看到有这么一段关于<code>EnableAutoConfiguration</code>的配置(放一小段)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure><p>在<code>SpringBoot</code>启动配置类上面打上<code>@EnableAutoConfiguration</code>注解之后<code>springboot</code>就会实例化配置文件中这些<code>XxxAutoConfiguration</code>类启用这些类的功能, </p><p>==<strong>需要注意的是</strong>: 加了<code>@EableAutoConfiguration</code>注解的配置类只会为这个类所在的包以及子包下面的类自动配置==</p><p><code>@EnableAutoConfiguration</code>是自动配置的开关 ,如果要自己写自动配置类,还有一些<code>Conditional</code>的注解类需要掌握</p><h4 id="ConditionalOnXxx系列注解"><a href="#ConditionalOnXxx系列注解" class="headerlink" title="@ConditionalOnXxx系列注解"></a>@ConditionalOnXxx系列注解</h4><p><strong><code>SpringBoot</code>的自动配置全都依赖于这个系列的注解,下面列举了一些:</strong></p><blockquote><p><code>ConditionalOnBean</code>                 当指定bean存在时, 配置生效<br><code>ConditionalOnClass</code>                 当指定类存在时, 配置生效<br><code>ConditionalOnCloudPlatform</code>         当项目环境为指定云平台环境时, 配置生效<br><code>ConditionalOnEnableResourceChain</code>     当<code>ResourceChain</code>是启用状态时, 配置生效<br><code>ConditionalOnExpression</code>            当表达式为true时, 配置生效<br><code>ConditionalOnJava</code>                当环境的java为指定版本时,配置生效<br><code>ConditionalOnJndi</code>                当指定的<code>JNDI</code>存在时, 配置生效<br><code>ConditionalOnMissingBean</code>            当指定的bean不存在时, 配置生效<br><code>ConditionalOnMissingClass</code>        当指定的类不存在时, 配置生效<br><code>ConditionalOnNotWebApplication</code>    当项目为非web项目时, 配置生效<br><code>ConditionalOnProperty</code>            当指定的配置存在时, 配置生效<br><code>ConditionalOnResource</code>            当指定的资源存在时, 配置生效<br><code>ConditionalOnSingleCandidate</code>        当指定的类是单例时, 配置生效<br><code>ConditionalOnWebApplication</code>        当项目是web项目时, 配置生效</p></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxkflre2kcj327u0motr4.jpg" alt="image-20181125172244614"></p><h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4><p>下面以<code>HttpEncodingAutoConfiguration</code>为例来看一下自动配置</p><blockquote><p><code>@ConditionalOnProperty</code>注解的玩法很多, 详细使用案例参考本文文末附件<strong>@ConditionalOnProperty注解</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> EnableAutoConfiguration Auto-configuration&#125; for configuring the encoding to use</span></span><br><span class="line"><span class="comment"> * in web applications.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephane Nicoll</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Brian Clozel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 启用HttpProperties配置并加入到IOC容器</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HttpProperties.class)</span><br><span class="line"><span class="comment">// 当项目是servlet容器下的web项目时,这个配置类才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = ConditionalOnWebApplication.Type.SERVLET)</span><br><span class="line"><span class="comment">// 当CharacterEncodingFilter类存在时,这个配置类才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(CharacterEncodingFilter.class)</span><br><span class="line"><span class="comment">// 当spring.http.encoding.enabled这个环境变量存在且值不为false时,这个配置类才生效</span></span><br><span class="line"><span class="comment">// @ConditionalOnProperty这个注解的玩法很多</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.http.encoding"</span>, value = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> HttpProperties.Encoding properties;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="comment">// 当容器中没有CharacterEncodingFilter类型的实例时,这个方法生效</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">      filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">      filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">      filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">      <span class="keyword">return</span> filter;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> LocaleCharsetMappingsCustomizer <span class="title">localeCharsetMappingsCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> LocaleCharsetMappingsCustomizer(<span class="keyword">this</span>.properties);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LocaleCharsetMappingsCustomizer</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">         <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">ConfigurableServletWebServerFactory</span>&gt;, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> HttpProperties.Encoding properties;</span><br><span class="line"></span><br><span class="line">      LocaleCharsetMappingsCustomizer(HttpProperties.Encoding properties) &#123;</span><br><span class="line">         <span class="keyword">this</span>.properties = properties;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableServletWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">this</span>.properties.getMapping() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            factory.setLocaleCharsetMappings(<span class="keyword">this</span>.properties.getMapping());</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-SpringBoot启动过程"><a href="#3-SpringBoot启动过程" class="headerlink" title="3. SpringBoot启动过程"></a>3. SpringBoot启动过程</h2><h3 id="0-总体流程概述-1"><a href="#0-总体流程概述-1" class="headerlink" title="0. 总体流程概述"></a>0. 总体流程概述</h3><h3 id="1-创建启动类"><a href="#1-创建启动类" class="headerlink" title="1. 创建启动类"></a>1. 创建启动类</h3><p>1.1. 创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bootstrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用SpringApplication静态方法run为入口</span></span><br><span class="line">        SpringApplication.run(Bootstrap.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2. 跟踪进入<code>org.springframework.boot.SpringApplication#run(java.lang.String...)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Static helper that can be used to run a &#123;<span class="doctag">@link</span> SpringApplication&#125; from the</span></span><br><span class="line"><span class="comment">    * specified sources using default settings and user supplied arguments.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> sources the sources to load</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> args the application arguments (usually passed from a Java main method)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the running &#123;<span class="doctag">@link</span> ApplicationContext&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Object[] sources, String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 进入构造器,会有初始化过程</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SpringApplication(sources).run(args);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new &#123;<span class="doctag">@link</span> SpringApplication&#125; instance. The application context will load</span></span><br><span class="line"><span class="comment"> * beans from the specified sources (see &#123;<span class="doctag">@link</span> SpringApplication class-level&#125;</span></span><br><span class="line"><span class="comment"> * documentation for details. The instance can be customized before calling</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #run(String...)&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sources the bean sources</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #run(Object, String[])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #SpringApplication(ResourceLoader, Object...)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(Object... sources)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 初始化</span></span><br><span class="line">initialize(sources);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Object[] sources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sources != <span class="keyword">null</span> &amp;&amp; sources.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.sources.addAll(Arrays.asList(sources));</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">// 推断是否为web环境</span></span><br><span class="line"><span class="keyword">this</span>.webEnvironment = deduceWebEnvironment();</span><br><span class="line">       <span class="comment">// 获取所有的配置在spring.factores中的ApplicationContextInitializer</span></span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">ApplicationContextInitializer.class));</span><br><span class="line">       <span class="comment">// 获取所有的配置在spring.factores中的ApplicationContextInitializer</span></span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">       <span class="comment">// 推断启动类,我们这里就是Bootstrap.class</span></span><br><span class="line"><span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运行spring应用,创建一个新的spring上ApplicationContext下文环境</span></span><br><span class="line"><span class="comment"> * Run the Spring application, creating and refreshing a new</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ApplicationContext&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args the application arguments (usually passed from a Java main method)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a running &#123;<span class="doctag">@link</span> ApplicationContext&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start();</span><br><span class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">       <span class="comment">// 加载java的AWT图形化相关的系统配置变量, 可以忽略</span></span><br><span class="line">configureHeadlessProperty();</span><br><span class="line">       <span class="comment">// 实例化spring.factories中配置的所有SpringApplicationRunListener并返回到 listeners 中</span></span><br><span class="line">       <span class="comment">// SpringApplicationRunListeners内部是一个List&lt;SpringApplicationRunListener&gt;</span></span><br><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">       <span class="comment">// 启动应用监听器,回调starting方法,</span></span><br><span class="line">       <span class="comment">// spring应用进行到某一阶段时会广播通知所有的监听器, 监听器的方法就会被回调执行</span></span><br><span class="line">listeners.starting();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 包装命令行启动参数 也就是 Bootstrap.main(String[] args)中的args</span></span><br><span class="line">           <span class="comment">// 我们可以通过命令号启动应用 java -jar demo.jar --server.port=8989 这个server.port=8989就是启动参数</span></span><br><span class="line">           <span class="comment">// 他可以接受多个启动参数,包括指定profile [dev/test/pre/prod]</span></span><br><span class="line">ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">           <span class="comment">// 准备应用环境, 包括读取系统环境变量/yml,properties等配置文件, </span></span><br><span class="line">           <span class="comment">// 同时回调listeners的environmentPrepared方法</span></span><br><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">applicationArguments);</span><br><span class="line">           <span class="comment">// 打印Banner 也就是我们启动应用时控制台打印出的Spring 的 logo了,这个也可以自定义</span></span><br><span class="line">           <span class="comment">// 有兴趣的自行百度自定义springboot banner, 我不喜欢这些花里胡哨的东西(才怪)</span></span><br><span class="line">Banner printedBanner = printBanner(environment);</span><br><span class="line">           <span class="comment">// 创建上下文,决定创建web的ioc还是普通的ioc</span></span><br><span class="line">context = createApplicationContext();</span><br><span class="line">           <span class="comment">// 实例化配置在spring.factories中的FailureAnalyzer应用启动失败的分析器,并返回</span></span><br><span class="line">analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">           <span class="comment">// 上下文准备,会广播通知listeners回调contextPrepared方法</span></span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">printedBanner);</span><br><span class="line">           <span class="comment">// 刷新上下文</span></span><br><span class="line">refreshContext(context);</span><br><span class="line">           <span class="comment">// 上下文刷新后的一些擦屁股工作</span></span><br><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line">           <span class="comment">// 容器已经创建和刷新完成,广播通知listeners回调finished方法</span></span><br><span class="line">listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">stopWatch.stop();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line"><span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">.logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">&#125;</span><br><span class="line">           <span class="comment">// 到此如果没有启动报错,那你的应用就已经启动完成了</span></span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们要说的是<code>springboot</code>自动配置, 但是我写这些做什么呢? 因为自动配置就是在上面的一些步骤中完成的,下面继续</p><p>总结一下,应用启动过程经历了哪些阶段呢. </p><ol><li><code>getRunListeners(...)</code>获取SpringApplicationRunListener监听器</li><li><code>prepareEnvironment(...)</code>应用环境准备</li><li><code>createApplicationContext(...)</code>创建应用上下文</li><li><code>prepareContext(...)</code>上下文准备</li><li><code>refreshContext(...)</code>刷新上下文</li><li><code>afterRefresh(...)</code>上下文刷新完后的一些收尾工作</li></ol><h3 id="2-prepareEnvironment"><a href="#2-prepareEnvironment" class="headerlink" title="2. prepareEnvironment"></a>2. prepareEnvironment</h3><p><strong>容器环境准备阶段</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">prepareEnvironment</span><span class="params">(SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 存在就获取环境,不存在就创建环境</span></span><br><span class="line">    ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class="line">    <span class="comment">// 环境配置:</span></span><br><span class="line">    <span class="comment">// 1. 收集用户自定义的配置和系统环境变量</span></span><br><span class="line">    <span class="comment">// 2. 收集Profiles信息</span></span><br><span class="line">    configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">    <span class="comment">// 遍历listeners 调用 environmentPrepared</span></span><br><span class="line">    listeners.environmentPrepared(environment);</span><br><span class="line">    <span class="comment">// 把环境绑定到SpringApplication, 实际上是增加了一个K-V键值对==&gt;</span></span><br><span class="line">    <span class="comment">// "spring.main" = SpringApplication的Bindable对象</span></span><br><span class="line">    bindToSpringApplication(environment);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isCustomEnvironment) &#123;</span><br><span class="line">        <span class="comment">// 推断项目的环境,并把当前环境转换成项目所需要的环境</span></span><br><span class="line">        environment = <span class="keyword">new</span> EnvironmentConverter(getClassLoader())</span><br><span class="line">            .convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());</span><br><span class="line">    &#125;</span><br><span class="line">    ConfigurationPropertySources.attach(environment);</span><br><span class="line">    <span class="keyword">return</span> environment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-createApplicationContext"><a href="#3-createApplicationContext" class="headerlink" title="3. createApplicationContext"></a>3. createApplicationContext</h3><p><strong>根据是否为web环境来决定创建一个web应用或者非web应用的上下文</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title">createApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = <span class="keyword">this</span>.applicationContextClass;</span><br><span class="line">    <span class="keyword">if</span> (contextClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 根据环境来创建对应的上下文, 下面的值的包名我省略了</span></span><br><span class="line">            <span class="comment">//DEFAULT_CONTEXT_CLASS: "AnnotationConfigApplicationContext";</span></span><br><span class="line">            <span class="comment">//DEFAULT_SERVLET_WEB_CONTEXT_CLASS: "AnnotationConfigServletWebServerApplicationContext";</span></span><br><span class="line">            <span class="comment">//DEFAULT_REACTIVE_WEB_CONTEXT_CLASS: "AnnotationConfigReactiveWebServerApplicationContext";</span></span><br><span class="line">            <span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;</span><br><span class="line">                <span class="keyword">case</span> SERVLET:</span><br><span class="line">                    contextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> REACTIVE:</span><br><span class="line">                    contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                <span class="string">"Unable create a default ApplicationContext, "</span></span><br><span class="line">                + <span class="string">"please specify an ApplicationContextClass"</span>,</span><br><span class="line">                ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建并返回应用上下文</span></span><br><span class="line">    <span class="keyword">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-prepareContext"><a href="#4-prepareContext" class="headerlink" title="4. prepareContext"></a>4. prepareContext</h3><p><strong>上下文的一些成员变量初始化工作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(ConfigurableApplicationContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">      ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">      ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">   context.setEnvironment(environment);</span><br><span class="line">    <span class="comment">// 做了三件事:</span></span><br><span class="line">    <span class="comment">// 1. 注册beanNameGenerator到Context中</span></span><br><span class="line">    <span class="comment">// 2. 为Context设置资源加载器resourceLoader</span></span><br><span class="line">    <span class="comment">// 3. 为Context设置类加载器</span></span><br><span class="line">    <span class="comment">// 4. 为Context设置ConversionService, ConversionService是提供值转换服务的</span></span><br><span class="line">   postProcessApplicationContext(context);</span><br><span class="line">    <span class="comment">// 触发ApplicationContextInitializer初始化方法,初始化上下文</span></span><br><span class="line">   applyInitializers(context);</span><br><span class="line">    <span class="comment">// 遍历触发listener的contextPrepared方法</span></span><br><span class="line">   listeners.contextPrepared(context);</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">      logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">      logStartupProfileInfo(context);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Add boot specific singleton beans  把命令行参数添加到ioc中</span></span><br><span class="line">   context.getBeanFactory().registerSingleton(<span class="string">"springApplicationArguments"</span>,</span><br><span class="line">         applicationArguments);</span><br><span class="line">   <span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">      context.getBeanFactory().registerSingleton(<span class="string">"springBootBanner"</span>, printedBanner);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">       ((DefaultListableBeanFactory) beanFactory)</span><br><span class="line">        .setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// Load the sources</span></span><br><span class="line">   Set&lt;Object&gt; sources = getSources();</span><br><span class="line">   Assert.notEmpty(sources, <span class="string">"Sources must not be empty"</span>);</span><br><span class="line">    <span class="comment">// 加载上下文:</span></span><br><span class="line">    <span class="comment">// 1. 实例化 BeanDefinitionLoader</span></span><br><span class="line">    <span class="comment">// 2. 执行load()方法</span></span><br><span class="line">    <span class="comment">//  2.1 加载启动类上的注解、解析注解元信息、</span></span><br><span class="line">   load(context, sources.toArray(<span class="keyword">new</span> Object[sources.size()]));</span><br><span class="line">    <span class="comment">// 遍历listener调动contextLoaded上下文加载完成方法</span></span><br><span class="line">   listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// load()最终会到AnnotatedBeanDefinitionReader#doRegisterBean方法,看看做了些啥</span></span><br><span class="line">&lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">doRegisterBean</span><span class="params">(Class&lt;T&gt; annotatedClass, @Nullable Supplier&lt;T&gt; instanceSupplier, @Nullable String name, @Nullable Class&lt;? extends Annotation&gt;[] qualifiers, BeanDefinitionCustomizer... definitionCustomizers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分析启动类的注解的信息</span></span><br><span class="line">    AnnotatedGenericBeanDefinition abd = <span class="keyword">new</span> AnnotatedGenericBeanDefinition(annotatedClass);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.conditionEvaluator.shouldSkip(abd.getMetadata())) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Supplier无参数有返回值的接口方法</span></span><br><span class="line">    abd.setInstanceSupplier(instanceSupplier);</span><br><span class="line">    <span class="comment">//检查scope，实例中没有指定，默认是singleton</span></span><br><span class="line">    ScopeMetadata scopeMetadata = <span class="keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(abd);</span><br><span class="line">    abd.setScope(scopeMetadata.getScopeName());</span><br><span class="line">    <span class="comment">////获取bean的名字，这里是启动类</span></span><br><span class="line">    String beanName = (name != <span class="keyword">null</span> ? name : <span class="keyword">this</span>.beanNameGenerator.generateBeanName(abd, <span class="keyword">this</span>.registry));</span><br><span class="line">    <span class="comment">// 对于是否是@lazy，是否使用了@primary</span></span><br><span class="line">    AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);</span><br><span class="line">    <span class="keyword">if</span> (qualifiers != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;? extends Annotation&gt; qualifier : qualifiers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Primary.class == qualifier) &#123;</span><br><span class="line">                abd.setPrimary(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Lazy.class == qualifier) &#123;</span><br><span class="line">                abd.setLazyInit(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                abd.addQualifier(<span class="keyword">new</span> AutowireCandidateQualifier(qualifier));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (BeanDefinitionCustomizer customizer : definitionCustomizers) &#123;</span><br><span class="line">        customizer.customize(abd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据注解信息生产BeanDefinition</span></span><br><span class="line">    BeanDefinitionHolder definitionHolder = <span class="keyword">new</span> BeanDefinitionHolder(abd, beanName);</span><br><span class="line">    <span class="comment">// 根据Bean的作用域，创建相应的代理对象</span></span><br><span class="line">    definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">    <span class="comment">// 将Bean加入到beanDefinitionMap中</span></span><br><span class="line">    BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-refreshContext"><a href="#5-refreshContext" class="headerlink" title="5. refreshContext"></a>5. refreshContext</h3><p>最终会定位到<code>org.springframework.context.support.AbstractApplicationContext#refresh</code>方法,  除此之外最后还会注册<code>ShutdownHook</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">      <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">      <span class="comment">// 1. 清除缓存</span></span><br><span class="line">      <span class="comment">// 2. 初始化所有在上下文环境中的占位符配置</span></span><br><span class="line">      <span class="comment">// 3. 校验所有required的配置是否已经被解析完成</span></span><br><span class="line">      prepareRefresh();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">      <span class="comment">// 通知子类刷新Bean工厂</span></span><br><span class="line">      <span class="comment">//  1. 为BeanFactory设置了一个ID, 就是在yaml文件中配置的spring.application.name</span></span><br><span class="line">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">      <span class="comment">// 1. 为BeanFactory设置类加载器</span></span><br><span class="line">      <span class="comment">// 2. 设置表达式解析器StandardBeanExpressionResolver</span></span><br><span class="line">      <span class="comment">// 3. 设置配置文件注册器ResourceEditorRegistrar</span></span><br><span class="line">      <span class="comment">// 4. 设置Bean的后置处理器</span></span><br><span class="line">      <span class="comment">// 不一一列举了,下面看图</span></span><br><span class="line">      prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">         <span class="comment">// 1. 添加子类自定义的Bean后置处理器</span></span><br><span class="line">         <span class="comment">// 2. 扫描basePackage下的类,按照需求加入到容器</span></span><br><span class="line">         <span class="comment">// 3. 把带有Spring注解的类加入到容器</span></span><br><span class="line">         postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">         <span class="comment">// 调用IOC容器中所有的Bean工厂处理器 BeanDefinitionRegistryPostProcessor、BeanFactoryPostProcessor</span></span><br><span class="line">         <span class="comment">// 1. 配置类后置处理器 ConfigurationClassPostProcessor 解析 配置类 转换为 BeanDefinition</span></span><br><span class="line">         <span class="comment">//    1.1 @ComponentScan注解配置的basePackage</span></span><br><span class="line">         <span class="comment">//    1.2 @Import注解导入的配置类</span></span><br><span class="line">         <span class="comment">//    1.3 @ImportResource注解导入的xml文件</span></span><br><span class="line">         <span class="comment">//    1.4 @Bean注解的方法</span></span><br><span class="line">         <span class="comment">//    1.5 @PropertySource注解导入的.properties配置文件</span></span><br><span class="line">         <span class="comment">//    1.6 处理所有的SpringBoot配置类</span></span><br><span class="line">         <span class="comment">// 2. 后置处理器太多了, 功能列不过来了</span></span><br><span class="line">         invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">         <span class="comment">// 注册所有 用于拦截Bean创建的BeanProcessor</span></span><br><span class="line">         registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">         <span class="comment">// 初始化MessageSource, 供i18n用的</span></span><br><span class="line">         initMessageSource();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">         <span class="comment">// 初始化事件广播器, 在这之前的listener都是遍历直接调用的方法, 从这里开始,listener会通过接受广播的方式回调</span></span><br><span class="line">         initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">         <span class="comment">// 初始化其他特定的Bean在指定的容器中,比如父子容器</span></span><br><span class="line">         <span class="comment">// 比如在web容器中会初始化TomcatWebServer</span></span><br><span class="line">         onRefresh();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">         <span class="comment">// 检查并注册listener到广播器</span></span><br><span class="line">         registerListeners();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">         <span class="comment">// 初始化所有的非懒加载的单例对象</span></span><br><span class="line">         <span class="comment">// 需要注意的是在AbstractAutowireCapableBeanFactory#createBean(String, RootBeanDefinition, Object[])</span></span><br><span class="line">         <span class="comment">// 这个方法中有一段如下代码</span></span><br><span class="line">         <span class="comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span><br><span class="line">         <span class="comment">// 这个方法注释的意思是给BeanPostProcessor一个返回目标接口的代理对象的机会, 具体可查阅和</span></span><br><span class="line">         <span class="comment">// InstantiationAwareBeanPostProcessor相关的资料</span></span><br><span class="line">     <span class="comment">// Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span></span><br><span class="line">         finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">         <span class="comment">// 完成刷新: </span></span><br><span class="line">         <span class="comment">// 1. 清除各种缓存</span></span><br><span class="line">         <span class="comment">// 2. 初始化生命周期处理器</span></span><br><span class="line">         <span class="comment">// 3. 发布ContextRefreshedEvent事件</span></span><br><span class="line">         <span class="comment">// 4. 启动WebServer</span></span><br><span class="line">         <span class="comment">// 5. 发布ServletWebServerInitializedEvent时间</span></span><br><span class="line">         finishRefresh();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                  <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">         destroyBeans();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">         cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">         <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">         resetCommonCaches();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="prepareBeanFactory"><a href="#prepareBeanFactory" class="headerlink" title="prepareBeanFactory"></a>prepareBeanFactory</h4><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxlo3y71fbj31610u04gy.jpg" alt="image-20181126190231737"></p><h3 id="6-afterRefresh"><a href="#6-afterRefresh" class="headerlink" title="6. afterRefresh"></a>6. afterRefresh</h3><p>这个阶段SpringBoot没有具体的实现,留给开发者自定义子类去实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Called after the context has been refreshed.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context the application context</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args the application arguments</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterRefresh</span><span class="params">(ConfigurableApplicationContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">      ApplicationArguments args)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-附件"><a href="#4-附件" class="headerlink" title="4. 附件"></a>4. 附件</h2><h5 id="ConditionalOnProperty注解"><a href="#ConditionalOnProperty注解" class="headerlink" title="@ConditionalOnProperty注解"></a>@ConditionalOnProperty注解</h5><h6 id="一、-ConditionalOnProperty-结构"><a href="#一、-ConditionalOnProperty-结构" class="headerlink" title="一、@ConditionalOnProperty 结构"></a>一、@ConditionalOnProperty 结构</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)  </span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)  </span><br><span class="line"><span class="meta">@Documented</span>  </span><br><span class="line"><span class="meta">@Conditional</span>(&#123;OnPropertyCondition.class&#125;)  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnProperty &#123;  </span><br><span class="line">    <span class="comment">//数组，获取对应property名称的值，不可与name同时使用  </span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//property名称的前缀，可有可无</span></span><br><span class="line">    <span class="function">String <span class="title">prefix</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//数组，property完整名称或部分名称（可与prefix组合使用，组成完整的property名称），不可与value同时使用 </span></span><br><span class="line">    String[] name() <span class="keyword">default</span> &#123;&#125;; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//可与name组合使用，比较获取到的属性值与havingValue给定的值是否相同，相同才加载配置  </span></span><br><span class="line">    <span class="function">String <span class="title">havingValue</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//缺少该property时是否可以加载。如果为true，没有该property也会正常加载；反之报错</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matchIfMissing</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//是否可以松散匹配  </span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">relaxedNames</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="二、-ConditionalOnProperty-用法"><a href="#二、-ConditionalOnProperty-用法" class="headerlink" title="二、@ConditionalOnProperty 用法"></a>二、@ConditionalOnProperty 用法</h6><p><strong>1. 有如下spring boot代码和yml配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"object.pool.size"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectPoolConfig</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml配置如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    size:</span> <span class="literal">true</span>     <span class="string">//正常</span>  </span><br><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    size:</span>          <span class="string">//正常，空字符时</span>   </span><br><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    size:</span> <span class="literal">false</span>    <span class="string">//失败</span>  </span><br><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    size:</span> <span class="literal">null</span>     <span class="string">//正常</span>  </span><br><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    size:</span> <span class="number">30</span>       <span class="string">//正常</span></span><br></pre></td></tr></table></figure></p><p><strong>2. 有如下spring boot代码和yml配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"object.pool.size"</span>,havingValue=<span class="string">"30"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectPoolConfig</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml配置如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    size:</span> <span class="number">1234</span>     <span class="string">//失败,与havingValue给定的值不一致</span>     </span><br><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    size:</span> <span class="literal">false</span>    <span class="string">//失败,与havingValue给定的值不一致</span>  </span><br><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    size:</span> <span class="number">30</span>       <span class="string">//正常</span></span><br></pre></td></tr></table></figure></p><blockquote><p>当且仅当配置文件中的Value和havingValue的值一致时才加载成功<br><strong>3. 有如下spring boot代码和yml配置</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"object.pool"</span>,name = <span class="string">"size"</span>,havingValue=<span class="string">"30"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectPoolConfig</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml配置如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    size:</span> <span class="number">1234</span>     <span class="string">//失败,与havingValue给定的值不一致</span></span><br><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    size:</span> <span class="literal">false</span>    <span class="string">//失败,与havingValue给定的值不一致</span></span><br><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    size:</span> <span class="number">30</span>       <span class="string">//正常</span></span><br></pre></td></tr></table></figure></p><p><strong>4. 有如下spring boot代码和yml配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"object.pool"</span>,name = <span class="string">"size"</span>,havingValue=<span class="string">"30"</span>,matchIfMissing = <span class="keyword">true</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectPoolConfig</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>yml不配置相关参数,正常启动，当 matchIfMissing = true 时，即使没有 <code>object.pool.size</code> 属性也会加载正常<br><strong>5. 有如下spring boot代码和yml配置</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="comment">//matchIfMissing的缺省值为false</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"object.pool"</span>,name = <span class="string">"size"</span>,havingValue=<span class="string">"30"</span>,matchIfMissing = <span class="keyword">false</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectPoolConfig</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml配置如下：</p><blockquote><p>yml不配置相关参数,加载失败,当 matchIfMissing = false 时，必须要有对应的属性配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    size:</span> <span class="number">1234</span>     <span class="string">//失败,与havingValue给定的值不一致</span></span><br><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    size:</span> <span class="literal">false</span>    <span class="string">//失败,与havingValue给定的值不一致</span></span><br><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    size:</span> <span class="number">30</span>       <span class="string">//正常</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>6. 有如下spring boot代码和yml配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"object.pool"</span>,name = &#123;<span class="string">"size"</span>,<span class="string">"timeout"</span>&#125;)  <span class="comment">//name中的属性需要两个都存在且都不为false才会加载正常  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectPoolConfig</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml配置如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">object.pool:</span> </span><br><span class="line"><span class="attr">    timeout:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    size:</span> <span class="number">1234</span>     <span class="string">//正常</span></span><br><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    timeout:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    size:</span> <span class="literal">false</span>    <span class="string">//失败,两个值都不能为</span> <span class="literal">false</span></span><br><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    timeout:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    size:</span> <span class="literal">true</span>     <span class="string">//正常</span></span><br></pre></td></tr></table></figure></p><p><strong>7. 有如下spring boot代码和yml配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"object.pool"</span>,name = &#123;<span class="string">"size"</span>,<span class="string">"timeout"</span>&#125;,havingValue=<span class="string">"false"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectPoolConfig</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.yml配置如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    timeout:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    size:</span> <span class="literal">false</span>    <span class="string">//正常</span></span><br></pre></td></tr></table></figure></p><p><strong>8. 有如下spring boot代码和yml配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"object.pool"</span>, name = &#123;<span class="string">"size"</span>, <span class="string">"timeout"</span>&#125;, havingValue = <span class="string">"123"</span>, matchIfMissing = <span class="keyword">true</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectPoolConfig</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml配置如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">123</span></span><br><span class="line"><span class="attr">    size:</span> <span class="literal">false</span>     <span class="string">//失败,和havingValue的值不一致</span></span><br><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">123</span></span><br><span class="line"><span class="attr">    size:</span> <span class="number">1234</span>      <span class="string">//失败,和havingValue的值不一致</span></span><br><span class="line"><span class="string">object.pool:</span>  </span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">123</span></span><br><span class="line"><span class="attr">    size:</span> <span class="number">123</span>       <span class="string">//正常</span></span><br></pre></td></tr></table></figure></p><blockquote><p>matchIfMissing = true , 不配置参数也正常</p></blockquote><h6 id="三、-ConditionalOnProperty-应用场景"><a href="#三、-ConditionalOnProperty-应用场景" class="headerlink" title="三、 @ConditionalOnProperty 应用场景"></a>三、 @ConditionalOnProperty 应用场景</h6><ol><li>通过 <code>@ConditionalOnProperty</code> 来控制 <code>Configuration</code> 是否生效</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0-说明&quot;&gt;&lt;a href=&quot;#0-说明&quot; class=&quot;headerlink&quot; title=&quot;0. 说明&quot;&gt;&lt;/a&gt;0. 说明&lt;/h2&gt;&lt;p&gt;环境配置清单&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;java version “1.8.0_161”&lt;br&gt;Java(
      
    
    </summary>
    
      <category term="spring boot" scheme="https://blog.milk4j.com/categories/spring-boot/"/>
    
    
      <category term="spring boot" scheme="https://blog.milk4j.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的一些遗忘点</title>
    <link href="https://blog.milk4j.com/2018/10/31/MySQL%E7%9A%84%E4%B8%80%E4%BA%9B%E9%81%97%E5%BF%98%E7%82%B9/"/>
    <id>https://blog.milk4j.com/2018/10/31/MySQL的一些遗忘点/</id>
    <published>2018-10-31T05:59:00.000Z</published>
    <updated>2018-11-19T10:33:48.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Group-By-和-Order-By-一起使用"><a href="#一、Group-By-和-Order-By-一起使用" class="headerlink" title="一、Group By 和 Order By 一起使用"></a>一、Group By 和 Order By 一起使用</h2><p>order by 的列，必须是出现在group by 子句里的列 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>( <span class="string">`id`</span> ) <span class="keyword">FROM</span> <span class="string">`order`</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="string">`order_code`</span> , <span class="string">`created_at`</span></span><br><span class="line"><span class="comment">-- order by 的列，必须是出现在 group by 子句里的列 </span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`created_at`</span> <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h2 id="二、忘记root密码"><a href="#二、忘记root密码" class="headerlink" title="二、忘记root密码"></a>二、忘记root密码</h2><p>具体步骤如下：</p><ol><li><p>修改MySQL的配置文件（默认为/etc/my.cnf）,在[mysqld]下添加一行skip-grant-tables</p></li><li><p>保存配置文件后，重启MySQL服务 service mysqld restart</p></li><li><p>再次进入MySQL命令行 mysql -uroot -p,输入密码时直接回车，就会进入MySQL数据库了，这个时候按照常规流程修改root密码即可。依次输入：</p><blockquote><p>use mysql;    更改数据库<br>UPDATE user SET authentication_string=password(“passwd”) WHERE USER= ‘root’;  重设密码,注意我用的是5.7.22的数据库密码存储在authentication_string字段, 之前有的版本存储在password字段,具体看情况吧<br>flush privileges;  刷新MySQL的系统权限相关表，以防止更改后拒绝访问；或或者重启MySQL服务器</p></blockquote></li><li>密码修改完毕后，再按照步骤1中的流程，删掉配置文件中的那行，并且重启MySQL服务，新密码就生效了。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Group-By-和-Order-By-一起使用&quot;&gt;&lt;a href=&quot;#一、Group-By-和-Order-By-一起使用&quot; class=&quot;headerlink&quot; title=&quot;一、Group By 和 Order By 一起使用&quot;&gt;&lt;/a&gt;一、Group 
      
    
    </summary>
    
      <category term="mysql" scheme="https://blog.milk4j.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://blog.milk4j.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+H2+Mybatis单元测试整合和坑</title>
    <link href="https://blog.milk4j.com/2018/10/31/SpringBoot+H2+Mybatis%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%95%B4%E5%90%88%E5%92%8C%E5%9D%91/"/>
    <id>https://blog.milk4j.com/2018/10/31/SpringBoot+H2+Mybatis单元测试整合和坑/</id>
    <published>2018-10-31T05:59:00.000Z</published>
    <updated>2018-10-31T08:46:11.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:h2:mem:testdb;MODE=MYSQL;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span> <span class="comment"># 随便填</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span> <span class="comment"># 随便填</span></span><br><span class="line"><span class="attr">    schema:</span> <span class="attr">classpath:db/schema.sql</span> <span class="comment"># 建表SQL语句</span></span><br><span class="line"><span class="attr">    data:</span> <span class="attr">classpath:db/data.sql</span> <span class="comment"># 数据导入SQL语句</span></span><br><span class="line"><span class="attr">    platform:</span> <span class="string">h2</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>然后在<code>src/test/resources</code>文件夹下面新建一个文件夹<code>db</code> ,然后新建 <code>schema.sql</code>和<code>data.sql</code></p><ul><li>schema.sql 文件是建表语句,内容不能为空,否则报错</li><li>data.sql文件是数据导入的SQL语句,内容不能为空,否则报错</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p><strong>一、不支持表级别的Comment</strong></p><p>建表SQL如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`testTable`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">varchar</span>(<span class="number">36</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'序号'</span>,</span><br><span class="line">  <span class="string">`StartArea`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出发区域'</span>,</span><br><span class="line">  <span class="string">`ArrivalArea`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'目的区域'</span>,</span><br><span class="line">  <span class="string">`Updater`</span> <span class="built_in">varchar</span>(<span class="number">36</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新人'</span>,</span><br><span class="line">  <span class="string">`UpdateTime`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span> ,</span><br><span class="line">  <span class="string">`Status`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'是否删除'</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>= <span class="string">'区域路线信息列表'</span> ;</span><br></pre></td></tr></table></figure><p>列名后面的COMMENT是支持的，但是最后面的 <code>ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT= &#39;区域路线信息列表&#39;</code>  中的COMMENT不支持。删掉后面的COMMENT即可。</p><p><strong>二、只支持最普通的引索结构,不支持BTREE引索结构</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`testTable`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">varchar</span>(<span class="number">36</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'序号'</span>,</span><br><span class="line">  <span class="string">`StartArea`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出发区域'</span>,</span><br><span class="line">  <span class="string">`ArrivalArea`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'目的区域'</span>,</span><br><span class="line">  <span class="string">`Updater`</span> <span class="built_in">varchar</span>(<span class="number">36</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新人'</span>,</span><br><span class="line">  <span class="string">`UpdateTime`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span> ,</span><br><span class="line">  <span class="string">`Status`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'是否删除'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>= <span class="string">'区域路线信息列表'</span> ;</span><br></pre></td></tr></table></figure><p>这种情况去掉 <code>USING BTREE</code> ,使用普通的引索就好了</p><p><strong>三、插入语句的单引号中的\’不支持</strong></p><p>有如下SQL，其中一个字段存的里面带有单引号：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`testTable`</span></span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(</span><br><span class="line"><span class="string">'1'</span>,</span><br><span class="line"><span class="string">'部门权限'</span>,</span><br><span class="line"><span class="string">'LoginName=\'&#123;1&#125;\''</span>,</span><br><span class="line"><span class="string">'1'</span>,</span><br><span class="line"><span class="string">'2'</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="string">'2016-05-27 14:30:49'</span>,</span><br><span class="line"><span class="string">'1'</span>,</span><br><span class="line"><span class="string">'1'</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="string">'1'</span> </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>MySQL支持双引号包含字符串，可以把内容中包含的单引号改为双引号，但其他情况可能会涉及到业务调整。另外，不能将包含字符串的单引号改为双引号，H2会把双引号中的内容当做列名处理。</p><p><strong>四、H2 的 UNIQUE KEY是数据库级别的</strong></p><p>H2 的 UNIQUE KEY不是表级别的，MySQL是表级别的，转为H2后容易出现UNIQUE KEY重复。删掉UNIQUE KEY或者修改KEY的名称即可。</p><p><strong>五、无法使用子查询</strong></p><p>目前没有办法解决,尽量避免使用吧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Maven依赖&quot;&gt;&lt;a href=&quot;#Maven依赖&quot; class=&quot;headerlink&quot; title=&quot;Maven依赖&quot;&gt;&lt;/a&gt;Maven依赖&lt;/h2&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
      <category term="spring boot" scheme="https://blog.milk4j.com/categories/spring-boot/"/>
    
    
      <category term="单元测试" scheme="https://blog.milk4j.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="spring boot" scheme="https://blog.milk4j.com/tags/spring-boot/"/>
    
      <category term="h2" scheme="https://blog.milk4j.com/tags/h2/"/>
    
  </entry>
  
  <entry>
    <title>我的ElasticSearch命令简记</title>
    <link href="https://blog.milk4j.com/2018/10/31/%E6%88%91%E7%9A%84ElasticSearch%E5%91%BD%E4%BB%A4%E7%AE%80%E8%AE%B0/"/>
    <id>https://blog.milk4j.com/2018/10/31/我的ElasticSearch命令简记/</id>
    <published>2018-10-31T05:59:00.000Z</published>
    <updated>2018-11-06T11:59:22.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用简单命令"><a href="#常用简单命令" class="headerlink" title="常用简单命令"></a>常用简单命令</h2><h3 id="条件删除数据"><a href="#条件删除数据" class="headerlink" title="条件删除数据"></a>条件删除数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 条件删除</span></span><br><span class="line">curl -XPOST <span class="string">"http://localhost:9200/opt-log-index/opt-log-type/_delete_by_query"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "query": &#123;</span></span><br><span class="line"><span class="string">    "match_all": &#123;&#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="删除index和数据"><a href="#删除index和数据" class="headerlink" title="删除index和数据"></a>删除index和数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE <span class="string">"http://localhost:9200/opt-log-index"</span></span><br></pre></td></tr></table></figure><h3 id="获取-mapping-结构"><a href="#获取-mapping-结构" class="headerlink" title="获取 mapping 结构"></a>获取 mapping 结构</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取所有的index的mapping</span></span><br><span class="line">curl -XGET <span class="string">"http://localhost:9200/_mapping"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定的index的mapping结构</span></span><br><span class="line">curl -XGET <span class="string">"http://localhost:9200/opt-log-index/_mapping"</span></span><br></pre></td></tr></table></figure><h3 id="创建index和mapping"><a href="#创建index和mapping" class="headerlink" title="创建index和mapping"></a>创建index和mapping</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建index和mapping</span></span><br><span class="line">curl -XPUT <span class="string">"http://localhost:9200/opt-log-index"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "settings":&#123;</span></span><br><span class="line"><span class="string">    "analysis":&#123;</span></span><br><span class="line"><span class="string">      "analyzer":&#123;</span></span><br><span class="line"><span class="string">        "ik":&#123;</span></span><br><span class="line"><span class="string">          "tokenizer":"ik_max_word"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  "mappings":&#123;</span></span><br><span class="line"><span class="string">    "opt-log-type":&#123;</span></span><br><span class="line"><span class="string">      "properties":&#123;</span></span><br><span class="line"><span class="string">        "id":&#123;</span></span><br><span class="line"><span class="string">          "type":"keyword"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "operator":&#123;</span></span><br><span class="line"><span class="string">          "type":"keyword"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "role":&#123;</span></span><br><span class="line"><span class="string">          "type":"keyword"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "operatorName":&#123;</span></span><br><span class="line"><span class="string">          "type":"text",</span></span><br><span class="line"><span class="string">          "analyzer":"ik",</span></span><br><span class="line"><span class="string">          "search_analyzer":"ik_max_word"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "remark":&#123;</span></span><br><span class="line"><span class="string">          "type":"keyword"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "operateType":&#123;</span></span><br><span class="line"><span class="string">          "type":"keyword"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "txId":&#123;</span></span><br><span class="line"><span class="string">          "type":"long"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "schemaName":&#123;</span></span><br><span class="line"><span class="string">          "type":"text",</span></span><br><span class="line"><span class="string">          "analyzer":"ik",</span></span><br><span class="line"><span class="string">          "search_analyzer":"ik_max_word"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "tableName":&#123;</span></span><br><span class="line"><span class="string">          "type":"text",</span></span><br><span class="line"><span class="string">          "analyzer":"ik",</span></span><br><span class="line"><span class="string">          "search_analyzer":"ik_max_word"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "afterData":&#123;</span></span><br><span class="line"><span class="string">          "type":"keyword"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "beforeData":&#123;</span></span><br><span class="line"><span class="string">          "type":"keyword"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "changeFields":&#123;</span></span><br><span class="line"><span class="string">          "type":"keyword"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "createdAt":&#123;</span></span><br><span class="line"><span class="string">          "type":"date",</span></span><br><span class="line"><span class="string">          "format":"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "updatedAt":&#123;</span></span><br><span class="line"><span class="string">          "type":"date",</span></span><br><span class="line"><span class="string">          "format":"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h4 id="查询所有数据"><a href="#查询所有数据" class="headerlink" title="查询所有数据"></a>查询所有数据</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">"http://localhost:9200/opt-log-index/opt-log-type/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "from": 0, </span></span><br><span class="line"><span class="string">  "size": 20, </span></span><br><span class="line"><span class="string">  "query": &#123;</span></span><br><span class="line"><span class="string">    "bool": &#123;</span></span><br><span class="line"><span class="string">      "must": [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          "match_all": &#123;&#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  "_source": &#123;</span></span><br><span class="line"><span class="string">    "excludes": [</span></span><br><span class="line"><span class="string">      "beforeData"</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><h4 id="精准匹配"><a href="#精准匹配" class="headerlink" title="精准匹配"></a>精准匹配</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">"http://localhost:9200/opt-log-index/opt-log-type/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "query": &#123;</span></span><br><span class="line"><span class="string">    "bool": &#123;</span></span><br><span class="line"><span class="string">      "must": [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          "term": &#123;</span></span><br><span class="line"><span class="string">            "tableName": "parana_item_detail"</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  "_source": &#123;</span></span><br><span class="line"><span class="string">    "excludes": [</span></span><br><span class="line"><span class="string">      "beforeData","schemaName"</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  "sort": [</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      "createdAt": &#123;</span></span><br><span class="line"><span class="string">        "order": "desc"</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用简单命令&quot;&gt;&lt;a href=&quot;#常用简单命令&quot; class=&quot;headerlink&quot; title=&quot;常用简单命令&quot;&gt;&lt;/a&gt;常用简单命令&lt;/h2&gt;&lt;h3 id=&quot;条件删除数据&quot;&gt;&lt;a href=&quot;#条件删除数据&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="elasticsearch" scheme="https://blog.milk4j.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="https://blog.milk4j.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot Junit单元测试</title>
    <link href="https://blog.milk4j.com/2018/10/31/SpringBoot%20Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://blog.milk4j.com/2018/10/31/SpringBoot Junit单元测试/</id>
    <published>2018-10-31T05:59:00.000Z</published>
    <updated>2018-11-03T08:51:50.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JUnit中的注解"><a href="#一、JUnit中的注解" class="headerlink" title="一、JUnit中的注解"></a>一、JUnit中的注解</h2><ul><li>@BeforeClass：针对所有测试，只执行一次，且必须为static void</li><li>@Before：初始化方法，执行当前测试类的每个测试方法前执行。</li><li>@Test：测试方法，在这里可以测试期望异常和超时时间</li><li>@After：释放资源，执行当前测试类的每个测试方法后执行</li><li>@AfterClass：针对所有测试，只执行一次，且必须为static void</li><li>@Ignore：忽略的测试方法（只在测试类的时候生效，单独执行该测试方法无效）</li><li>@RunWith:可以更改测试运行器 ，缺省值 org.junit.runner.Runner</li></ul><p><strong>一个单元测试类执行顺序为：</strong></p><blockquote><p>@BeforeClass –&gt; @Before –&gt; @Test –&gt; @After –&gt; @AfterClass </p></blockquote><p><strong>每一个测试方法的调用顺序为：</strong></p><blockquote><p>@Before –&gt; @Test –&gt; @After</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、JUnit中的注解&quot;&gt;&lt;a href=&quot;#一、JUnit中的注解&quot; class=&quot;headerlink&quot; title=&quot;一、JUnit中的注解&quot;&gt;&lt;/a&gt;一、JUnit中的注解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;@BeforeClass：针对所有测试，只执行一次，且必
      
    
    </summary>
    
      <category term="spring boot" scheme="https://blog.milk4j.com/categories/spring-boot/"/>
    
    
      <category term="Junit" scheme="https://blog.milk4j.com/tags/Junit/"/>
    
      <category term="单元测试" scheme="https://blog.milk4j.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装nginx</title>
    <link href="https://blog.milk4j.com/2018/10/22/Docker%E5%AE%89%E8%A3%85nginx/"/>
    <id>https://blog.milk4j.com/2018/10/22/Docker安装nginx/</id>
    <published>2018-10-22T04:34:08.000Z</published>
    <updated>2018-10-24T09:53:47.517Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方式一：通过-pull-仓库镜像"><a href="#方式一：通过-pull-仓库镜像" class="headerlink" title="方式一：通过  pull 仓库镜像"></a>方式一：通过  pull 仓库镜像</h3><h4 id="一、下载镜像"><a href="#一、下载镜像" class="headerlink" title="一、下载镜像"></a>一、下载镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><h4 id="二、使用镜像创建容器"><a href="#二、使用镜像创建容器" class="headerlink" title="二、使用镜像创建容器"></a>二、使用镜像创建容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir -p ~/nginx/www ~/nginx/logs ~/nginx/conf</span><br><span class="line"><span class="meta">#</span><span class="bash">www目录将映射为nginx容器配置的虚拟目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash">logs目录将映射为nginx容器的日志目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash">conf目录里的配置文件将映射为nginx容器的配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">找一份默认的 nginx.conf 配置文件放在 conf 目录下,否则下面启动会报错</span></span><br><span class="line">docker run -p 80:80 --name web -v $PWD/www:/www -v  $PWD/logs:/wwwlogs -d nginx</span><br><span class="line">docker cp web:/etc/nginx/nginx.conf </span><br><span class="line"><span class="meta">#</span><span class="bash">删除容器后再运行下面的命令</span></span><br><span class="line">docker run -p 80:80 --name web --link=app1:app1 --link=app2:app2 --link=app3:app3 -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/conf/servers:/etc/nginx/conf.d -v $PWD/logs:/wwwlogs -d nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">此时打开浏览器访问宿主机的 IP 就可看到 nginx 的界面了，安装启动成功</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-d:让容器在后台运行。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-P:将容器内部使用的网络端口映射到我们使用的主机上。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用命令进入交互式终端</span></span><br><span class="line">docker exec -it mynginx /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看 IP</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="meta">#</span><span class="bash">发现找不到指令，需要安装 net-tools 工具依次执行，再执行 ifconfig</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install net-tools</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在宿主机中查询容器的 IP，返回 json 串，里面包含了详细的容器信息，包括 IP ~</span></span><br><span class="line"><span class="meta">#</span><span class="bash">docker inspect [容器名|id]</span></span><br><span class="line">docker inspect mynginx</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li>-p 80:80：将容器的80端口映射到主机的80端口</li><li>–name  web：将容器命名为web</li><li>-v $PWD/www:/www：将主机中当前目录下的www挂载到容器的/www</li><li>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf：将主机中当前目录下的nginx.conf挂载到容器的/etc/nginx/nginx.conf</li><li>-v $PWD/logs:/wwwlogs：将主机中当前目录下的logs挂载到容器的/wwwlogs</li></ul><h3 id="方式二：通过-Dockerfile构建"><a href="#方式二：通过-Dockerfile构建" class="headerlink" title="方式二：通过 Dockerfile构建"></a>方式二：通过 Dockerfile构建</h3><h5 id="构建准备工作"><a href="#构建准备工作" class="headerlink" title="构建准备工作"></a>构建准备工作</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/nginx/www ~/nginx/logs ~/nginx/conf</span><br><span class="line">cd ~/nginx</span><br><span class="line">vi Dockerfile</span><br></pre></td></tr></table></figure><h5 id="在-Dockerfile-中输入如下内容："><a href="#在-Dockerfile-中输入如下内容：" class="headerlink" title="在 Dockerfile 中输入如下内容："></a>在 Dockerfile 中输入如下内容：</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#指定使用那个基础镜像</span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER ginkgo</span><br><span class="line">LABEL Discription="基于centos的nginx镜像" version="1.0"</span><br><span class="line">WORKDIR /usr/local/src</span><br><span class="line">RUN yum install -y wget</span><br><span class="line">RUN wget http://nginx.org/download/nginx-1.8.0.tar.gz</span><br><span class="line">RUN tar -zxvf nginx-1.8.0.tar.gz</span><br><span class="line">WORKDIR nginx-1.8.0</span><br><span class="line">#安装nginx所依赖的包</span><br><span class="line">RUN yum -y install gcc-c++</span><br><span class="line">RUN yum -y install pcre pcre-devel</span><br><span class="line">RUN yum -y install zlib zlib-devel</span><br><span class="line">RUN yum -y install openssl openssl-devel libssl-dev</span><br><span class="line">RUN ./configure</span><br><span class="line">RUN make</span><br><span class="line">RUN make install</span><br><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure><h5 id="通过Dockerfile-构建一个镜像"><a href="#通过Dockerfile-构建一个镜像" class="headerlink" title="通过Dockerfile 构建一个镜像"></a>通过Dockerfile 构建一个镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -t 镜像名 , <span class="string">"."</span> 是Dockerfile 所在的目录，可以使用绝对路径</span></span><br><span class="line">docker build -t ginkgo/nginx .</span><br><span class="line"><span class="meta">#</span><span class="bash">查看镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h5 id="构建-运行容器"><a href="#构建-运行容器" class="headerlink" title="构建|运行容器"></a>构建|运行容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">找一份默认的 nginx.conf 配置文件放在 ~/nginx/conf 目录下,否则下面启动会报错</span></span><br><span class="line">docker run -p 80:80 --name mynginx -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/logs:/wwwlogs -d nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">此时打开浏览器访问宿主机的 IP 就可看到 nginx 的界面了，安装启动成功</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-d:让容器在后台运行。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-P:将容器内部使用的网络端口映射到我们使用的主机上。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用命令进入交互式终端</span></span><br><span class="line">docker exec -it mynginx /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看 IP</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="meta">#</span><span class="bash">发现找不到指令，需要安装 net-tools 工具依次执行，再执行 ifconfig</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install net-tools</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在宿主机中查询容器的 IP，返回 json 串，里面包含了详细的容器信息，包括 IP ~</span></span><br><span class="line">docker inspect [容器名|id]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;方式一：通过-pull-仓库镜像&quot;&gt;&lt;a href=&quot;#方式一：通过-pull-仓库镜像&quot; class=&quot;headerlink&quot; title=&quot;方式一：通过  pull 仓库镜像&quot;&gt;&lt;/a&gt;方式一：通过  pull 仓库镜像&lt;/h3&gt;&lt;h4 id=&quot;一、下载镜像&quot;
      
    
    </summary>
    
      <category term="docker" scheme="https://blog.milk4j.com/categories/docker/"/>
    
    
      <category term="docker" scheme="https://blog.milk4j.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://blog.milk4j.com/2018/10/22/java%E5%BA%94%E7%94%A8jvm%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/"/>
    <id>https://blog.milk4j.com/2018/10/22/java应用jvm参数配置参考/</id>
    <published>2018-10-22T01:48:39.617Z</published>
    <updated>2018-11-25T09:58:47.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java应用jvm配置参考"><a href="#java应用jvm配置参考" class="headerlink" title="java应用jvm配置参考"></a>java应用jvm配置参考</h1><blockquote><p>一切配置在亲身测试之后，才比较靠谱。这里给出我们的经验值，仅供参考。</p></blockquote><h3 id="WEB服务器JVM配置"><a href="#WEB服务器JVM配置" class="headerlink" title="WEB服务器JVM配置"></a>WEB服务器JVM配置</h3><p><strong>容器内存4G</strong><br>java内存：4096m * 0.75 = 3072m</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-server//服务器模式</span><br><span class="line">-Xmx3072m //JVM最大允许分配的堆内存，按需分配</span><br><span class="line">-Xms3072m //JVM初始分配的堆内存，一般和Xmx配置成一样以避免每次gc后JVM重新分配内存。</span><br><span class="line">-XX:NewRatio=1 //表示年轻代与年老代所占比值为1:1 </span><br><span class="line">-XX:+DisableExplicitGC //忽略手动调用GC, System.gc()的调用就会变成一个空调用，完全不触发GC</span><br><span class="line">-XX:+UseConcMarkSweepGC //并发标记清除（CMS）收集器</span><br><span class="line">-XX:+CMSParallelRemarkEnabled //降低标记停顿</span><br><span class="line">-XX:+UseCMSCompactAtFullCollection //在FULL GC的时候对年老代的压缩</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=70 //使用cms作为垃圾回收使用70％后开始CMS收集</span><br></pre></td></tr></table></figure><p><strong>容器内存3G</strong><br>java内存：3072m * 0.7 = 2150m</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-server//服务器模式</span><br><span class="line">-Xmx2150m //JVM最大允许分配的堆内存，按需分配</span><br><span class="line">-Xms2150m //JVM初始分配的堆内存，一般和Xmx配置成一样以避免每次gc后JVM重新分配内存。</span><br><span class="line">-XX:NewRatio=1 //表示年轻代与年老代所占比值为1:1 </span><br><span class="line">-XX:+DisableExplicitGC //忽略手动调用GC, System.gc()的调用就会变成一个空调用，完全不触发GC</span><br><span class="line">-XX:+UseConcMarkSweepGC //并发标记清除（CMS）收集器</span><br><span class="line">-XX:+CMSParallelRemarkEnabled //降低标记停顿</span><br><span class="line">-XX:+UseCMSCompactAtFullCollection //在FULL GC的时候对年老代的压缩</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=70 //使用cms作为垃圾回收使用70％后开始CMS收集</span><br></pre></td></tr></table></figure><p><strong>容器内存2G</strong><br>java内存：2048m * 0.7 = 1434m</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-server//服务器模式</span><br><span class="line">-Xmx1434m //JVM最大允许分配的堆内存，按需分配</span><br><span class="line">-Xms1434m //JVM初始分配的堆内存，一般和Xmx配置成一样以避免每次gc后JVM重新分配内存。</span><br><span class="line">-XX:NewRatio=1 //表示年轻代与年老代所占比值为1:1 </span><br><span class="line">-XX:+DisableExplicitGC //忽略手动调用GC, System.gc()的调用就会变成一个空调用，完全不触发GC</span><br><span class="line">-XX:+UseConcMarkSweepGC //并发标记清除（CMS）收集器</span><br><span class="line">-XX:+CMSParallelRemarkEnabled //降低标记停顿</span><br><span class="line">-XX:+UseCMSCompactAtFullCollection //在FULL GC的时候对年老代的压缩</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=70 //使用cms作为垃圾回收使用70％后开始CMS收集</span><br></pre></td></tr></table></figure><p><strong>容器内存1.5G</strong><br>java内存：1536m * 0.7 = 1075m</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-server//服务器模式</span><br><span class="line">-Xmx1075m //JVM最大允许分配的堆内存，按需分配</span><br><span class="line">-Xms1075m //JVM初始分配的堆内存，一般和Xmx配置成一样以避免每次gc后JVM重新分配内存。</span><br><span class="line">-XX:NewRatio=1 //表示年轻代与年老代所占比值为1:1 </span><br><span class="line">-XX:+DisableExplicitGC //忽略手动调用GC, System.gc()的调用就会变成一个空调用，完全不触发GC</span><br><span class="line">-XX:+UseConcMarkSweepGC //并发标记清除（CMS）收集器</span><br><span class="line">-XX:+CMSParallelRemarkEnabled //降低标记停顿</span><br><span class="line">-XX:+UseCMSCompactAtFullCollection //在FULL GC的时候对年老代的压缩</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=70 //使用cms作为垃圾回收使用70％后开始CMS收集</span><br></pre></td></tr></table></figure><p><strong>容器内存1G</strong><br>java内存：1024m * 0.7 = 717m</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-server//服务器模式</span><br><span class="line">-Xmx717m //JVM最大允许分配的堆内存，按需分配</span><br><span class="line">-Xms717m //JVM初始分配的堆内存，一般和Xmx配置成一样以避免每次gc后JVM重新分配内存。</span><br><span class="line">-XX:NewRatio=1 //表示年轻代与年老代所占比值为1:1 </span><br><span class="line">-XX:+DisableExplicitGC //忽略手动调用GC, System.gc()的调用就会变成一个空调用，完全不触发GC</span><br><span class="line">-XX:+UseConcMarkSweepGC //并发标记清除（CMS）收集器</span><br><span class="line">-XX:+CMSParallelRemarkEnabled //降低标记停顿</span><br><span class="line">-XX:+UseCMSCompactAtFullCollection //在FULL GC的时候对年老代的压缩</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=70 //使用cms作为垃圾回收使用70％后开始CMS收集</span><br></pre></td></tr></table></figure><h3 id="常用参数说明"><a href="#常用参数说明" class="headerlink" title="常用参数说明"></a>常用参数说明</h3><p><strong>参数设置</strong><br>在Java虚拟机的参数中，有3种表示方法：</p><ul><li>标准参数（-），所有的JVM实现都必须实现这些参数的功能，而且向后兼容；</li><li>非标准参数（-X），默认jvm实现这些参数的功能，但是并不保证所有jvm实现都满足，且不保证向后兼容；</li><li>非Stable参数（-XX），此类参数各个jvm实现会有所不同，将来可能会随时取消，需要慎重使用（但是，这些参数往往是非常有用的）；</li></ul><p><strong>常用参数</strong><br>现在的JVM运行Java程序时在高效性和稳定性方面做的非常出色。自适应内存管理、垃圾收集、及时编译、动态类加载、锁优化等使得普通程序员几乎不会case内存相关的事情。但JVM仍然大量的参数，使得我们可以针对不同场景进行不同的配置和调优。</p><p><em>-client</em><br><em>-server</em><br>指定JVM的启动模式是client模式还是server模式，具体就是 Java HotSpot Client(Server) VM 版本。目前64位的JDK启动，一定是server模式，会忽略这个参数。</p><p><em>-Xmn</em><br>设置初始最大的年轻代堆大小。</p><p><em>-Xms</em><br>设置初始的堆大小。</p><p><em>-Xmx</em><br>设置最大的内存分配大小。一般的服务端部署，-Xms和-Xmx设置为同样大小。</p><h3 id="基础回顾"><a href="#基础回顾" class="headerlink" title="基础回顾"></a>基础回顾</h3><p><strong>JVM内存结构</strong><br>当代主流虚拟机（Hotspot VM）的垃圾回收都采用“分代回收”的算法。“分代回收”是基于这样一个事实：对象的生命周期不同，所以针对不同生命周期的对象可以采取不同的回收方式，以便提高回收效率。</p><p>Hotspot VM将内存划分为不同的物理区，就是“分代”思想的体现。如图所示，JVM内存主要由新生代、老年代、永久代构成。</p><ol><li>新生代<br>大多数对象在新生代中被创建，其中很多对象的生命周期很短。每次新生代的垃圾回收（又称Minor GC）后只有少量对象存活，所以选用复制算法，只需要少量的复制成本就可以完成回收。<br>新生代内又分三个区：一个Eden区，两个Survivor区（一般而言），大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到两个Survivor区（中的一个）。当这个Survivor区满时，此区的存活且不满足“晋升”条件的对象将被复制到另外一个Survivor区。<br>对象每经历一次Minor GC，年龄加1，达到“晋升年龄阈值”后，被放到老年代，这个过程也称为“晋升”。</li><li>老年代<br>在新生代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代，该区域中对象存活率高。老年代的垃圾回收（又称Major GC）通常使用“标记-清理”或“标记-整理”算法。整堆包括新生代和老年代的垃圾回收称为Full GC（HotSpot VM里，除了CMS之外，其它能收集老年代的GC都会同时收集整个GC堆，包括新生代）。</li><li>永久代<br>主要存放元数据，例如Class、Method的元信息，与垃圾回收要回收的Java对象关系不大。相对于新生代和年老代来说，该区域的划分对垃圾回收影响比较小。</li></ol><blockquote><p>jdk1.8中, 永久代最终被移除，方法区移至Metaspace，字符串常量移至Java Heap。永久代的垃圾回收主要两部分：废弃常量和无用类。</p></blockquote><p><strong>常见垃圾回收器</strong><br>不同的垃圾回收器，适用于不同的场景。常用的垃圾回收器：</p><ul><li>串行（Serial）回收器是单线程的一个回收器，简单、易实现、效率高。</li><li>并行（ParNew）回收器是Serial的多线程版，可以充分的利用CPU资源，减少回收的时间。</li><li>吞吐量优先（Parallel Scavenge）回收器，侧重于吞吐量的控制。</li><li>并发标记清除（CMS，Concurrent Mark Sweep）回收器是一种以获取最短回收停顿时间为目标的回收器，该回收器是基于“标记-清除”算法实现的。</li></ul><h3 id="实用方法"><a href="#实用方法" class="headerlink" title="实用方法"></a>实用方法</h3><p><strong>jstat</strong><br>jstat可以实时显示本地或远程JVM进程中类装载、内存、垃圾收集、JIT编译等数据（如果要显示远程JVM信息，需要远程主机开启RMI支持）。如果在服务启动时没有指定启动参数-verbose:gc，则可以用jstat实时查看gc情况。</p><p>如图，如我本机RemoteMavenServer的GC情况（后两个参数表示，每隔1秒打印1次）：</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>S0</td><td>第一个Survivor的使用大小</td></tr><tr><td>S1</td><td>第二个Survivor的使用大小</td></tr><tr><td>EU</td><td>伊甸园区的使用大小</td></tr><tr><td>O</td><td>老年代使用大小</td></tr><tr><td>M</td><td>方法区使用大小</td></tr><tr><td>CCS</td><td>压缩类空间使用大小</td></tr><tr><td>YGC</td><td>年轻代垃圾回收次数</td></tr><tr><td>YGCT</td><td>年轻代垃圾回收消耗时间</td></tr><tr><td>FGC</td><td>老年代垃圾回收次数</td></tr><tr><td>FGCT</td><td>老年代垃圾回收消耗时间</td></tr><tr><td>GCT</td><td>垃圾回收消耗总时间</td></tr></tbody></table><p><strong>gc log</strong><br>GC日志是一个很重要的工具，它准确记录了每一次的GC的执行时间和执行结果，通过分析GC日志可以优化堆设置和GC设置，或者改进应用程序的对象分配模式。<br>不同的垃圾收集器，输出的日志格式各不相同，但也有一些相同的特征。熟悉各个常用垃圾收集器的GC日志，是进行JVM调优的必备一步。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-XX:+PrintGCDetails</td><td>打印GC详细信息</td></tr><tr><td>-XX:+PrintGCTimeStamps</td><td>输出GC的时间戳（以基准时间的形式）</td></tr><tr><td>-XX:+PrintGCDateStamps</td><td>输出GC的时间戳（以日期的形式）</td></tr><tr><td>-XX:+PrintHeapAtGC</td><td>在进行GC的前后打印出堆的信息</td></tr><tr><td>-XX:+PrintTenuringDistribution</td><td>在进行GC时打印survivor中的对象年龄分布信息</td></tr><tr><td>-Xloggc:$CATALINA_HOME/logs/gc.log</td><td>指定输出路径收集日志到日志文件</td></tr></tbody></table><p>这里以-XX:+UseConcMarkSweepGC日志为例。<br>-XX:+UseConcMarkSweepGC会指定CMS收集器+ParNew收集器+Serial Old收集器组合，优先使用ParNew收集器+CMS收集器的组合，当出现ConcurrentMode Fail或者Promotion Failed时，则采用ParNew收集器+Serial Old收集器的组合。日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM (25.131-b11) for windows-amd64 JRE (1.8.0_131-b11), built on Mar 15 2017 01:23:53 by &quot;java_re&quot; with MS VC++ 10.0 (VS2010)</span><br><span class="line">Memory: 4k page, physical 8303556k(2846816k free), swap 16215992k(7664596k free)</span><br><span class="line">CommandLine flags: -XX:InitialHeapSize=29360128 -XX:MaxHeapSize=29360128 -XX:MaxNewSize=14680064 -XX:MaxTenuringThreshold=6 -XX:OldPLABSize=16 -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:-UseLargePagesIndividualAllocation -XX:+UseParNewGC </span><br><span class="line">2018-05-09T20:53:14.086+0800: 0.590: [GC (Allocation Failure) 2018-08-09T11:53:14.086+0800: 0.590: [ParNew: 11520K-&gt;1407K(12928K), 0.0034803 secs] 11520K-&gt;2254K(27264K), 0.0039082 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">2018-05-09T20:53:14.247+0800: 0.751: [Full GC (System.gc()) 2018-08-09T11:53:14.247+0800: 0.751: [CMS: 846K-&gt;1930K(14336K), 0.0103698 secs] 7165K-&gt;1930K(27264K), [Metaspace: 5963K-&gt;5963K(1056768K)], 0.0104529 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] </span><br><span class="line">2018-05-09T20:53:14.292+0800: 0.795: [GC (Allocation Failure) 2018-08-09T11:53:14.292+0800: 0.795: [ParNew: 11519K-&gt;1199K(12928K), 0.0085679 secs] 13450K-&gt;3129K(27264K), 0.0086244 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] </span><br><span class="line">2018-05-09T20:53:14.333+0800: 0.836: [GC (Allocation Failure) 2018-08-09T11:53:14.333+0800: 0.836: [ParNew: 12719K-&gt;300K(12928K), 0.0002620 secs] 14649K-&gt;2230K(27264K), 0.0003041 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">2018-05-09T20:53:14.364+0800: 0.867: [GC (Allocation Failure) 2018-08-09T11:53:14.364+0800: 0.867: [ParNew: 11820K-&gt;75K(12928K), 0.0002787 secs] 13750K-&gt;2005K(27264K), 0.0003223 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line"># 并发标记周期开始，根区域扫描</span><br><span class="line">2018-05-09T20:59:47.982+0800: 9.634: [GC concurrent-root-region-scan-start]</span><br><span class="line">2018-05-09T20:59:47.982+0800: 9.652: [GC concurrent-root-region-scan-end, 0.0184308 secs]</span><br><span class="line"># 并发标记</span><br><span class="line">2018-05-09T20:59:47.982+0800: 9.652: [GC concurrent-mark-start]</span><br><span class="line">2018-05-09T20:59:47.982+0800: 9.693: [GC concurrent-mark-end, 0.0406187 secs]</span><br><span class="line"># 重新标记</span><br><span class="line">2018-05-09T20:59:47.982+0800: 9.695: [GC remark 9.695: [Finalize Marking, 0.0005100 secs] 9.695: [GC ref-proc, 0.0003461 secs] 9.696: [Unloading, 0.0069466 secs], 0.0082011 secs]</span><br><span class="line"> [Times: user=0.02 sys=0.00, real=0.01 secs] </span><br><span class="line"># 独占清理</span><br><span class="line">2018-05-09T20:59:47.982+0800: 9.703: [GC cleanup 25M-&gt;21M(1024M), 0.0027119 secs]</span><br><span class="line"> [Times: user=0.00 sys=0.01, real=0.00 secs] </span><br><span class="line"># 并发清理</span><br><span class="line">2018-05-09T20:59:47.982+0800: 9.706: [GC concurrent-cleanup-start]</span><br><span class="line">2018-05-09T20:59:47.982+0800: 9.706: [GC concurrent-cleanup-end, 0.0000167 secs]</span><br><span class="line">2018-05-09T20:54:39.299+0800: 85.803: [Full GC (System.gc()) 2018-08-09T11:54:39.299+0800: 85.803: [CMS: 1930K-&gt;1832K(14336K), 0.0089015 secs] 12748K-&gt;1832K(27264K), [Metaspace: 6035K-&gt;6035K(1056768K)], 0.0089724 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] </span><br><span class="line"></span><br><span class="line">Heap</span><br><span class="line"> par new generation   total 12928K, used 227K [0x00000000fe400000, 0x00000000ff200000, 0x00000000ff200000)</span><br><span class="line">  eden space 11520K,   1% used [0x00000000fe400000, 0x00000000fe438cd8, 0x00000000fef40000)</span><br><span class="line">  from space 1408K,   0% used [0x00000000fef40000, 0x00000000fef40000, 0x00000000ff0a0000)</span><br><span class="line">  to   space 1408K,   0% used [0x00000000ff0a0000, 0x00000000ff0a0000, 0x00000000ff200000)</span><br><span class="line"> concurrent mark-sweep generation total 14336K, used 1832K [0x00000000ff200000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line"> Metaspace       used 6045K, capacity 6252K, committed 6400K, reserved 1056768K</span><br><span class="line">  class space    used 691K, capacity 761K, committed 768K, reserved 1048576K</span><br></pre></td></tr></table></figure><p>第三行把当前使用的JVM参数打印出来，其中，-XX:MaxTenuringThreshold=6是指对象从新生代晋升到老年代需要对象年龄达到6岁，即经过6次GC。</p><p>第四行是新生代Young区的GC，首先是GC发生的时间。然后是GC发生的原因GC (Allocation Failure)，对象分配失败。[ParNew: 11520K-&gt;1407K(12928K), 0.0034803 secs]表示新生代回收前是11520K，回收后是1407K，新生代总大小12928K，回收耗时0.0034803 secs。11520K-&gt;2254K(27264K), 0.0039082 secs表示回收前堆大小11520K，回收后堆大小2254K，堆的总大小27264K。</p><p>第五行是老年代Old区的GC，首先是GC发生的时间。然后是GC发生的原因System.gc()，由于代码调用。[CMS: 846K-&gt;1930K(14336K), 0.0103698 secs]表示回收前老年代是846K，回收后1930K，老年代总大小14336K，回收耗时0.0103698 secs。7165K-&gt;1930K(27264K)表示回收前堆大小7165K，回收后堆大小1930K，堆的总大小27264K。</p><p>后面有一次并发标记周期，设置参数-XX:InitiatingHeapOccupancyPercent的值，可以指定堆占有率达到百分之多少时，触发并发标记，默认值是45%。</p><p>最后打印出了堆的整体使用情况，分为新生代、老年代、元空间。</p><h3 id="调优方法"><a href="#调优方法" class="headerlink" title="调优方法"></a>调优方法</h3><p><strong>请记住下面的原则：</strong></p><ol><li>多数的Java应用不需要在服务器上进行GC优化；</li><li>多数导致GC问题的Java应用，都不是因为我们参数设置错误，而是代码问题；</li><li>在应用上线之前，先考虑将机器的JVM参数设置到最优（最适合）；</li><li>减少创建对象的数量；</li><li>减少使用全局变量和大对象；</li><li>GC优化是到最后不得已才采用的手段；</li></ol><blockquote><p>在实际使用中，分析GC情况优化代码比优化GC参数要多得多。</p></blockquote><p><strong>GC优化的目的有两个：</strong></p><ol><li>将转移到老年代的对象数量降低到最小；</li><li>减少full GC的执行时间；</li></ol><p><strong>为了达到上面的目的，一般地，你需要做的事情有：</strong></p><ol><li>减少使用全局变量和大对象；</li><li>调整新生代的大小到最合适；</li><li>设置老年代的大小为最合适；</li><li>选择合适的GC收集器；</li></ol><p><strong>进行监控和调优的一般步骤：</strong></p><ol><li>监控GC的状态<br>使用各种JVM工具，查看当前日志，分析当前JVM参数设置，并且分析当前堆内存快照和gc日志，根据实际的各区域内存划分和GC执行时间，觉得是否进行优化；</li><li>分析结果，判断是否需要优化<br>如果各项参数设置合理，系统没有超时日志出现，GC频率不高，GC耗时不高，那么没有必要进行GC优化；如果GC时间超过1-3秒，或者频繁GC，则必须优化；</li></ol><blockquote><p>注：如果满足下面的指标，则一般不需要进行GC调优：</p><p>Minor GC执行时间不到50ms；<br>Minor GC执行不频繁，约10秒一次；<br>Full GC执行时间不到1s；<br>Full GC执行频率不算频繁，不低于10分钟1次；</p></blockquote><ol><li>调整GC类型和内存分配<br>如果内存分配过大或过小，或者采用的GC收集器比较慢，则应该优先调整这些参数，并且先找1台或几台机器进行beta，然后比较优化过的机器和没有优化的机器的性能对比，并有针对性的做出最后选择；</li><li>不断的分析和调整<br>通过不断的试验和试错，分析并找到最合适的参数</li><li>全面应用参数<br>如果找到了最合适的参数，则将这些参数应用到所有服务器，并进行后续跟踪。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java应用jvm配置参考&quot;&gt;&lt;a href=&quot;#java应用jvm配置参考&quot; class=&quot;headerlink&quot; title=&quot;java应用jvm配置参考&quot;&gt;&lt;/a&gt;java应用jvm配置参考&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一切配置在亲身测试之后，才
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kotlin在IntelliJ Idea中无法生成 spring-configuration-metadata.json 文件</title>
    <link href="https://blog.milk4j.com/2018/09/05/%E7%94%A8Kotlin%E5%9C%A8IntelliJ-Idea%E4%B8%AD%E6%97%A0%E6%B3%95%E7%94%9F%E6%88%90-spring-configuration-metadata-json-%E6%96%87%E4%BB%B6/"/>
    <id>https://blog.milk4j.com/2018/09/05/用Kotlin在IntelliJ-Idea中无法生成-spring-configuration-metadata-json-文件/</id>
    <published>2018-09-05T11:12:09.000Z</published>
    <updated>2018-10-31T01:32:08.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在百度搜索关键词,搜索到了 Stack Overflow 有相关问题</p><blockquote><p>spring-configuration-metadata.json file is not generated in IntelliJ Idea for Kotlin @ConfigurationProperties class</p></blockquote><p>原文链接: </p><blockquote><p><a href="https://stackoverflow.com/questions/37858833/spring-configuration-metadata-json-file-is-not-generated-in-intellij-idea-for-ko" target="_blank" rel="noopener">https://stackoverflow.com/questions/37858833/spring-configuration-metadata-json-file-is-not-generated-in-intellij-idea-for-ko</a></p></blockquote><p>按照里面的方法试了一下,失败了,然后继续百度,在spring-boot的官方文档中找到了相关线索, 直达链接:</p><blockquote><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-kotlin.html#boot-features-kotlin-configuration-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-kotlin.html#boot-features-kotlin-configuration-properties</a></p></blockquote><p>在spring官方文档中找到了kotlin的官方示例,链接地址:</p><blockquote><p><a href="https://kotlinlang.org/docs/reference/kapt.html#using-in-maven" target="_blank" rel="noopener">https://kotlinlang.org/docs/reference/kapt.html#using-in-maven</a></p></blockquote><p>下面是我参考上面的文档所得出来的可用方案</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="一、添加插件"><a href="#一、添加插件" class="headerlink" title="一、添加插件"></a>一、添加插件</h2><p>在<strong>pom</strong>文件中添加插件,没有写版本号是因为项目继承了<code>spring-boot-starter-parent</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">proc</span>&gt;</span>none<span class="tag">&lt;/<span class="name">proc</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Replacing default-compile as it is treated specially by maven --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>none<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Replacing default-testCompile as it is treated specially by maven --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-testCompile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>none<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>java-compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>java-test-compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kotlin-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jetbrains.kotlin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">args</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-Xjsr305=strict<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">args</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">compilerPlugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">compilerPlugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jvmTarget</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">jvmTarget</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>kapt<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>kapt<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sourceDirs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">sourceDir</span>&gt;</span>src/main/kotlin<span class="tag">&lt;/<span class="name">sourceDir</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">sourceDir</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">sourceDir</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">sourceDirs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- Specify your annotation processors here. --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">annotationProcessorPath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">annotationProcessorPath</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jetbrains.kotlin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kotlin-maven-allopen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、使用插件生成"><a href="#二、使用插件生成" class="headerlink" title="二、使用插件生成"></a>二、使用插件生成</h2><p>我之前也是使用了同样的插件,但是始终生成不出来文件,直到看了kotlin官方文档我才发现有这么一句话</p><p><img src="https://oscimg.oschina.net/oscnet/32fe5bfc75b9a2618f9da47c91e0873bb16.jpg" alt="img"></p><p>文字的意思是: </p><p><strong>“请注意，kapt仍然不支持IntelliJ IDEA自己的构建系统。当你想要重新运行注释处理器时，可以从“Maven Projects”工具栏启动构建。”</strong></p><p><strong>很是坑爹啊,你也不标红也不加粗是想怎样啊</strong></p><p>好了,那就按照他说的做吧, 双击下面的插件按钮就可以生产<code>spring-configuration-metadata.json</code>文件了</p><p><img src="https://oscimg.oschina.net/oscnet/3622930814489ff201bd0db85aa89873930.jpg" alt="img"></p><p><strong>参考文档:</strong></p><blockquote><p><a href="https://stackoverflow.com/questions/37858833/spring-configuration-metadata-json-file-is-not-generated-in-intellij-idea-for-ko" target="_blank" rel="noopener">https://stackoverflow.com/questions/37858833/spring-configuration-metadata-json-file-is-not-generated-in-intellij-idea-for-ko</a></p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-kotlin.html#boot-features-kotlin-configuration-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-kotlin.html#boot-features-kotlin-configuration-properties</a></p><p>&lt;<a href="https://kotlinlang.org/docs/reference/kapt.html" target="_blank" rel="noopener">https://kotlinlang.org/docs/reference/kapt.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;在百度搜索关键词,搜索到了 Stack Overflow 有相关问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;spring-
      
    
    </summary>
    
      <category term="kotlin" scheme="https://blog.milk4j.com/categories/kotlin/"/>
    
    
      <category term="kotlin" scheme="https://blog.milk4j.com/tags/kotlin/"/>
    
      <category term="spring boot" scheme="https://blog.milk4j.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Docker基本使用</title>
    <link href="https://blog.milk4j.com/2018/06/22/Docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.milk4j.com/2018/06/22/Docker基本使用/</id>
    <published>2018-06-22T03:26:02.000Z</published>
    <updated>2018-10-22T11:13:20.539Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-docker使用"><a href="#一-docker使用" class="headerlink" title="一. docker使用"></a>一. docker使用</h4><h5 id="1-docker-ps-查看运行中的容器"><a href="#1-docker-ps-查看运行中的容器" class="headerlink" title="1. docker ps 查看运行中的容器"></a>1. docker ps 查看运行中的容器</h5><h5 id="2-docker-images-查看docker镜像"><a href="#2-docker-images-查看docker镜像" class="headerlink" title="2. docker images 查看docker镜像"></a>2. docker images 查看docker镜像</h5><h5 id="3-docker-rm-id-容器id-删除容器（容器id可以通过docker-ps查看，容器必须停止后才能删除）"><a href="#3-docker-rm-id-容器id-删除容器（容器id可以通过docker-ps查看，容器必须停止后才能删除）" class="headerlink" title="3. docker rm id(容器id)  删除容器（容器id可以通过docker ps查看，容器必须停止后才能删除）"></a>3. docker rm id(容器id)  删除容器（容器id可以通过docker ps查看，容器必须停止后才能删除）</h5><h6 id="3-1-删除全部的容器-docker-rm-docker-ps-a-q"><a href="#3-1-删除全部的容器-docker-rm-docker-ps-a-q" class="headerlink" title="3.1 删除全部的容器 docker rm docker ps -a -q"></a>3.1 删除全部的容器 docker rm <code>docker ps -a -q</code></h6><h5 id="4-docker-stop-id-容器id-停止容器运行"><a href="#4-docker-stop-id-容器id-停止容器运行" class="headerlink" title="4. docker stop  id(容器id) 停止容器运行"></a>4. docker stop  id(容器id) 停止容器运行</h5><h5 id="5-docker-rmi-id-镜像id-删除镜像"><a href="#5-docker-rmi-id-镜像id-删除镜像" class="headerlink" title="5. docker rmi  id(镜像id) 删除镜像"></a>5. docker rmi  id(镜像id) 删除镜像</h5><h5 id="6-docker-pull-ubuntu-16-04-镜像名称-版本号-下载镜像"><a href="#6-docker-pull-ubuntu-16-04-镜像名称-版本号-下载镜像" class="headerlink" title="6. docker pull ubuntu:16.04(镜像名称:版本号) 下载镜像"></a>6. docker pull ubuntu:16.04(镜像名称:版本号) 下载镜像</h5><h5 id="7-docker-run-it-ubuntu-16-04-创建并运行容器容器"><a href="#7-docker-run-it-ubuntu-16-04-创建并运行容器容器" class="headerlink" title="7. docker run -it ubuntu:16.04 创建并运行容器容器"></a>7. docker run -it ubuntu:16.04 创建并运行容器容器</h5><p>　　　　-t 表示在新容器内指定一个伪终端或终端</p><p>　　　　-i 表示允许我们对容器内的 (STDIN) 进行交互</p><p>　　　　-p 指定映射端口</p><p>　　　　-d 在后台运行容器并打印容器ID</p><h6 id="7-1-docker-run-dit-ubuntu-16-04-创建并后台运行容器"><a href="#7-1-docker-run-dit-ubuntu-16-04-创建并后台运行容器" class="headerlink" title="7.1 docker run -dit ubuntu:16.04 创建并后台运行容器"></a>7.1 docker run -dit ubuntu:16.04 创建并后台运行容器</h6><h6 id="7-2-docker-run-ditp-8080-8080（主机端口-容器端口）-ubuntu-16-04-创建并后台运行容器且映射容器的端口"><a href="#7-2-docker-run-ditp-8080-8080（主机端口-容器端口）-ubuntu-16-04-创建并后台运行容器且映射容器的端口" class="headerlink" title="7.2 docker run -ditp 8080:8080（主机端口:容器端口） ubuntu:16.04 创建并后台运行容器且映射容器的端口"></a>7.2 docker run -ditp 8080:8080（主机端口:容器端口） ubuntu:16.04 创建并后台运行容器且映射容器的端口</h6><h5 id="8-docker-attach-id-容器id-进入正在运行中的容器环境"><a href="#8-docker-attach-id-容器id-进入正在运行中的容器环境" class="headerlink" title="8. docker attach id(容器id) 进入正在运行中的容器环境"></a>8. docker attach id(容器id) 进入正在运行中的容器环境</h5><h5 id="9-退出容器"><a href="#9-退出容器" class="headerlink" title="9. 退出容器"></a>9. 退出容器</h5><h6 id="9-1-exit-直接退出容器并终止容器运行"><a href="#9-1-exit-直接退出容器并终止容器运行" class="headerlink" title="9.1 exit 直接退出容器并终止容器运行"></a>9.1 exit 直接退出容器并终止容器运行</h6><h6 id="9-2-ctrl-p-ctrl-q-（快捷键）-退出容器，但是不会终止容器运行"><a href="#9-2-ctrl-p-ctrl-q-（快捷键）-退出容器，但是不会终止容器运行" class="headerlink" title="9.2 [ctrl+p]+[ctrl+q]（快捷键） 退出容器，但是不会终止容器运行"></a>9.2 [ctrl+p]+[ctrl+q]（快捷键） 退出容器，但是不会终止容器运行</h6><h5 id="10-docker-commit-m’版本标识’-id-容器id-ubuntu-16-04-镜像与版本号-提交镜像且生成镜像（可以通过该命令把搭建好的容器打包成一个新的镜像或者覆盖原镜像（即是修改原镜像内容，生成的镜像名与版本号相同就可以直接覆盖））"><a href="#10-docker-commit-m’版本标识’-id-容器id-ubuntu-16-04-镜像与版本号-提交镜像且生成镜像（可以通过该命令把搭建好的容器打包成一个新的镜像或者覆盖原镜像（即是修改原镜像内容，生成的镜像名与版本号相同就可以直接覆盖））" class="headerlink" title="10. docker commit -m’版本标识’ id(容器id) ubuntu:16.04(镜像与版本号)   提交镜像且生成镜像（可以通过该命令把搭建好的容器打包成一个新的镜像或者覆盖原镜像（即是修改原镜像内容，生成的镜像名与版本号相同就可以直接覆盖））"></a>10. docker commit -m’版本标识’ id(容器id) ubuntu:16.04(镜像与版本号)   提交镜像且生成镜像（可以通过该命令把搭建好的容器打包成一个新的镜像或者覆盖原镜像（即是修改原镜像内容，生成的镜像名与版本号相同就可以直接覆盖））</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一-docker使用&quot;&gt;&lt;a href=&quot;#一-docker使用&quot; class=&quot;headerlink&quot; title=&quot;一. docker使用&quot;&gt;&lt;/a&gt;一. docker使用&lt;/h4&gt;&lt;h5 id=&quot;1-docker-ps-查看运行中的容器&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="docker" scheme="https://blog.milk4j.com/categories/docker/"/>
    
    
      <category term="docker" scheme="https://blog.milk4j.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch Rest 客户端使用(长文,待续...)</title>
    <link href="https://blog.milk4j.com/2018/06/20/ElasticSearch-Rest-%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.milk4j.com/2018/06/20/ElasticSearch-Rest-客户端使用/</id>
    <published>2018-06-20T12:36:39.000Z</published>
    <updated>2018-10-31T01:38:12.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>阅读文档须知,文档基于<code>Elasticsearch 6.x</code>,阅读要求,熟悉 <code>ElasticSearch</code> 的语法</p><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>高级客户端要求最低的 <code>java</code> 版本是1.8 ，它依赖 <code>Elasticsearch</code> 的核心工程，客户端的版本应该和 <code>Elasticsearch</code> 的版本保持一致，高级客户端和 <code>TransportClient</code>【TCP 连接客户端】 接受一样的请求参数，并且返回一样的响应结果，如果你想从 <code>TransportClient</code> 客户端迁移到 <code>REST</code> 客户端，请参考<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/6.3/java-rest-high-level-migration.html" target="_blank" rel="noopener">迁移手册</a></p><p>高级客户端保证能够与运行在相同主要版本和更高版本上的<code>Elasticsearch</code>节点进行通信。它不需要与通信的<code>Elasticsearch</code>节点处于相同的版本，因为它是向前兼容的，这意味着它支持与更高版本的<code>Elasticsearch</code>进行通信，而不是与其开发的版本进行通信。</p><p>6.0 客户端能够与任何6.x版本的 <code>Elasticsearch</code>节点通信，而6.1客户端肯定能够与6.1,6.2和任何更高版本的6.x版本通信，但在与老版的<code>Elasticsearch</code>节点通信时可能存在不兼容问题版本，例如6.1和6.0，6.1客户端为一些 <code>api</code> 添加了新的请求体字段支持，然而6.0节点却不支持。</p><p>建议在将<code>Elasticsearch</code>集群升级到新的主版本时升级高级客户端，因为<code>REST API</code>中断更改可能会导致意外结果，具体取决于请求所针对的节点，并且新添加的API仅支持新版本的客户端。一旦集群中的所有节点都升级到新的主版本，客户端应保持同步更新。</p><h3 id="Java-api-文档"><a href="#Java-api-文档" class="headerlink" title="Java api 文档"></a>Java api 文档</h3><p><a href="https://artifacts.elastic.co/javadoc/org/elasticsearch/client/elasticsearch-rest-high-level-client/6.3.1/index.html" target="_blank" rel="noopener">文档地址</a>：<code>&lt;https://artifacts.elastic.co/javadoc/org/elasticsearch/client/elasticsearch-rest-high-level-client/6.3.1/index.html&gt;</code></p><h3 id="maven-仓库"><a href="#maven-仓库" class="headerlink" title="maven 仓库"></a>maven 仓库</h3><p>高级Java REST客户端托管在 <a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.elasticsearch.client%22" target="_blank" rel="noopener">Maven Central上</a>。所需的最低Java版本是<code>1.8</code>。</p><p>高级REST客户端与Elasticsearch具有相同的发布周期。将版本替换为所需的客户端版本。</p><p>如果您正在寻找SNAPSHOT版本，可以通过<a href="https://snapshots.elastic.co/maven/" target="_blank" rel="noopener">https://snapshots.elastic.co/maven/</a>获取Elastic Maven Snapshot存储库。</p><h4 id="Maven-配置"><a href="#Maven-配置" class="headerlink" title="Maven 配置"></a>Maven 配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Gradel-配置"><a href="#Gradel-配置" class="headerlink" title="Gradel 配置"></a>Gradel 配置</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'org.elasticsearch.client:elasticsearch-rest-high-level-client:6.3.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>高级客户端依赖下面的组件及其传递依赖性：</p><ul><li>org.elasticsearch.client:elasticsearch-rest-client</li><li>org.elasticsearch:elasticsearch</li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>一个<code>RestHighLevelClient</code>实例需要一个<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/6.3/java-rest-low-usage-initialization.html" target="_blank" rel="noopener">低级客户端的Builder</a> 来构建如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">        RestClient.builder(</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9200</span>, <span class="string">"http"</span>),</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9201</span>, <span class="string">"http"</span>)));</span><br></pre></td></tr></table></figure><p>高级客户端将在内部创建用于执行请求的低级客户端，低级客户端基于框架提供的<code>builder</code>，并管理其生命周期。</p><p>高级客户端实例应该在不再需要时关闭，以便正确释放它使用的所有资源，以及底层的http客户端实例及其线程。这可以通过<code>close</code> 方法完成，该方法将关闭内部<code>RestClient</code>实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.close();</span><br></pre></td></tr></table></figure><h2 id="Document-API"><a href="#Document-API" class="headerlink" title="Document API"></a>Document API</h2><p>Java高级REST客户端支持以下文档API：</p><p>单文档API：</p><ul><li>index api - 索引API</li><li>get api - 获取API</li><li>delete api - 删除API</li><li>update api - 更新API</li></ul><p>多文档API</p><ul><li>bulk api - 批量操作 api</li><li>Multi-Get API - 批量获取 api</li></ul><h3 id="Index-API"><a href="#Index-API" class="headerlink" title="Index API"></a>Index API</h3><h4 id="Index-请求体"><a href="#Index-请求体" class="headerlink" title="Index 请求体"></a>Index 请求体</h4><p>一个引索请求需要下面的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IndexRequest request = <span class="keyword">new</span> IndexRequest(</span><br><span class="line">        <span class="string">"posts"</span>, <span class="comment">//index 名</span></span><br><span class="line">        <span class="string">"doc"</span>,  <span class="comment">//type 名</span></span><br><span class="line">        <span class="string">"1"</span>);   <span class="comment">//文档 ID</span></span><br><span class="line">String jsonString = <span class="string">"&#123;"</span> +</span><br><span class="line">        <span class="string">"\"user\":\"kimchy\","</span> +</span><br><span class="line">        <span class="string">"\"postDate\":\"2013-01-30\","</span> +</span><br><span class="line">        <span class="string">"\"message\":\"trying out Elasticsearch\""</span> +</span><br><span class="line">        <span class="string">"&#125;"</span>;</span><br><span class="line">request.source(jsonString, XContentType.JSON);<span class="comment">//设置 string 类型的文档source</span></span><br></pre></td></tr></table></figure><h4 id="构建文档-source-的方式"><a href="#构建文档-source-的方式" class="headerlink" title="构建文档 source 的方式"></a>构建文档 source 的方式</h4><p>除了<code>String</code>上面显示的示例之外，还可以以不同方式提供文档源 ：</p><p>方式一：以 <code>Map</code> 的方式提供的文档源，<code>Map</code>自动转换为<code>JSON</code>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; jsonMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">jsonMap.put(<span class="string">"user"</span>, <span class="string">"kimchy"</span>);</span><br><span class="line">jsonMap.put(<span class="string">"postDate"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">jsonMap.put(<span class="string">"message"</span>, <span class="string">"trying out Elasticsearch"</span>);</span><br><span class="line">IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .source(jsonMap);</span><br></pre></td></tr></table></figure><p>方式二：以<code>XContentBuilder</code>对象方式提供，<code>Elasticsearch</code>内置了<code>helper</code>生成<code>JSON</code>内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">XContentBuilder builder = XContentFactory.jsonBuilder();</span><br><span class="line">builder.startObject();</span><br><span class="line">&#123;</span><br><span class="line">    builder.field(<span class="string">"user"</span>, <span class="string">"kimchy"</span>);</span><br><span class="line">    builder.timeField(<span class="string">"postDate"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    builder.field(<span class="string">"message"</span>, <span class="string">"trying out Elasticsearch"</span>);</span><br><span class="line">&#125;</span><br><span class="line">builder.endObject();</span><br><span class="line">IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .source(builder);</span><br></pre></td></tr></table></figure><p>方式三：以键值对方式提供，转换为<code>JSON</code>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .source(<span class="string">"user"</span>, <span class="string">"kimchy"</span>,</span><br><span class="line">                <span class="string">"postDate"</span>, <span class="keyword">new</span> Date(),</span><br><span class="line">                <span class="string">"message"</span>, <span class="string">"trying out Elasticsearch"</span>);</span><br></pre></td></tr></table></figure><h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h4><p>可以选择以下参数：</p><ul><li>设置路由</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.routing(<span class="string">"routing"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置父文档</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.parent(<span class="string">"parent"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置超时时间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>));</span><br><span class="line">request.timeout(<span class="string">"1s"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置刷新策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.setRefreshPolicy(WriteRequest.RefreshPolicy.WAIT_UNTIL);</span><br><span class="line">request.setRefreshPolicy(<span class="string">"wait_for"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置版本</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.version(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li>设置版本类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.versionType(VersionType.EXTERNAL);</span><br></pre></td></tr></table></figure><ul><li>设置文档操作类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.opType(DocWriteRequest.OpType.CREATE); </span><br><span class="line">request.opType(<span class="string">"create"</span>);</span><br></pre></td></tr></table></figure><ul><li>文档执行之前，设置 <code>pipeline</code> 名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setPipeline(&quot;pipeline&quot;);</span><br></pre></td></tr></table></figure><h4 id="同步执行方式"><a href="#同步执行方式" class="headerlink" title="同步执行方式"></a>同步执行方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IndexResponse indexResponse = client.index(request);</span><br></pre></td></tr></table></figure><h4 id="异步执行方式"><a href="#异步执行方式" class="headerlink" title="异步执行方式"></a>异步执行方式</h4><p>索引请求的异步执行需要将<code>IndexRequest</code> 实例和<code>ActionListener</code>实例都传递给异步方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ActionListener&lt;IndexResponse&gt; listener = <span class="keyword">new</span> ActionListener&lt;IndexResponse&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(IndexResponse indexResponse)</span> </span>&#123;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">IndexResponse indexResponse = client.index(request);</span><br></pre></td></tr></table></figure><p>异步方法不会阻塞并立即返回。一旦完成，如果执行成功，则使用该方法<code>ActionListener</code>回调<code>onResponse</code>，如果失败则回调<code>onFailure</code>方法。</p><h4 id="引索响应结果"><a href="#引索响应结果" class="headerlink" title="引索响应结果"></a>引索响应结果</h4><p>返回的<code>IndexResponse</code>包含了有关已执行操作的信息，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">String index = indexResponse.getIndex();</span><br><span class="line">String type = indexResponse.getType();</span><br><span class="line">String id = indexResponse.getId();</span><br><span class="line"><span class="keyword">long</span> version = indexResponse.getVersion();</span><br><span class="line"><span class="keyword">if</span> (indexResponse.getResult() == DocWriteResponse.Result.CREATED) &#123;</span><br><span class="line">    <span class="comment">//创建文档操作</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (indexResponse.getResult() == DocWriteResponse.Result.UPDATED) &#123;</span><br><span class="line">    <span class="comment">//更新文档操作</span></span><br><span class="line">&#125;</span><br><span class="line">ReplicationResponse.ShardInfo shardInfo = indexResponse.getShardInfo();</span><br><span class="line"><span class="keyword">if</span> (shardInfo.getTotal() != shardInfo.getSuccessful()) &#123;</span><br><span class="line">    <span class="comment">//处理成功分片数小于总分片数的情况</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (shardInfo.getFailed() &gt; <span class="number">0</span>) &#123;<span class="comment">//理潜在的失败情况</span></span><br><span class="line">    <span class="keyword">for</span> (ReplicationResponse.ShardInfo.Failure failure : shardInfo.getFailures()) &#123;</span><br><span class="line">        String reason = failure.reason(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在文档版本冲突，则会抛出<code>ElasticsearchException</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .source(<span class="string">"field"</span>, <span class="string">"value"</span>)</span><br><span class="line">        .version(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    IndexResponse response = client.index(request);</span><br><span class="line">&#125; <span class="keyword">catch</span>(ElasticsearchException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.status() == RestStatus.CONFLICT) &#123;</span><br><span class="line">        <span class="comment">//引发的异常表示返回了版本冲突错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果已存在具有相同索引，类型和ID的文档，<code>opType</code>设置为<code>create</code>也会发生冲突：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .source(<span class="string">"field"</span>, <span class="string">"value"</span>)</span><br><span class="line">        .opType(DocWriteRequest.OpType.CREATE);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    IndexResponse response = client.index(request);</span><br><span class="line">&#125; <span class="keyword">catch</span>(ElasticsearchException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.status() == RestStatus.CONFLICT) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Get-API"><a href="#Get-API" class="headerlink" title="Get API"></a>Get API</h3><h4 id="Get-请求体"><a href="#Get-请求体" class="headerlink" title="Get 请求体"></a>Get 请求体</h4><p>构建 GetRequest 的参数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">"posts"</span>,<span class="string">"doc"</span>,<span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><h4 id="可选参数-1"><a href="#可选参数-1" class="headerlink" title="可选参数"></a>可选参数</h4><ul><li>设置返回响应不包含任何字段，默认情况下返回响应包含该所有字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.fetchSourceContext(FetchSourceContext.DO_NOT_FETCH_SOURCE);</span><br></pre></td></tr></table></figure><ul><li>配置返回响应包含哪些字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String[] includes = <span class="keyword">new</span> String[]&#123;<span class="string">"message"</span>, <span class="string">"*Date"</span>&#125;;</span><br><span class="line">String[] excludes = Strings.EMPTY_ARRAY;</span><br><span class="line">FetchSourceContext fetchSourceContext =</span><br><span class="line">        <span class="keyword">new</span> FetchSourceContext(<span class="keyword">true</span>, includes, excludes);</span><br><span class="line">request.fetchSourceContext(fetchSourceContext);</span><br></pre></td></tr></table></figure><ul><li>设置返回响应不包含哪些字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String[] includes = Strings.EMPTY_ARRAY;</span><br><span class="line">String[] excludes = <span class="keyword">new</span> String[]&#123;<span class="string">"message"</span>&#125;;</span><br><span class="line">FetchSourceContext fetchSourceContext =</span><br><span class="line">        <span class="keyword">new</span> FetchSourceContext(<span class="keyword">true</span>, includes, excludes);</span><br><span class="line">request.fetchSourceContext(fetchSourceContext);</span><br></pre></td></tr></table></figure><ul><li>设置检索哪些存储字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.storedFields(<span class="string">"message"</span>); <span class="comment">//为特定存储字段配置检索 (要求在映射中单独存储字段)</span></span><br><span class="line">GetResponse getResponse = client.get(request);</span><br><span class="line">String message = getResponse.getField(<span class="string">"message"</span>).getValue();<span class="comment">//获取message存储的值 (要求将字段单独存储在映射中)</span></span><br></pre></td></tr></table></figure><ul><li>设置路由</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.routing(<span class="string">"routing"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置父文档</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.parent(<span class="string">"parent"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置偏好</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.preference(<span class="string">"preference"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置实时标识，默认 <code>true</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.realtime(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><ul><li>设置每次获取文档之前是否执行刷新操作，默认 <code>false</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.refresh(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><ul><li>设置版本号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.version(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li>设置版本类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.versionType(VersionType.EXTERNAL);</span><br></pre></td></tr></table></figure><h4 id="同步执行"><a href="#同步执行" class="headerlink" title="同步执行"></a>同步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetResponse getResponse = client.get(getRequest);</span><br></pre></td></tr></table></figure><h4 id="异步执行"><a href="#异步执行" class="headerlink" title="异步执行"></a>异步执行</h4><p><code>get</code>请求的异步执行需要将GetRequest 实例和ActionListener实例都传递给异步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ActionListener&lt;GetResponse&gt; listener = <span class="keyword">new</span> ActionListener&lt;GetResponse&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(GetResponse getResponse)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">GetResponse getResponse = client.get(getRequest);</span><br></pre></td></tr></table></figure><p>异步方法不会阻塞并立即返回。一旦完成，如果执行成功，则使用该方法<code>ActionListener</code>回调<code>onResponse</code>，如果失败则回调<code>onFailure</code>方法。</p><h4 id="响应结果"><a href="#响应结果" class="headerlink" title="响应结果"></a>响应结果</h4><p>返回的<code>IndexResponse</code>包含了有关已执行操作的信息，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String index = getResponse.getIndex();</span><br><span class="line">String type = getResponse.getType();</span><br><span class="line">String id = getResponse.getId();</span><br><span class="line"><span class="keyword">if</span> (getResponse.isExists()) &#123;</span><br><span class="line">    <span class="keyword">long</span> version = getResponse.getVersion();</span><br><span class="line">    String sourceAsString = getResponse.getSourceAsString();        </span><br><span class="line">    Map&lt;String, Object&gt; sourceAsMap = getResponse.getSourceAsMap(); </span><br><span class="line">    <span class="keyword">byte</span>[] sourceAsBytes = getResponse.getSourceAsBytes();          </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//处理未找到文档的方案。注意，虽然返回的响应具有404状态代码，但他会返回一个有效GetResponse而不是抛出异常。此类响应不包含任何文档字段，而且isExists方法返回false。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当对不存在的索引(<code>index</code>)执行get请求时，响应会有<code>404</code>状态代码，但是会抛出<code>ElasticsearchException</code>，需要按如下方式处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">"does_not_exist"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    GetResponse getResponse = client.get(request);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ElasticsearchException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.status() == RestStatus.NOT_FOUND) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果请求特定版本的文档，并且现有文档具有不同的版本号，则会引发版本冲突：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>).version(<span class="number">2</span>);</span><br><span class="line">    GetResponse getResponse = client.get(request);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ElasticsearchException exception) &#123;</span><br><span class="line">    <span class="keyword">if</span> (exception.status() == RestStatus.CONFLICT) &#123;</span><br><span class="line">        <span class="comment">//处理版本冲突</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Exists-API"><a href="#Exists-API" class="headerlink" title="Exists API"></a>Exists API</h3><p>如果文档存在就返回 <code>true</code>，否则返回 <code>false</code></p><h4 id="Exists-Request"><a href="#Exists-Request" class="headerlink" title="Exists Request"></a>Exists Request</h4><p>它的<code>GetRequest</code>就像<em>Get API</em>一样。支持所有可选参数 。由于<code>exists()</code>只返回<code>true</code>或<code>false</code>，所有建议关闭返回<code>_source</code>和任何存储的字段，以便请求更加轻量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GetRequest getRequest = <span class="keyword">new</span> GetRequest(</span><br><span class="line">    <span class="string">"posts"</span>, </span><br><span class="line">    <span class="string">"doc"</span>,   </span><br><span class="line">    <span class="string">"1"</span>);    </span><br><span class="line">getRequest.fetchSourceContext(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">false</span>)); <span class="comment">//不返回_source</span></span><br><span class="line">getRequest.storedFields(<span class="string">"_none_"</span>);  <span class="comment">//不返回存储字段</span></span><br></pre></td></tr></table></figure><h4 id="同步执行-1"><a href="#同步执行-1" class="headerlink" title="同步执行"></a>同步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> exists = client.exists(getRequest);</span><br></pre></td></tr></table></figure><h4 id="异步执行-1"><a href="#异步执行-1" class="headerlink" title="异步执行"></a>异步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ActionListener&lt;Boolean&gt; listener = <span class="keyword">new</span> ActionListener&lt;Boolean&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Boolean exists)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">client.existsAsync(getRequest, listener);</span><br></pre></td></tr></table></figure><h3 id="Delete-API"><a href="#Delete-API" class="headerlink" title="Delete API"></a>Delete API</h3><h4 id="Delete-Request"><a href="#Delete-Request" class="headerlink" title="Delete Request"></a>Delete Request</h4><p><code>DeleteRequest</code> 参数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">"posts"</span>,<span class="string">"doc"</span>,<span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><h4 id="可选参数-2"><a href="#可选参数-2" class="headerlink" title="可选参数"></a>可选参数</h4><ul><li>设置路由</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.routing(<span class="string">"routing"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置父文档</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.parent(<span class="string">"parent"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置超时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.timeout(TimeValue.timeValueMinutes(<span class="number">2</span>)); </span><br><span class="line">request.timeout(<span class="string">"2m"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置刷新策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.setRefreshPolicy(WriteRequest.RefreshPolicy.WAIT_UNTIL); </span><br><span class="line">request.setRefreshPolicy(<span class="string">"wait_for"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置版本号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.version(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li>设置版本类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.versionType(VersionType.EXTERNAL);</span><br></pre></td></tr></table></figure><h4 id="同步执行-2"><a href="#同步执行-2" class="headerlink" title="同步执行"></a>同步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DeleteResponse deleteResponse = client.delete(request);</span><br></pre></td></tr></table></figure><h4 id="异步执行-2"><a href="#异步执行-2" class="headerlink" title="异步执行"></a>异步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ActionListener&lt;DeleteResponse&gt; listener = <span class="keyword">new</span> ActionListener&lt;DeleteResponse&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(DeleteResponse deleteResponse)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">client.deleteAsync(request, listener);</span><br></pre></td></tr></table></figure><h4 id="Delete-Response"><a href="#Delete-Response" class="headerlink" title="Delete Response"></a>Delete Response</h4><p>返回的<code>DeleteResponse</code>包含了有关已执行操作的信息，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String index = deleteResponse.getIndex();</span><br><span class="line">String type = deleteResponse.getType();</span><br><span class="line">String id = deleteResponse.getId();</span><br><span class="line"><span class="keyword">long</span> version = deleteResponse.getVersion();</span><br><span class="line">ReplicationResponse.ShardInfo shardInfo = deleteResponse.getShardInfo();</span><br><span class="line"><span class="keyword">if</span> (shardInfo.getTotal() != shardInfo.getSuccessful()) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (shardInfo.getFailed() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (ReplicationResponse.ShardInfo.Failure failure : shardInfo.getFailures()) &#123;</span><br><span class="line">        String reason = failure.reason(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它还可以检查文档是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"does_not_exist"</span>);</span><br><span class="line">DeleteResponse deleteResponse = client.delete(request);</span><br><span class="line"><span class="keyword">if</span> (deleteResponse.getResult() == DocWriteResponse.Result.NOT_FOUND) &#123;</span><br><span class="line">    <span class="comment">//如果找不到要删除的文档</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果请求的文档版本冲突，会抛<code>ElasticsearchException</code>异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>).version(<span class="number">2</span>);</span><br><span class="line">    DeleteResponse deleteResponse = client.delete(request);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ElasticsearchException exception) &#123;</span><br><span class="line">    <span class="keyword">if</span> (exception.status() == RestStatus.CONFLICT) &#123;</span><br><span class="line">        <span class="comment">//引发的异常表示返回了版本冲突错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Update-API"><a href="#Update-API" class="headerlink" title="Update API"></a>Update API</h3><h4 id="UpdateRequest"><a href="#UpdateRequest" class="headerlink" title="UpdateRequest"></a>UpdateRequest</h4><p>参数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><p><code>Update API</code>允许使用脚本或传递部分文档来更新现有文档。</p><h4 id="使用脚本更新文档"><a href="#使用脚本更新文档" class="headerlink" title="使用脚本更新文档"></a>使用脚本更新文档</h4><p>使用内联脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; parameters = singletonMap(<span class="string">"count"</span>, <span class="number">4</span>); <span class="comment">//使用Map对象作为脚本参数</span></span><br><span class="line">Script inline = <span class="keyword">new</span> Script(ScriptType.INLINE, <span class="string">"painless"</span>,</span><br><span class="line">        <span class="string">"ctx._source.field += params.count"</span>, parameters);  <span class="comment">//使用painless语言和提供的参数创建内联脚本</span></span><br><span class="line">UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>);</span><br><span class="line">request.script(inline); <span class="comment">//将脚本设置为更新请求</span></span><br></pre></td></tr></table></figure><p>或者使用存储在es 中的脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Script stored =<span class="keyword">new</span> Script(ScriptType.STORED, <span class="keyword">null</span>, <span class="string">"increment-field"</span>, parameters);<span class="comment">//使用存储在 es 中的painless脚本，脚本名为increment-field</span></span><br><span class="line">request.script(stored);</span><br></pre></td></tr></table></figure><h4 id="传递部分文档作为参数来更新文档"><a href="#传递部分文档作为参数来更新文档" class="headerlink" title="传递部分文档作为参数来更新文档"></a>传递部分文档作为参数来更新文档</h4><p>当使用部分文档来更新现有的文档时，部分文档将与现有文档合并。</p><p>部分文档可以以不同方式提供：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>);</span><br><span class="line">String jsonString = <span class="string">"&#123;"</span> +</span><br><span class="line">        <span class="string">"\"updated\":\"2017-01-01\","</span> +</span><br><span class="line">        <span class="string">"\"reason\":\"daily update\""</span> +</span><br><span class="line">        <span class="string">"&#125;"</span>;</span><br><span class="line">request.doc(jsonString, XContentType.JSON);<span class="comment">//用json格式的字符串作为部分文档源</span></span><br></pre></td></tr></table></figure><p>以 <code>Map</code> 提供部分文档源，会被自动转化成 <code>json</code> 格式，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; jsonMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">jsonMap.put(<span class="string">"updated"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">jsonMap.put(<span class="string">"reason"</span>, <span class="string">"daily update"</span>);</span><br><span class="line">UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .doc(jsonMap);</span><br></pre></td></tr></table></figure><p>用<code>XContentBuilder</code>对象作为部分文档源，<code>Elasticsearch</code>内置的 helpers 会自动将它转化为 json 文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">XContentBuilder builder = XContentFactory.jsonBuilder();</span><br><span class="line">builder.startObject();</span><br><span class="line">&#123;</span><br><span class="line">    builder.timeField(<span class="string">"updated"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    builder.field(<span class="string">"reason"</span>, <span class="string">"daily update"</span>);</span><br><span class="line">&#125;</span><br><span class="line">builder.endObject();</span><br><span class="line">UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .doc(builder);</span><br></pre></td></tr></table></figure><p> 使用键值对作为部分文档源，他会被转换成 json 文本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .doc(<span class="string">"updated"</span>, <span class="keyword">new</span> Date(),</span><br><span class="line">             <span class="string">"reason"</span>, <span class="string">"daily update"</span>);</span><br></pre></td></tr></table></figure><h4 id="Upserts"><a href="#Upserts" class="headerlink" title="Upserts"></a>Upserts</h4><p>如果文档尚不存在，则可以使用以下<code>upsert</code>方法来将它作为新文档插入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String jsonString = <span class="string">"&#123;\"created\":\"2017-01-01\"&#125;"</span>;</span><br><span class="line">request.upsert(jsonString, XContentType.JSON);</span><br></pre></td></tr></table></figure><p>和部分文档更新一样，<code>upsert</code> 方法接受<code>String</code>, <code>Map</code>, <code>XContentBuilder</code> or 键值对作为入参</p><h4 id="可选参数-3"><a href="#可选参数-3" class="headerlink" title="可选参数"></a>可选参数</h4><ul><li>设置路由</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.routing(<span class="string">"routing"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置父文档</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.parent(<span class="string">"parent"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置超时时间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>)); </span><br><span class="line">request.timeout(<span class="string">"1s"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置刷新策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.setRefreshPolicy(WriteRequest.RefreshPolicy.WAIT_UNTIL); </span><br><span class="line">request.setRefreshPolicy(<span class="string">"wait_for"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置重试更新操作的次数</li></ul><p>如果要更新的文档已在更新操作的get和indexing阶段之间的另一个操作更改，则重试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.retryOnConflict(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>设置是否获取新文档内容，默认 <code>false</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.fetchSource(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><ul><li>指定返回哪些字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] includes = <span class="keyword">new</span> String[]&#123;<span class="string">"updated"</span>, <span class="string">"r*"</span>&#125;;<span class="comment">//正则匹配</span></span><br><span class="line">String[] excludes = Strings.EMPTY_ARRAY;</span><br><span class="line">request.fetchSource(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">true</span>, includes, excludes));</span><br></pre></td></tr></table></figure><ul><li>指定不返回哪些字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] includes = <span class="keyword">new</span> String[]&#123;<span class="string">"updated"</span>, <span class="string">"r*"</span>&#125;;</span><br><span class="line">String[] excludes = Strings.EMPTY_ARRAY;</span><br><span class="line">request.fetchSource(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">true</span>, includes, excludes));</span><br></pre></td></tr></table></figure><ul><li>设置文档版本号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.version(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li>设置是否启用noop 检测</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.detectNoop(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><ul><li>指示脚本必须运行，无论文档是否存在，即如果文档尚不存在，脚本将负责创建文档</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.scriptedUpsert(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><ul><li>如果文档不存在，则表明必须将部分文档用作upsert文档</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.docAsUpsert(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><ul><li>设置在执行更新操作之前必须处于活动状态的分片副本数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.waitForActiveShards(<span class="number">2</span>); </span><br><span class="line">request.waitForActiveShards(ActiveShardCount.ALL);</span><br></pre></td></tr></table></figure><h4 id="同步执行-3"><a href="#同步执行-3" class="headerlink" title="同步执行"></a>同步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UpdateResponse updateResponse = client.update(request);</span><br></pre></td></tr></table></figure><h4 id="异步执行-3"><a href="#异步执行-3" class="headerlink" title="异步执行"></a>异步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">client.updateAsync(request, <span class="keyword">new</span> ActionListener&lt;UpdateResponse&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(UpdateResponse updateResponse)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="UpdateResponse"><a href="#UpdateResponse" class="headerlink" title="UpdateResponse"></a>UpdateResponse</h4><p>返回的<code>UpdateResponse</code>包含了有关已执行操作的信息，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String index = updateResponse.getIndex();</span><br><span class="line">String type = updateResponse.getType();</span><br><span class="line">String id = updateResponse.getId();</span><br><span class="line"><span class="keyword">long</span> version = updateResponse.getVersion();</span><br><span class="line"><span class="keyword">if</span> (updateResponse.getResult() == DocWriteResponse.Result.CREATED) &#123;</span><br><span class="line">    <span class="comment">//首次创建文档（upsert）</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (updateResponse.getResult() == DocWriteResponse.Result.UPDATED) &#123;</span><br><span class="line">    <span class="comment">//文档更新</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (updateResponse.getResult() == DocWriteResponse.Result.DELETED) &#123;</span><br><span class="line">    <span class="comment">//文档更新</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (updateResponse.getResult() == DocWriteResponse.Result.NOOP) &#123;</span><br><span class="line">    <span class="comment">//文档未受更新影响，即未对文档执行任何操作（noop）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UpdateRequest</code> 通过<code>fetchSource</code>方法启用获取文档功能时，响应包含更新文档的来源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GetResult result = updateResponse.getGetResult(); </span><br><span class="line"><span class="keyword">if</span> (result.isExists()) &#123;</span><br><span class="line">    String sourceAsString = result.sourceAsString(); </span><br><span class="line">    Map&lt;String, Object&gt; sourceAsMap = result.sourceAsMap(); </span><br><span class="line">    <span class="keyword">byte</span>[] sourceAsBytes = result.source(); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以检查分片失败：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ReplicationResponse.ShardInfo shardInfo = updateResponse.getShardInfo();</span><br><span class="line"><span class="keyword">if</span> (shardInfo.getTotal() != shardInfo.getSuccessful()) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (shardInfo.getFailed() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (ReplicationResponse.ShardInfo.Failure failure : shardInfo.getFailures()) &#123;</span><br><span class="line">        String reason = failure.reason(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当对一个不存在的文档执行<code>UpdateRequest</code>时，响应具有<code>404</code>状态代码，会抛出<code>ElasticsearchException</code>，需要按如下方式处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"type"</span>, <span class="string">"does_not_exist"</span>)</span><br><span class="line">        .doc(<span class="string">"field"</span>, <span class="string">"value"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    UpdateResponse updateResponse = client.update(request);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ElasticsearchException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.status() == RestStatus.NOT_FOUND) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果发生文档版本冲突，会抛出异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .doc(<span class="string">"field"</span>, <span class="string">"value"</span>)</span><br><span class="line">        .version(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    UpdateResponse updateResponse = client.update(request);</span><br><span class="line">&#125; <span class="keyword">catch</span>(ElasticsearchException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.status() == RestStatus.CONFLICT) &#123;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bulk-API"><a href="#Bulk-API" class="headerlink" title="Bulk API"></a>Bulk API</h3><h4 id="BulkRequest"><a href="#BulkRequest" class="headerlink" title="BulkRequest"></a>BulkRequest</h4><p><code>BulkRequest</code>可用于使用单个请求执行多个索引，更新和/或删除操作</p><p>它要求至少将一个操作添加到批量请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BulkRequest request = <span class="keyword">new</span> BulkRequest(); </span><br><span class="line">request.add(<span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)  </span><br><span class="line">        .source(XContentType.JSON,<span class="string">"field"</span>, <span class="string">"foo"</span>));</span><br><span class="line">request.add(<span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"2"</span>)  </span><br><span class="line">        .source(XContentType.JSON,<span class="string">"field"</span>, <span class="string">"bar"</span>));</span><br><span class="line">request.add(<span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"3"</span>)  </span><br><span class="line">        .source(XContentType.JSON,<span class="string">"field"</span>, <span class="string">"baz"</span>));</span><br></pre></td></tr></table></figure><p>并且可以添加不同的操作类型<code>BulkRequest</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BulkRequest request = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">request.add(<span class="keyword">new</span> DeleteRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"3"</span>)); </span><br><span class="line">request.add(<span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"2"</span>) </span><br><span class="line">        .doc(XContentType.JSON,<span class="string">"other"</span>, <span class="string">"test"</span>));</span><br><span class="line">request.add(<span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"4"</span>)  </span><br><span class="line">        .source(XContentType.JSON,<span class="string">"field"</span>, <span class="string">"baz"</span>));</span><br></pre></td></tr></table></figure><h4 id="可选参数-4"><a href="#可选参数-4" class="headerlink" title="可选参数"></a>可选参数</h4><ul><li>设置超时时间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.timeout(TimeValue.timeValueMinutes(<span class="number">2</span>)); </span><br><span class="line">request.timeout(<span class="string">"2m"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置刷新策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.timeout(TimeValue.timeValueMinutes(<span class="number">2</span>)); </span><br><span class="line">request.timeout(<span class="string">"2m"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置在索引/更新/删除操作之前必须处于活动状态的分片副本数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.waitForActiveShards(<span class="number">2</span>); </span><br><span class="line">request.waitForActiveShards(ActiveShardCount.ALL); <span class="comment">//可选ActiveShardCount.ALL、 ActiveShardCount.ONE 、 ActiveShardCount.DEFAULT</span></span><br></pre></td></tr></table></figure><h4 id="同步执行-4"><a href="#同步执行-4" class="headerlink" title="同步执行"></a>同步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BulkResponse bulkResponse = client.bulk(request);</span><br></pre></td></tr></table></figure><h4 id="异步执行-4"><a href="#异步执行-4" class="headerlink" title="异步执行"></a>异步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ActionListener&lt;BulkResponse&gt; listener = <span class="keyword">new</span> ActionListener&lt;BulkResponse&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(BulkResponse bulkResponse)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">client.bulkAsync(request, listener);</span><br></pre></td></tr></table></figure><h4 id="BulkResponse"><a href="#BulkResponse" class="headerlink" title="BulkResponse"></a>BulkResponse</h4><p>响应结果，允许迭代每个结果，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (BulkItemResponse bulkItemResponse : bulkResponse) &#123; </span><br><span class="line">    <span class="comment">//可以是IndexResponse、UpdateResponse、DeleteResponse，他们可以全部被视为DocWriteResponse实例</span></span><br><span class="line">    DocWriteResponse itemResponse = bulkItemResponse.getResponse(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bulkItemResponse.getOpType() == DocWriteRequest.OpType.INDEX</span><br><span class="line">            || bulkItemResponse.getOpType() == DocWriteRequest.OpType.CREATE) &#123; </span><br><span class="line">        IndexResponse indexResponse = (IndexResponse) itemResponse;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bulkItemResponse.getOpType() == DocWriteRequest.OpType.UPDATE) &#123; </span><br><span class="line">        UpdateResponse updateResponse = (UpdateResponse) itemResponse;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bulkItemResponse.getOpType() == DocWriteRequest.OpType.DELETE) &#123; </span><br><span class="line">        DeleteResponse deleteResponse = (DeleteResponse) itemResponse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>批量响应提供了一种快速检查一个或多个操作是否失败的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（bulkResponse.hasFailures（））&#123; </span><br><span class="line"><span class="comment">//如果至少有一个操作失败，则返回true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，有必要迭代所有操作结果，以检查操作是否失败，如果是，则获取相应的失败信息： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>（BulkItemResponse bulkItemResponse：bulkResponse）&#123;</span><br><span class="line">    <span class="keyword">if</span>（bulkItemResponse.isFailed（））&#123; </span><br><span class="line">        BulkItemResponse.Failure failure = bulkItemResponse.getFailure（）; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="批量处理器"><a href="#批量处理器" class="headerlink" title="批量处理器"></a>批量处理器</h4><p><code>BulkProcessor</code>提供了一个工具类简化操作，它可以透明地执行添加到 <code>processor</code> 中的 <code>index</code>/<code>update</code>/<code>delete</code>操作。</p><p>为了执行请求，<code>BulkProcessor</code>需要以下组件：</p><ul><li><p><code>RestHighLevelClient</code></p><p>此客户端用于执行<code>BulkRequest</code> 和获取<code>BulkResponse</code></p></li><li><p><code>BulkProcessor.Listener</code></p><p>在每次<code>BulkRequest</code>执行之前、之后或<code>BulkRequest</code>失败时调用器监听</p></li></ul><p>然后该<code>BulkProcessor.builder</code>方法可用于构建新的<code>BulkProcessor</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">BulkProcessor.Listener listener = <span class="keyword">new</span> BulkProcessor.Listener() &#123; </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeBulk</span><span class="params">(<span class="keyword">long</span> executionId, BulkRequest request)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterBulk</span><span class="params">(<span class="keyword">long</span> executionId, BulkRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            BulkResponse response)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterBulk</span><span class="params">(<span class="keyword">long</span> executionId, BulkRequest request, Throwable failure)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">BulkProcessor bulkProcessor =</span><br><span class="line">        BulkProcessor.builder(client::bulkAsync, listener).build();</span><br></pre></td></tr></table></figure><p><code>BulkProcessor.Builder</code>提供了方法来配置<code>BulkProcessor</code>处理请求的行为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BulkProcessor.Builder builder = BulkProcessor.builder(client::bulkAsync, listener);</span><br><span class="line">builder.setBulkActions(<span class="number">500</span>);<span class="comment">//根据当前添加的操作数设置何时刷新新的批量请求（默认为1000，使用-1禁用它） </span></span><br><span class="line">builder.setBulkSize(<span class="keyword">new</span> ByteSizeValue(<span class="number">1L</span>, ByteSizeUnit.MB)); <span class="comment">//根据当前添加的操作内容大小设置何时刷新新的批量请求（默认为5Mb，使用-1禁用它）</span></span><br><span class="line">builder.setConcurrentRequests(<span class="number">0</span>); <span class="comment">//设置允许执行的并发请求数（默认为1，使用0只允许执行单个请求）</span></span><br><span class="line">builder.setFlushInterval(TimeValue.timeValueSeconds(<span class="number">10L</span>)); <span class="comment">//BulkRequest如果间隔超过，则 设置刷新间隔刷新任何挂起（默认为未设置）</span></span><br><span class="line">builder.setBackoffPolicy(BackoffPolicy</span><br><span class="line">        .constantBackoff(TimeValue.timeValueSeconds(<span class="number">1L</span>), <span class="number">3</span>));<span class="comment">//设置一个最初等待1秒的常量重试策略，最多重试3次。见BackoffPolicy.noBackoff()、BackoffPolicy.constantBackoff()、BackoffPolicy.exponentialBackoff() 提供更多的选择</span></span><br></pre></td></tr></table></figure><p>一旦<code>BulkProcessor</code>被创建，请求可以被添加到<code>processor</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">IndexRequest one = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>).</span><br><span class="line">        source(XContentType.JSON, <span class="string">"title"</span>,</span><br><span class="line">                <span class="string">"In which order are my Elasticsearch queries executed?"</span>);</span><br><span class="line">IndexRequest two = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"2"</span>)</span><br><span class="line">        .source(XContentType.JSON, <span class="string">"title"</span>,</span><br><span class="line">                <span class="string">"Current status and upcoming changes in Elasticsearch"</span>);</span><br><span class="line">IndexRequest three = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"3"</span>)</span><br><span class="line">        .source(XContentType.JSON, <span class="string">"title"</span>,</span><br><span class="line">                <span class="string">"The Future of Federated Search in Elasticsearch"</span>);</span><br><span class="line"></span><br><span class="line">bulkProcessor.add(one);</span><br><span class="line">bulkProcessor.add(two);</span><br><span class="line">bulkProcessor.add(three);</span><br></pre></td></tr></table></figure><p><code>BulkProcessor</code> 执行所有的请求，并且为每次的 <code>BulkRequest</code> 回调<code>BulkProcessor.Listener</code>，监听器提供了访问 <code>BulkRequest</code> 和 <code>BulkResponse</code> 的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">BulkProcessor.Listener listener = <span class="keyword">new</span> BulkProcessor.Listener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeBulk</span><span class="params">(<span class="keyword">long</span> executionId, BulkRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numberOfActions = request.numberOfActions(); </span><br><span class="line">        logger.debug(<span class="string">"Executing bulk [&#123;&#125;] with &#123;&#125; requests"</span>,</span><br><span class="line">                executionId, numberOfActions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterBulk</span><span class="params">(<span class="keyword">long</span> executionId, BulkRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            BulkResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (response.hasFailures()) &#123; </span><br><span class="line">            logger.warn(<span class="string">"Bulk [&#123;&#125;] executed with failures"</span>, executionId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">"Bulk [&#123;&#125;] completed in &#123;&#125; milliseconds"</span>,</span><br><span class="line">                    executionId, response.getTook().getMillis());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterBulk</span><span class="params">(<span class="keyword">long</span> executionId, BulkRequest request, Throwable failure)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行失败后调用</span></span><br><span class="line">        logger.error(<span class="string">"Failed to execute bulk"</span>, failure); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>将所有请求添加到<code>BulkProcessor</code>后，需要关闭其实例，有两种关闭方式。</p><p>该<code>awaitClose()</code>方法可用于等待所有请求都已处理或指定的等待时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> terminated = bulkProcessor.awaitClose（<span class="number">30L</span>，TimeUnit.SECONDS）;<span class="comment">//true：如果所有批量请求都已完成，false：在所有批量请求完成之前等待时间已过</span></span><br></pre></td></tr></table></figure><p><code>close()</code>方法可用于立即关闭<code>BulkProcessor</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bulkProcessor.close（）;</span><br></pre></td></tr></table></figure><p>两种方法在关闭处理器之前刷新已经添加到处理器的请求，并且禁止添加新请求</p><h3 id="Multi-Get-API"><a href="#Multi-Get-API" class="headerlink" title="Multi-Get API"></a>Multi-Get API</h3><p><code>multiGet API</code> 可以在单个请求中执行多个 <code>get</code> 请求</p><h4 id="Multi-Get-Request"><a href="#Multi-Get-Request" class="headerlink" title="Multi-Get Request"></a>Multi-Get Request</h4><p>获取一个 <code>MultiGetRequest</code>实例，然后添加多个 <code>MultiGetRequest.Item</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MultiGetRequest request = <span class="keyword">new</span> MultiGetRequest();</span><br><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(</span><br><span class="line">    <span class="string">"index"</span>,         </span><br><span class="line">    <span class="string">"type"</span>,          </span><br><span class="line">    <span class="string">"example_id"</span>));  </span><br><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"another_id"</span>));</span><br></pre></td></tr></table></figure><h4 id="可选参数-5"><a href="#可选参数-5" class="headerlink" title="可选参数"></a>可选参数</h4><p><code>multiGet</code>和 <code>get Api</code>支持相同的可选参数. 你可以在 <code>Item</code>上设置可选参数:</p><ul><li>设置不返回任何文档，默认返回文档</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"example_id"</span>)</span><br><span class="line">            .fetchSourceContext(FetchSourceContext.DO_NOT_FETCH_SOURCE)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><ul><li>设置返回文档的哪些字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String[] includes = <span class="keyword">new</span> String[] &#123;<span class="string">"foo"</span>, <span class="string">"*r"</span>&#125;;</span><br><span class="line">String[] excludes = Strings.EMPTY_ARRAY;</span><br><span class="line">FetchSourceContext fetchSourceContext =</span><br><span class="line">        <span class="keyword">new</span> FetchSourceContext(<span class="keyword">true</span>, includes, excludes);</span><br><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"example_id"</span>)</span><br><span class="line">    .fetchSourceContext(fetchSourceContext));</span><br></pre></td></tr></table></figure><ul><li>设置不返回文档的哪些字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String[] includes = Strings.EMPTY_ARRAY;</span><br><span class="line">String[] excludes = <span class="keyword">new</span> String[] &#123;<span class="string">"foo"</span>, <span class="string">"*r"</span>&#125;;</span><br><span class="line">FetchSourceContext fetchSourceContext =</span><br><span class="line">        <span class="keyword">new</span> FetchSourceContext(<span class="keyword">true</span>, includes, excludes);</span><br><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"example_id"</span>)</span><br><span class="line">    .fetchSourceContext(fetchSourceContext));</span><br></pre></td></tr></table></figure><ul><li>配置返回指定的存储字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"example_id"</span>)</span><br><span class="line">    .storedFields(<span class="string">"foo"</span>));  <span class="comment">//设置返回存储字段 foo</span></span><br><span class="line">MultiGetResponse response = client.multiGet(request);</span><br><span class="line">MultiGetItemResponse item = response.getResponses()[<span class="number">0</span>];</span><br><span class="line">String value = item.getResponse().getField(<span class="string">"foo"</span>).getValue(); <span class="comment">//获取存储字段foo的值</span></span><br></pre></td></tr></table></figure><ul><li>其他可选参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"with_routing"</span>)</span><br><span class="line">    .routing(<span class="string">"some_routing"</span>));<span class="comment">//设置路由       </span></span><br><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"with_parent"</span>)</span><br><span class="line">    .parent(<span class="string">"some_parent"</span>));<span class="comment">//设置父文档       </span></span><br><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"with_version"</span>)</span><br><span class="line">    .versionType(VersionType.EXTERNAL)<span class="comment">//设置文档版本类型</span></span><br><span class="line">    .version(<span class="number">10123L</span>)); <span class="comment">//设置版本号</span></span><br><span class="line">request.preference(<span class="string">"some_preference"</span>);  <span class="comment">//设置偏好</span></span><br><span class="line">request.realtime(<span class="keyword">false</span>); <span class="comment">//设置实时标识，默认为 true       </span></span><br><span class="line">request.refresh(<span class="keyword">true</span>); <span class="comment">//获取文档之前执行刷新操作，默认 false</span></span><br></pre></td></tr></table></figure><h4 id="同步执行-5"><a href="#同步执行-5" class="headerlink" title="同步执行"></a>同步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MultiGetResponse response = client.multiGet(request);</span><br></pre></td></tr></table></figure><h4 id="异步执行-5"><a href="#异步执行-5" class="headerlink" title="异步执行"></a>异步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ActionListener&lt;MultiGetResponse&gt; listener = <span class="keyword">new</span> ActionListener&lt;MultiGetResponse&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(MultiGetResponse response)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">MultiGetResponse response = client.multiGet(request);</span><br></pre></td></tr></table></figure><h4 id="MultiGetResponse"><a href="#MultiGetResponse" class="headerlink" title="MultiGetResponse"></a>MultiGetResponse</h4><p>返回的<code>MultiGetResponse</code>通过<code>getResponses</code>方法可以获取一个 <code>MultiGetItemResponse</code> 列表，列表中的响应与请求的顺序相同，如果 <code>get</code> 成功 <code>MultiGetItemResponse</code>包含一个 <code>GetResponse</code>，如果它失败了会包含一个<code>MultiGetResponse.Failure</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MultiGetItemResponse firstItem = response.getResponses（）[<span class="number">0</span>];</span><br><span class="line">assertNull（firstItem.getFailure（））;<span class="comment">//如果成功，返回 null       </span></span><br><span class="line">GetResponse firstGet = firstItem.getResponse（）; <span class="comment">//获取 GetResponse</span></span><br><span class="line">String index = firstItem.getIndex（）;</span><br><span class="line">String type = firstItem.getType（）;</span><br><span class="line">String id = firstItem.getId（）;</span><br><span class="line"><span class="keyword">if</span>（firstGet.isExists（））<span class="comment">//判断文档是否存在</span></span><br><span class="line">    <span class="keyword">long</span> version = firstGet.getVersion（）;</span><br><span class="line">    String sourceAsString = firstGet.getSourceAsString（）;        </span><br><span class="line">    Map &lt;String，Object&gt; sourceAsMap = firstGet.getSourceAsMap（）; </span><br><span class="line">    <span class="keyword">byte</span> [] sourceAsBytes = firstGet.getSourceAsBytes（）;          </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果请求的 index 不存在，则返回响应会包含一个异常信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">assertNull(missingIndexItem.getResponse());                </span><br><span class="line">Exception e = missingIndexItem.getFailure().getFailure();  </span><br><span class="line">ElasticsearchException ee = (ElasticsearchException) e;    </span><br><span class="line"><span class="comment">// TODO status is broken! fix in a followup</span></span><br><span class="line"><span class="comment">// assertEquals(RestStatus.NOT_FOUND, ee.status());        </span></span><br><span class="line">assertThat(e.getMessage(),</span><br><span class="line">    containsString(<span class="string">"reason=no such index"</span>));</span><br></pre></td></tr></table></figure><p>请求文档版本冲突，则返回响应会包含一个异常信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MultiGetRequest request = <span class="keyword">new</span> MultiGetRequest();</span><br><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"example_id"</span>)</span><br><span class="line">    .version(<span class="number">1000L</span>));</span><br><span class="line">MultiGetResponse response = client.multiGet(request);</span><br><span class="line">MultiGetItemResponse item = response.getResponses()[<span class="number">0</span>];</span><br><span class="line">assertNull(item.getResponse());                          </span><br><span class="line">Exception e = item.getFailure().getFailure();            </span><br><span class="line">ElasticsearchException ee = (ElasticsearchException) e;  </span><br><span class="line"><span class="comment">// TODO status is broken! fix in a followup</span></span><br><span class="line"><span class="comment">// assertEquals(RestStatus.CONFLICT, ee.status());          </span></span><br><span class="line">assertThat(e.getMessage(),</span><br><span class="line">    containsString(<span class="string">"version conflict, current version [1] is "</span></span><br><span class="line">        + <span class="string">"different than the one provided [1000]"</span>));</span><br></pre></td></tr></table></figure><h2 id="Search-API"><a href="#Search-API" class="headerlink" title="Search API"></a>Search API</h2><p>高级客户端支持下面的 <code>Search API</code>:</p><ul><li>Search API</li><li>Search Scroll API</li><li>Clear Scroll API</li><li>Multi-Search API</li><li>Ranking Evaluation API</li></ul><h3 id="Search-API-1"><a href="#Search-API-1" class="headerlink" title="Search API"></a>Search API</h3><h4 id="SearchRequest"><a href="#SearchRequest" class="headerlink" title="SearchRequest"></a>SearchRequest</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(); </span><br><span class="line">SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder(); </span><br><span class="line">searchSourceBuilder.query(QueryBuilders.matchAllQuery()); </span><br><span class="line">searchRequest.source(searchSourceBuilder);</span><br></pre></td></tr></table></figure><h4 id="可选参数-6"><a href="#可选参数-6" class="headerlink" title="可选参数"></a>可选参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">"posts"</span>); </span><br><span class="line">searchRequest.types(<span class="string">"doc"</span>); </span><br><span class="line">searchRequest.routing(<span class="string">"routing"</span>); </span><br><span class="line">searchRequest.indicesOptions(IndicesOptions.lenientExpandOpen());</span><br><span class="line">searchRequest.preference(<span class="string">"_local"</span>);</span><br></pre></td></tr></table></figure><h4 id="使用-SearchBuilder"><a href="#使用-SearchBuilder" class="headerlink" title="使用 SearchBuilder"></a>使用 SearchBuilder</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder(); </span><br><span class="line">sourceBuilder.query(QueryBuilders.termQuery(<span class="string">"user"</span>, <span class="string">"kimchy"</span>)); </span><br><span class="line">sourceBuilder.from(<span class="number">0</span>); </span><br><span class="line">sourceBuilder.size(<span class="number">5</span>); </span><br><span class="line">sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br></pre></td></tr></table></figure><h4 id="构建查询语句"><a href="#构建查询语句" class="headerlink" title="构建查询语句"></a>构建查询语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MatchQueryBuilder matchQueryBuilder = <span class="keyword">new</span> MatchQueryBuilder(<span class="string">"user"</span>, <span class="string">"kimchy"</span>);</span><br><span class="line">matchQueryBuilder.fuzziness(Fuzziness.AUTO); </span><br><span class="line">matchQueryBuilder.prefixLength(<span class="number">3</span>); </span><br><span class="line">matchQueryBuilder.maxExpansions(<span class="number">10</span>); </span><br><span class="line">matchQueryBuilder.fuzziness(Fuzziness.AUTO); </span><br><span class="line">matchQueryBuilder.prefixLength(<span class="number">3</span>); </span><br><span class="line">matchQueryBuilder.maxExpansions(<span class="number">10</span>); </span><br><span class="line">searchSourceBuilder.query(matchQueryBuilder);</span><br></pre></td></tr></table></figure><h4 id="设置排序"><a href="#设置排序" class="headerlink" title="设置排序"></a>设置排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sourceBuilder.sort(<span class="keyword">new</span> ScoreSortBuilder().order(SortOrder.DESC)); </span><br><span class="line">sourceBuilder.sort(<span class="keyword">new</span> FieldSortBuilder(<span class="string">"_uid"</span>).order(SortOrder.ASC));</span><br></pre></td></tr></table></figure><h4 id="文档过滤"><a href="#文档过滤" class="headerlink" title="文档过滤"></a>文档过滤</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sourceBuilder.fetchSource(<span class="keyword">false</span>);</span><br><span class="line">String[] includeFields = <span class="keyword">new</span> String[] &#123;<span class="string">"title"</span>, <span class="string">"user"</span>, <span class="string">"innerObject.*"</span>&#125;;</span><br><span class="line">String[] excludeFields = <span class="keyword">new</span> String[] &#123;<span class="string">"_type"</span>&#125;;</span><br><span class="line">sourceBuilder.fetchSource(includeFields, excludeFields);</span><br></pre></td></tr></table></figure><h4 id="字段高亮"><a href="#字段高亮" class="headerlink" title="字段高亮"></a>字段高亮</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder(); </span><br><span class="line">HighlightBuilder.Field highlightTitle =</span><br><span class="line">        <span class="keyword">new</span> HighlightBuilder.Field(<span class="string">"title"</span>); </span><br><span class="line">highlightTitle.highlighterType(<span class="string">"unified"</span>);  </span><br><span class="line">highlightBuilder.field(highlightTitle);  </span><br><span class="line">HighlightBuilder.Field highlightUser = <span class="keyword">new</span> HighlightBuilder.Field(<span class="string">"user"</span>);</span><br><span class="line">highlightBuilder.field(highlightUser);</span><br><span class="line">searchSourceBuilder.highlighter(highlightBuilder);</span><br></pre></td></tr></table></figure><h4 id="添加聚合查询"><a href="#添加聚合查询" class="headerlink" title="添加聚合查询"></a>添加聚合查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">TermsAggregationBuilder aggregation = AggregationBuilders.terms(<span class="string">"by_company"</span>)</span><br><span class="line">        .field(<span class="string">"company.keyword"</span>);</span><br><span class="line">aggregation.subAggregation(AggregationBuilders.avg(<span class="string">"average_age"</span>)</span><br><span class="line">        .field(<span class="string">"age"</span>));</span><br><span class="line">searchSourceBuilder.aggregation(aggregation);</span><br></pre></td></tr></table></figure><h4 id="请求建议词"><a href="#请求建议词" class="headerlink" title="请求建议词"></a>请求建议词</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">SuggestionBuilder termSuggestionBuilder =</span><br><span class="line">    SuggestBuilders.termSuggestion(<span class="string">"user"</span>).text(<span class="string">"kmichy"</span>); </span><br><span class="line">SuggestBuilder suggestBuilder = <span class="keyword">new</span> SuggestBuilder();</span><br><span class="line">suggestBuilder.addSuggestion(<span class="string">"suggest_user"</span>, termSuggestionBuilder); </span><br><span class="line">searchSourceBuilder.suggest(suggestBuilder);</span><br></pre></td></tr></table></figure><h4 id="分析查询和聚合"><a href="#分析查询和聚合" class="headerlink" title="分析查询和聚合"></a>分析查询和聚合</h4><p><code>profile API</code> 可用于为特定搜索分析查询和聚合的执行情况。为了使用它, 必须在 SearchSourceBuilder 上设置<code>profile</code>标志为 <code>true</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">searchSourceBuilder.profile(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>执行 <code>SearchRequest</code> 后, 相应的 <code>SearchResponse</code> 将包含分析结果。</p><h4 id="同步执行-6"><a href="#同步执行-6" class="headerlink" title="同步执行"></a>同步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SearchResponse searchResponse = client.search(searchRequest);</span><br></pre></td></tr></table></figure><h4 id="异步执行-6"><a href="#异步执行-6" class="headerlink" title="异步执行"></a>异步执行</h4><p>执行 <code>SearchRequest</code> 也可以以异步方式进行, 以便客户端可以直接返回。用户需要通过将请求和监听器传递给异步搜索方法来指定如何处理响应或潜在故障:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ActionListener&lt;SearchResponse&gt; listener = <span class="keyword">new</span> ActionListener&lt;SearchResponse&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(SearchResponse searchResponse)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">client.searchAsync(searchRequest, listener);</span><br></pre></td></tr></table></figure><p>异步方法不会阻止线程，也不会立即返回。完成该操作后, 如果执行成功则回调<code>ActionListener</code>的 <code>onResponse</code> 方法，失败则回调 onFailure` 方法</p><h4 id="SearchResponse"><a href="#SearchResponse" class="headerlink" title="SearchResponse"></a>SearchResponse</h4><p>执行搜索返回的 <code>SearchResponse</code> 提供了有关搜索执行本身以及对返回访问的文档的详细信息。看下有关于请求执行操作的信息, 如 HTTP 状态代码、执行时间或请求是否提前终止或超时:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RestStatus status = searchResponse.status();</span><br><span class="line">TimeValue took = searchResponse.getTook();</span><br><span class="line">Boolean terminatedEarly = searchResponse.isTerminatedEarly();</span><br><span class="line"><span class="keyword">boolean</span> timedOut = searchResponse.isTimedOut();</span><br></pre></td></tr></table></figure><p>其次, 响应还提供有关在分片级别上执行的信息, 提供有关受影响搜索的分片总数以及成功与失败的分片的统计数据。潜在的故障也可以通过迭代 <code>ShardSearchFailure</code> 数组来处理, 如下面的示例所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> totalShards = searchResponse.getTotalShards();</span><br><span class="line"><span class="keyword">int</span> successfulShards = searchResponse.getSuccessfulShards();</span><br><span class="line"><span class="keyword">int</span> failedShards = searchResponse.getFailedShards();</span><br><span class="line"><span class="keyword">for</span> (ShardSearchFailure failure : searchResponse.getShardFailures()) &#123;</span><br><span class="line">    <span class="comment">// failures should be handled here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取搜索命中的文档"><a href="#获取搜索命中的文档" class="headerlink" title="获取搜索命中的文档"></a>获取搜索命中的文档</h4><p>要获得对返回的文档的访问权限, 我们首先需要得到响应中包含的 SearchHits：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SearchHits hits = searchResponse.getHits();</span><br><span class="line"><span class="keyword">long</span> totalHits = hits.getTotalHits();</span><br><span class="line"><span class="keyword">float</span> maxScore = hits.getMaxScore();</span><br></pre></td></tr></table></figure><p>SearchHits 提供有关所有命中的全局信息, 如命中总数或最大得分:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> totalHits = hits.getTotalHits();</span><br><span class="line"><span class="keyword">float</span> maxScore = hits.getMaxScore();</span><br></pre></td></tr></table></figure><p>嵌套在 SearchHits 中的是可以迭代的单个搜索结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SearchHit[] searchHits = hits.getHits();</span><br><span class="line"><span class="keyword">for</span> (SearchHit hit : searchHits) &#123;</span><br><span class="line">    <span class="comment">// do something with the SearchHit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SearchHit 提供对基本信息的访问, 如索引、类型、docId 和每个搜索命中的分数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String index = hit.getIndex();</span><br><span class="line">String type = hit.getType();</span><br><span class="line">String id = hit.getId();</span><br><span class="line"><span class="keyword">float</span> score = hit.getScore();</span><br></pre></td></tr></table></figure><p>此外, 它还允许您返回文档源, 既可以是简单的 JSON 字符串, 也可以是键/值对的映射。在此映射中,通常键值对的键为字段名, 值为字段值。多值字段作为对象的列表返回, 嵌套对象作为另一个键/值映射。这些案件需要相应地强制执行:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String sourceAsString = hit.getSourceAsString();</span><br><span class="line">Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();</span><br><span class="line">String documentTitle = (String) sourceAsMap.get(<span class="string">"title"</span>);</span><br><span class="line">List&lt;Object&gt; users = (List&lt;Object&gt;) sourceAsMap.get(<span class="string">"user"</span>);</span><br><span class="line">Map&lt;String, Object&gt; innerObject =</span><br><span class="line">        (Map&lt;String, Object&gt;) sourceAsMap.get(<span class="string">"innerObject"</span>);</span><br></pre></td></tr></table></figure><h4 id="获取高亮结果"><a href="#获取高亮结果" class="headerlink" title="获取高亮结果"></a>获取高亮结果</h4><p>可以从结果中获取每个 <code>SearchHit</code> 中高亮显示的文本片段。<code>SearchHit</code>提供对 <code>HighlightField</code> 实例的访问, 其中每一个都包含一个或多个突出显示的文本片段:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SearchHits hits = searchResponse.getHits();</span><br><span class="line"><span class="keyword">for</span> (SearchHit hit : hits.getHits()) &#123;</span><br><span class="line">    Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">    HighlightField highlight = highlightFields.get(<span class="string">"title"</span>); </span><br><span class="line">    Text[] fragments = highlight.fragments();  </span><br><span class="line">    String fragmentString = fragments[<span class="number">0</span>].string();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取聚合结果"><a href="#获取聚合结果" class="headerlink" title="获取聚合结果"></a>获取聚合结果</h4><p>可以从 SearchResponse 获取聚合结果, 首先获取聚合树的根、聚合对象, 然后按名称获取聚合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Aggregations aggregations = searchResponse.getAggregations();</span><br><span class="line">Terms byCompanyAggregation = aggregations.get(<span class="string">"by_company"</span>); </span><br><span class="line">Bucket elasticBucket = byCompanyAggregation.getBucketByKey(<span class="string">"Elastic"</span>); </span><br><span class="line">Avg averageAge = elasticBucket.getAggregations().get(<span class="string">"average_age"</span>); </span><br><span class="line"><span class="keyword">double</span> avg = averageAge.getValue();</span><br></pre></td></tr></table></figure><p>请注意, 如果按名称访问聚合, 则需要根据所请求的聚合类型指定聚合接口, 否则将引发抛出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Range range = aggregations.get(<span class="string">"by_company"</span>); <span class="comment">//这将引发异常, 因为 "by_company" 是一个term聚合, 但这里尝试将它一范围聚合取出</span></span><br></pre></td></tr></table></figure><p>还可以将所有的聚合 转化成 <code>map</code> ,以聚合名作为 <code>key</code> 值。在这种情况下,需要显示强制转换到正确的类型:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Aggregation&gt; aggregationMap = aggregations.getAsMap();</span><br><span class="line">Terms companyAggregation = (Terms) aggregationMap.get(<span class="string">"by_company"</span>);</span><br></pre></td></tr></table></figure><p>还有一些 getter 将所有顶层聚合作为列表返回:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Aggregation&gt; aggregationList = aggregations.asList();</span><br></pre></td></tr></table></figure><p>最后, 可以遍历所有聚合, 然后根据它们的类型决定如何进一步处理它们:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Aggregation agg : aggregations) &#123;</span><br><span class="line">    String type = agg.getType();</span><br><span class="line">    <span class="keyword">if</span> (type.equals(TermsAggregationBuilder.NAME)) &#123;</span><br><span class="line">        Bucket elasticBucket = ((Terms) agg).getBucketByKey(<span class="string">"Elastic"</span>);</span><br><span class="line">        <span class="keyword">long</span> numberOfDocs = elasticBucket.getDocCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取建议"><a href="#获取建议" class="headerlink" title="获取建议"></a>获取建议</h4><p>要从 SearchResponse 中返回<code>suggestions</code>, 请使用<code>suggestion</code> 对象作为入口点, 然后检索嵌套的建议对象:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Suggest suggest = searchResponse.getSuggest(); </span><br><span class="line">TermSuggestion termSuggestion = suggest.getSuggestion(<span class="string">"suggest_user"</span>); </span><br><span class="line"><span class="keyword">for</span> (TermSuggestion.Entry entry : termSuggestion.getEntries()) &#123; </span><br><span class="line">    <span class="keyword">for</span> (TermSuggestion.Entry.Option option : entry) &#123; </span><br><span class="line">        String suggestText = option.getText().string();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取性能分析结果"><a href="#获取性能分析结果" class="headerlink" title="获取性能分析结果"></a>获取性能分析结果</h4><p>使用 <code>getProfileResults ()</code> 方法从 <code>SearchResponse</code> 检索性能分析结果。此方法返回一个<code>Map</code>,包含 <code>SearchRequest</code> 执行中所涉及的每个分片的 <code>ProfileShardResult</code> 对象。<code>ProfileShardResult</code> 存储在映射中, 使用唯一标识配置文件结果对应的碎片的键.   </p><p>下面是一个示例代码, 它演示如何循环访问每个分片的所有性能分析结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, ProfileShardResult&gt; profilingResults =</span><br><span class="line">        searchResponse.getProfileResults(); </span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, ProfileShardResult&gt; profilingResult : profilingResults.entrySet()) &#123; </span><br><span class="line">    String key = profilingResult.getKey(); </span><br><span class="line">    ProfileShardResult profileShardResult = profilingResult.getValue(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ProfileShardResult</code> 对象本身包含一个或多个<code>QueryProfileShardResult</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;QueryProfileShardResult&gt; queryProfileShardResults =</span><br><span class="line">        profileShardResult.getQueryProfileResults(); </span><br><span class="line"><span class="keyword">for</span> (QueryProfileShardResult queryProfileResult : queryProfileShardResults) &#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (ProfileResult profileResult : queryProfileResult.getQueryResults()) &#123; </span><br><span class="line">    String queryName = profileResult.getQueryName(); </span><br><span class="line">    <span class="keyword">long</span> queryTimeInMillis = profileResult.getTime(); </span><br><span class="line">    List&lt;ProfileResult&gt; profiledChildren = profileResult.getProfiledChildren(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;&lt;/a&gt;起步&lt;/h2&gt;&lt;p&gt;阅读文档须知,文档基于&lt;code&gt;Elasticsearch 6.x&lt;/code&gt;,阅读要求,熟悉 &lt;code&gt;ElasticSearch&lt;
      
    
    </summary>
    
      <category term="elasticsearch" scheme="https://blog.milk4j.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="https://blog.milk4j.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://blog.milk4j.com/2018/05/26/Docker%20%E5%AE%89%E8%A3%85%20redis/"/>
    <id>https://blog.milk4j.com/2018/05/26/Docker 安装 redis/</id>
    <published>2018-05-25T16:33:36.246Z</published>
    <updated>2018-06-08T06:26:41.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-安装-Redis"><a href="#Docker-安装-Redis" class="headerlink" title="Docker 安装 Redis"></a>Docker 安装 Redis</h1><h5 id="下载镜像-创建运行容器"><a href="#下载镜像-创建运行容器" class="headerlink" title="下载镜像|创建运行容器"></a>下载镜像|创建运行容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line"><span class="meta">#</span>创建|运行容器</span><br><span class="line">docker run -d --name=myredis -p 6379:6379 redis</span><br></pre></td></tr></table></figure><h5 id="其他容器与-redis-容器通讯"><a href="#其他容器与-redis-容器通讯" class="headerlink" title="其他容器与 redis 容器通讯"></a>其他容器与 redis 容器通讯</h5><p>nginx容器需要与redis容器通信的话首先要知道它的ip地址，但是每次都手工获取容器的ip地址显然是一件繁琐的事情，于是我们需要修改容器的启动方式，加–link参数，建立其他容器与redis容器之间的联系。</p><p>删除掉之前的容器，现在重新修改 nginx容器的启动方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 使用 pwd 变量</span><br><span class="line">cd ~/nginx &amp;&amp; docker run -it -p 80:80 --name=mynginx --link=myredis:db -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/logs:/wwwlogs -d nginx</span><br><span class="line"></span><br><span class="line">docker run -it -p 80:80 --name=web --link=app1:app1 --link=app2:app2 --link=app3:app3 -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/logs:/wwwlogs -d nginx</span><br></pre></td></tr></table></figure><p>这次加入了两个参数：</p><ul><li><strong>-v /code:/usr/src/app</strong> 表示把宿主机上的/code目录挂载到容器内的/usr/src/app目录，可以通过直接管理宿主机上的挂载目录来管理容器内部的挂载目录。</li><li><strong>–link=redis:db</strong> 表示把redis容器以db别名与该容器建立关系，在该容器内以db作为主机名表示了redis容器的主机地址。</li></ul><p>现在进入到其他容器，通过ping命令确认nginx容器能访问到redis容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ping db</span><br><span class="line">PING db (192.168.32.12): 56 data bytes</span><br><span class="line">64 bytes from 192.168.32.12: icmp_seq=0 ttl=64 time=0.463 ms</span><br><span class="line">64 bytes from 192.168.32.12: icmp_seq=1 ttl=64 time=0.086 ms</span><br><span class="line"><span class="meta">#</span>ping 命令找不到</span><br><span class="line"><span class="meta">$</span> apt-get update</span><br><span class="line"><span class="meta">$</span> apt-get install inetutils-ping</span><br></pre></td></tr></table></figure><h5 id="Redis-集群搭建"><a href="#Redis-集群搭建" class="headerlink" title="Redis 集群搭建"></a>Redis 集群搭建</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>创建 redis master 容器</span><br><span class="line"><span class="meta">$</span> docker run -d --name=redis_master -p 6380:6379 redis</span><br><span class="line"><span class="meta">#</span>两个  redis slave 容器</span><br><span class="line"><span class="meta">$</span> docker run -d --name=redis_slave_1 -p 6380:6379 --link=redis_master:master redis redis-server --slaveof master 6379</span><br><span class="line"><span class="meta">$</span> docker run -d --name=redis_slave_2 -p 6381:6379 --link=redis_master:master redis redis-server --slaveof master 6379</span><br></pre></td></tr></table></figure><p>现在写入到Redis主节点的数据都会在从节点上备份一份数据。</p><p><img src="https://pic4.zhimg.com/80/v2-b97bbd401b2f169c36a3b660206c1abe_hd.jpg" alt="img"></p><p>为了防止 master 宕机，再由Sentinel集群根据投票选举出slave节点作为新的master。</p><p>下面为Sentinel编写Dockerfile，在redis镜像的基础上作改动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM redis:latest</span><br><span class="line">COPY run-sentinel.sh /run-sentinel.sh</span><br><span class="line">COPY sentinel.conf /etc/sentinel.conf</span><br><span class="line">RUN chmod +x /run-sentinel.sh</span><br><span class="line">ENTRYPOINT ["/run-sentinel.sh"]</span><br></pre></td></tr></table></figure><p>Sentinel的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">port 26379</span><br><span class="line">dir /tmp</span><br><span class="line">sentinel monitor master redis-master 6379 2</span><br><span class="line">sentinel down-after-milliseconds master 30000</span><br><span class="line">sentinel parallel-syncs master 1</span><br><span class="line">sentinel failover-timeout master 180000</span><br></pre></td></tr></table></figure><p>run-sentinel.sh：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">exec redis-server /etc/sentinel.conf --sentinel</span><br></pre></td></tr></table></figure><p>构建出Sentinel的镜像文件，容器运行的方式类似于redis：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -d --name=sentinel_1 --link=redis_master:redis-master [build_sentinel_image]</span><br><span class="line"><span class="meta">$</span> docker run -d --name=sentinel_2 --link=redis_master:redis-master [build_sentinel_image]</span><br><span class="line"><span class="meta">$</span> docker run -d --name=sentinel_3 --link=redis_master:redis-master [build_sentinel_image]</span><br></pre></td></tr></table></figure><p>这下Sentinel的容器也搭建起来了，应用的结构图如下：</p><p><img src="https://pic1.zhimg.com/80/v2-998b4229612939a15a00ec1905698ce4_hd.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-安装-Redis&quot;&gt;&lt;a href=&quot;#Docker-安装-Redis&quot; class=&quot;headerlink&quot; title=&quot;Docker 安装 Redis&quot;&gt;&lt;/a&gt;Docker 安装 Redis&lt;/h1&gt;&lt;h5 id=&quot;下载镜像-创建运行容器&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://blog.milk4j.com/2018/05/25/%E3%80%9002%E3%80%91Docker%20%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.milk4j.com/2018/05/25/【02】Docker 使用/</id>
    <published>2018-05-25T14:26:13.069Z</published>
    <updated>2018-05-25T14:28:18.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h1><h4 id="一-docker使用"><a href="#一-docker使用" class="headerlink" title="一. docker使用"></a><strong>一. docker使用</strong></h4><h5 id="1-docker-ps-查看运行中的容器"><a href="#1-docker-ps-查看运行中的容器" class="headerlink" title="　　1. docker ps 查看运行中的容器"></a>　　1. docker ps 查看运行中的容器</h5><h5 id="2-docker-images-查看docker镜像"><a href="#2-docker-images-查看docker镜像" class="headerlink" title="　　2. docker images 查看docker镜像"></a>　　2. docker images 查看docker镜像</h5><h5 id="3-docker-rm-id-容器id-删除容器（容器id可以通过docker-ps查看，容器必须停止后才能删除）"><a href="#3-docker-rm-id-容器id-删除容器（容器id可以通过docker-ps查看，容器必须停止后才能删除）" class="headerlink" title="　　3. docker rm id(容器id)  删除容器（容器id可以通过docker ps查看，容器必须停止后才能删除）"></a>　　3. docker rm id(容器id)  删除容器（容器id可以通过docker ps查看，容器必须停止后才能删除）</h5><h6 id="3-1-删除全部的容器-docker-rm-docker-ps-a-q"><a href="#3-1-删除全部的容器-docker-rm-docker-ps-a-q" class="headerlink" title="　　　　3.1 删除全部的容器 docker rm docker ps -a -q"></a>　　　　3.1 删除全部的容器 docker rm <code>docker ps -a -q</code></h6><h5 id="4-docker-stop-id-容器id-停止容器运行"><a href="#4-docker-stop-id-容器id-停止容器运行" class="headerlink" title="　　4. docker stop  id(容器id) 停止容器运行"></a>　　4. docker stop  id(容器id) 停止容器运行</h5><h5 id="5-docker-rmi-id-镜像id-删除镜像"><a href="#5-docker-rmi-id-镜像id-删除镜像" class="headerlink" title="　　5. docker rmi  id(镜像id) 删除镜像"></a>　　5. docker rmi  id(镜像id) 删除镜像</h5><h5 id="6-docker-pull-ubuntu-16-04-镜像名称-版本号-下载镜像"><a href="#6-docker-pull-ubuntu-16-04-镜像名称-版本号-下载镜像" class="headerlink" title="　　6. docker pull ubuntu:16.04(镜像名称:版本号) 下载镜像"></a>　　6. docker pull ubuntu:16.04(镜像名称:版本号) 下载镜像</h5><h5 id="7-docker-run-it-ubuntu-16-04-创建并运行容器容器"><a href="#7-docker-run-it-ubuntu-16-04-创建并运行容器容器" class="headerlink" title="　　7. docker run -it ubuntu:16.04 创建并运行容器容器"></a>　　7. docker run -it ubuntu:16.04 创建并运行容器容器</h5><p>　　　　-t 表示在新容器内指定一个伪终端或终端</p><p>　　　　-i 表示允许我们对容器内的 (STDIN) 进行交互</p><p>　　　　-p 指定映射端口</p><p>　　　　-d 在后台运行容器并打印容器ID</p><h6 id="7-1-docker-run-dit-ubuntu-16-04-创建并后台运行容器"><a href="#7-1-docker-run-dit-ubuntu-16-04-创建并后台运行容器" class="headerlink" title="　　　　7.1 docker run -dit ubuntu:16.04 创建并后台运行容器"></a>　　　　7.1 docker run -dit ubuntu:16.04 创建并后台运行容器</h6><h6 id="7-2-docker-run-ditp-8080-8080（主机端口-容器端口）-ubuntu-16-04-创建并后台运行容器且映射容器的端口"><a href="#7-2-docker-run-ditp-8080-8080（主机端口-容器端口）-ubuntu-16-04-创建并后台运行容器且映射容器的端口" class="headerlink" title="　　　　7.2 docker run -ditp 8080:8080（主机端口:容器端口） ubuntu:16.04 创建并后台运行容器且映射容器的端口"></a>　　　　7.2 docker run -ditp 8080:8080（主机端口:容器端口） ubuntu:16.04 创建并后台运行容器且映射容器的端口</h6><h5 id="8-docker-attach-id-容器id-进入正在运行中的容器环境"><a href="#8-docker-attach-id-容器id-进入正在运行中的容器环境" class="headerlink" title="　　8. docker attach id(容器id) 进入正在运行中的容器环境"></a>　　8. docker attach id(容器id) 进入正在运行中的容器环境</h5><h5 id="9-退出容器"><a href="#9-退出容器" class="headerlink" title="　　9. 退出容器"></a>　　9. 退出容器</h5><h6 id="9-1-exit-直接退出容器并终止容器运行"><a href="#9-1-exit-直接退出容器并终止容器运行" class="headerlink" title="　　　　9.1 exit 直接退出容器并终止容器运行"></a>　　　　9.1 exit 直接退出容器并终止容器运行</h6><h6 id="9-2-ctrl-p-ctrl-q-（快捷键）-退出容器，但是不会终止容器运行"><a href="#9-2-ctrl-p-ctrl-q-（快捷键）-退出容器，但是不会终止容器运行" class="headerlink" title="　　　　9.2 [ctrl+p]+[ctrl+q]（快捷键） 退出容器，但是不会终止容器运行"></a>　　　　9.2 [ctrl+p]+[ctrl+q]（快捷键） 退出容器，但是不会终止容器运行</h6><h5 id="10-docker-commit-m’版本标识’-id-容器id-ubuntu-16-04-镜像与版本号-提交镜像且生成镜像（可以通过该命令把搭建好的容器打包成一个新的镜像或者覆盖原镜像（即是修改原镜像内容，生成的镜像名与版本号相同就可以直接覆盖））"><a href="#10-docker-commit-m’版本标识’-id-容器id-ubuntu-16-04-镜像与版本号-提交镜像且生成镜像（可以通过该命令把搭建好的容器打包成一个新的镜像或者覆盖原镜像（即是修改原镜像内容，生成的镜像名与版本号相同就可以直接覆盖））" class="headerlink" title="　　10. docker commit -m’版本标识’ id(容器id) ubuntu:16.04(镜像与版本号)   提交镜像且生成镜像（可以通过该命令把搭建好的容器打包成一个新的镜像或者覆盖原镜像（即是修改原镜像内容，生成的镜像名与版本号相同就可以直接覆盖））"></a>　　10. docker commit -m’版本标识’ id(容器id) ubuntu:16.04(镜像与版本号)   提交镜像且生成镜像（可以通过该命令把搭建好的容器打包成一个新的镜像或者覆盖原镜像（即是修改原镜像内容，生成的镜像名与版本号相同就可以直接覆盖））</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker使用&quot;&gt;&lt;a href=&quot;#Docker使用&quot; class=&quot;headerlink&quot; title=&quot;Docker使用&quot;&gt;&lt;/a&gt;Docker使用&lt;/h1&gt;&lt;h4 id=&quot;一-docker使用&quot;&gt;&lt;a href=&quot;#一-docker使用&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://blog.milk4j.com/2018/05/25/Docker%20%E5%AE%89%E8%A3%85%20nginx/"/>
    <id>https://blog.milk4j.com/2018/05/25/Docker 安装 nginx/</id>
    <published>2018-05-25T14:23:37.506Z</published>
    <updated>2018-06-08T18:00:03.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-安装-nginx"><a href="#Docker-安装-nginx" class="headerlink" title="Docker 安装 nginx"></a>Docker 安装 nginx</h1><h3 id="方式一：通过-pull-仓库镜像"><a href="#方式一：通过-pull-仓库镜像" class="headerlink" title="方式一：通过  pull 仓库镜像"></a>方式一：通过  pull 仓库镜像</h3><h4 id="一、下载镜像"><a href="#一、下载镜像" class="headerlink" title="一、下载镜像"></a>一、下载镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><h4 id="二、使用镜像创建容器"><a href="#二、使用镜像创建容器" class="headerlink" title="二、使用镜像创建容器"></a>二、使用镜像创建容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir -p ~/nginx/www ~/nginx/logs ~/nginx/conf</span><br><span class="line"><span class="meta">#</span>www目录将映射为nginx容器配置的虚拟目录</span><br><span class="line"><span class="meta">#</span>logs目录将映射为nginx容器的日志目录</span><br><span class="line"><span class="meta">#</span>conf目录里的配置文件将映射为nginx容器的配置文件</span><br><span class="line"><span class="meta">#</span>找一份默认的 nginx.conf 配置文件放在 conf 目录下,否则下面启动会报错</span><br><span class="line">docker run -p 80:80 --name web -v $PWD/www:/www -v  $PWD/logs:/wwwlogs -d nginx</span><br><span class="line">docker cp web:/etc/nginx/nginx.conf </span><br><span class="line"><span class="meta">#</span>删除容器后再运行下面的命令</span><br><span class="line">docker run -p 80:80 --name web --link=app1:app1 --link=app2:app2 --link=app3:app3 -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/conf/servers:/etc/nginx/conf.d -v $PWD/logs:/wwwlogs -d nginx</span><br><span class="line"><span class="meta">#</span>此时打开浏览器访问宿主机的 IP 就可看到 nginx 的界面了，安装启动成功</span><br><span class="line"><span class="meta">#</span>-d:让容器在后台运行。</span><br><span class="line"><span class="meta">#</span>-P:将容器内部使用的网络端口映射到我们使用的主机上。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>使用命令进入交互式终端</span><br><span class="line">docker exec -it mynginx /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>查看 IP</span><br><span class="line">ifconfig</span><br><span class="line"><span class="meta">#</span>发现找不到指令，需要安装 net-tools 工具依次执行，再执行 ifconfig</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install net-tools</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>在宿主机中查询容器的 IP，返回 json 串，里面包含了详细的容器信息，包括 IP ~</span><br><span class="line"><span class="meta">#</span>docker inspect [容器名|id]</span><br><span class="line">docker inspect mynginx</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li>-p 80:80：将容器的80端口映射到主机的80端口</li><li>–name  web：将容器命名为web</li><li>-v $PWD/www:/www：将主机中当前目录下的www挂载到容器的/www</li><li>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf：将主机中当前目录下的nginx.conf挂载到容器的/etc/nginx/nginx.conf</li><li>-v $PWD/logs:/wwwlogs：将主机中当前目录下的logs挂载到容器的/wwwlogs</li></ul><h3 id="方式二：通过-Dockerfile构建"><a href="#方式二：通过-Dockerfile构建" class="headerlink" title="方式二：通过 Dockerfile构建"></a>方式二：通过 Dockerfile构建</h3><h5 id="构建准备工作"><a href="#构建准备工作" class="headerlink" title="构建准备工作"></a>构建准备工作</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/nginx/www ~/nginx/logs ~/nginx/conf</span><br><span class="line">cd ~/nginx</span><br><span class="line">vi Dockerfile</span><br></pre></td></tr></table></figure><h5 id="在-Dockerfile-中输入如下内容："><a href="#在-Dockerfile-中输入如下内容：" class="headerlink" title="在 Dockerfile 中输入如下内容："></a>在 Dockerfile 中输入如下内容：</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#指定使用那个基础镜像</span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER ginkgo</span><br><span class="line">LABEL Discription="基于centos的nginx镜像" version="1.0"</span><br><span class="line">WORKDIR /usr/local/src</span><br><span class="line">RUN yum install -y wget</span><br><span class="line">RUN wget http://nginx.org/download/nginx-1.8.0.tar.gz</span><br><span class="line">RUN tar -zxvf nginx-1.8.0.tar.gz</span><br><span class="line">WORKDIR nginx-1.8.0</span><br><span class="line">#安装nginx所依赖的包</span><br><span class="line">RUN yum -y install gcc-c++</span><br><span class="line">RUN yum -y install pcre pcre-devel</span><br><span class="line">RUN yum -y install zlib zlib-devel</span><br><span class="line">RUN yum -y install openssl openssl-devel libssl-dev</span><br><span class="line">RUN ./configure</span><br><span class="line">RUN make</span><br><span class="line">RUN make install</span><br><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure><h5 id="通过Dockerfile-构建一个镜像"><a href="#通过Dockerfile-构建一个镜像" class="headerlink" title="通过Dockerfile 构建一个镜像"></a>通过Dockerfile 构建一个镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -t 镜像名 , "." 是Dockerfile 所在的目录，可以使用绝对路径</span><br><span class="line">docker build -t ginkgo/nginx .</span><br><span class="line"><span class="meta">#</span>查看镜像</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h5 id="构建-运行容器"><a href="#构建-运行容器" class="headerlink" title="构建|运行容器"></a>构建|运行容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>找一份默认的 nginx.conf 配置文件放在 ~/nginx/conf 目录下,否则下面启动会报错</span><br><span class="line">docker run -p 80:80 --name mynginx -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/logs:/wwwlogs -d nginx</span><br><span class="line"><span class="meta">#</span>此时打开浏览器访问宿主机的 IP 就可看到 nginx 的界面了，安装启动成功</span><br><span class="line"><span class="meta">#</span>-d:让容器在后台运行。</span><br><span class="line"><span class="meta">#</span>-P:将容器内部使用的网络端口映射到我们使用的主机上。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>使用命令进入交互式终端</span><br><span class="line">docker exec -it mynginx /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>查看 IP</span><br><span class="line">ifconfig</span><br><span class="line"><span class="meta">#</span>发现找不到指令，需要安装 net-tools 工具依次执行，再执行 ifconfig</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install net-tools</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>在宿主机中查询容器的 IP，返回 json 串，里面包含了详细的容器信息，包括 IP ~</span><br><span class="line">docker inspect [容器名|id]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-安装-nginx&quot;&gt;&lt;a href=&quot;#Docker-安装-nginx&quot; class=&quot;headerlink&quot; title=&quot;Docker 安装 nginx&quot;&gt;&lt;/a&gt;Docker 安装 nginx&lt;/h1&gt;&lt;h3 id=&quot;方式一：通过-pull-仓
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mac后端开发环境搭建</title>
    <link href="https://blog.milk4j.com/2018/04/14/Mac%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://blog.milk4j.com/2018/04/14/Mac后端开发环境搭建/</id>
    <published>2018-04-14T02:01:56.000Z</published>
    <updated>2018-10-24T09:53:47.494Z</updated>
    
    <content type="html"><![CDATA[<p><code>作为一个开发人员，选择 Mac 是一个非常好的选择，首先 Mac 是 Unix 的内核，支持 Unix 内核的命令，使用 Mac 能帮助我们熟悉 Unix 的操作命令</code></p><h2 id="1、HomeBrew"><a href="#1、HomeBrew" class="headerlink" title="1、HomeBrew"></a>1、HomeBrew</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p><code>Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。</code></p><p><code>简单点说，Homebrew 是以最简单、最灵活的方式来安装苹果公司在 MacOS 中不包含的 UNIX 工具。</code></p><h3 id="1-2-安装与卸载"><a href="#1-2-安装与卸载" class="headerlink" title="1.2 安装与卸载"></a>1.2 安装与卸载</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>打开终端，复制粘贴，大约1分钟左右，下载完成，过程中需要输入密码，其他无需任何操作：</p><p><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></p><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p>有安装就要有卸载，打开终端，复制粘贴： </p><p><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;</code></p><p>其实只用把上面安装的install换成uninstall就行了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>Homebrew 常用命令，下面以安装 git 为例（使用 brew 安装默认安装软件包的最新版本）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">安装任意软件包：</span><br><span class="line">brew install git</span><br><span class="line">卸载已安装软件包：</span><br><span class="line">brew uninstall git</span><br><span class="line">搜索可用软件包：</span><br><span class="line">brew search git</span><br><span class="line">查看任意软件包信息：</span><br><span class="line">brew info git</span><br><span class="line">更新已安装的软件包：</span><br><span class="line">brew upgrade git</span><br><span class="line">查看所有已安装的软件包：</span><br><span class="line">brew list</span><br><span class="line">更新 Homebrew：</span><br><span class="line">brew update</span><br><span class="line">查看 HomeBrew 版本：</span><br><span class="line">brew -v</span><br><span class="line">HomeBrew 帮助信息：</span><br><span class="line">brew -h</span><br></pre></td></tr></table></figure><p>使用 <code>brew -h</code> 看下官方帮助：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew -h</span></span><br><span class="line">Example usage:</span><br><span class="line">  brew search [TEXT|/REGEX/]</span><br><span class="line">  brew info [FORMULA...]</span><br><span class="line">  brew install FORMULA...</span><br><span class="line">  brew update</span><br><span class="line">  brew upgrade [FORMULA...]</span><br><span class="line">  brew uninstall FORMULA...</span><br><span class="line">  brew list [FORMULA...]</span><br><span class="line"></span><br><span class="line">Troubleshooting:</span><br><span class="line">  brew config</span><br><span class="line">  brew doctor</span><br><span class="line">  brew install --verbose --debug FORMULA</span><br><span class="line"></span><br><span class="line">Contributing:</span><br><span class="line">  brew create [URL [--no-fetch]]</span><br><span class="line">  brew edit [FORMULA...]</span><br><span class="line"></span><br><span class="line">Further help:</span><br><span class="line">  brew commands</span><br><span class="line">  brew help [COMMAND]</span><br><span class="line">  man brew</span><br><span class="line">  https://docs.brew.sh</span><br></pre></td></tr></table></figure><h4 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h4><p>在<code>Mac OS X 10.11</code>系统以后，<code>/usr/local/</code>等系统目录下的文件读写是需要系统root权限的，以往的Homebrew安装如果没有指定安装路径，会默认安装在这些需要系统root用户读写权限的目录下，导致有些指令需要添加sudo前缀来执行，比如升级Homebrew需要：<code>sudo brew update</code></p><p><strong>推荐:</strong>   安装Homebrew时对安装路径进行指定，直接安装在不需要系统root用户授权就可以自由读写的目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby &lt;install path&gt; -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><p>下面是我的 HomeBrew 的版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew -v</span></span><br><span class="line">Homebrew 1.6.0</span><br><span class="line">Homebrew/homebrew-core (no git repository)</span><br></pre></td></tr></table></figure><p>默认安装的所有的命令都在<code>/usr/local/bin</code>目录下，安装文件都在<code>/usr/local/Cellar</code>下，对应的配置文件都在<code>/usr/local/etc</code>下</p><h3 id="1-3-Cakebrew"><a href="#1-3-Cakebrew" class="headerlink" title="1.3 Cakebrew"></a>1.3 Cakebrew</h3><p>Cakebrew 是 HomeBrew 的 GUI 版本，提供图形化的方式安装和管理软件包，安装方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install cakebrew</span><br></pre></td></tr></table></figure><h3 id="1-4-homebrew-cask"><a href="#1-4-homebrew-cask" class="headerlink" title="1.4  homebrew-cask"></a>1.4  homebrew-cask</h3><p>homebrew-cask安装常用软件，比在网上下载安装文件安装的优势在于：<br>（1）节省下载安装包的过程，一行命令即可安装<br>（2）一些在网上搜不到安装文件的软件也可以通过这种方法安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap phinze/homebrew-cask</span><br><span class="line">brew install brew-cask</span><br></pre></td></tr></table></figure><p>使用方法：将上面的brew换成brew cask即可，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install qq</span><br></pre></td></tr></table></figure><p>使用 brew cask 安装常用的软件：</p><p>brew cask 搜索地址 <a href="https://caskroom.github.io/search" target="_blank" rel="noopener">https://caskroom.github.io/search</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">brew cask install yy</span><br><span class="line">brew cask install qq</span><br><span class="line">brew cask install dash # 帮助文档</span><br><span class="line">brew cask install atom</span><br><span class="line">brew cask install sequel-pro # mysql可视化工具</span><br><span class="line">brew cask install sourcetree # git可视化工具</span><br><span class="line">brew cask install neteasemusic # 网易云音乐</span><br><span class="line">brew cask install android-file-transfer # android 传输工具</span><br><span class="line">brew cask install android-studio</span><br><span class="line">brew cask install intellij-idea</span><br><span class="line">brew cask install visual-studio-code</span><br><span class="line">brew cask install mockplus # 比较不错的画原型工具</span><br><span class="line">brew cask install alfred # 小红帽</span><br><span class="line">brew cask install the-unarchiver # 压缩工具</span><br><span class="line">brew cask install thunder # 迅雷</span><br><span class="line">brew cask install mplayerx # 播放器</span><br><span class="line">brew cask install iterm2 # mac上最好用的终端</span><br><span class="line">brew cask install cd-to # 当前目录在终端显示</span><br><span class="line">brew cask install duet # ipad做外接显示器</span><br><span class="line">brew cask install ckb # 海盗船机械键盘驱动</span><br><span class="line">brew cask install shadowsocksx # 翻墙工具</span><br><span class="line">brew cask install firefox # 火狐</span><br><span class="line">brew cask install foxmail # 邮箱客户端</span><br><span class="line">brew cask install rdm # redis 客户端</span><br><span class="line">brew cask install typora # markdown工具</span><br><span class="line">brew cask install macdown</span><br><span class="line">brew cask install cyberduck # ftp工具</span><br><span class="line">brew cask install bearychat</span><br></pre></td></tr></table></figure><h2 id="2、iTerm2"><a href="#2、iTerm2" class="headerlink" title="2、iTerm2"></a>2、iTerm2</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>ITERM2 是 MAC 下最好的终端工具。直接去<a href="https://www.iterm2.com/" target="_blank" rel="noopener">官网</a>下载安装包安装即可使用。</p><h3 id="2-2-iTerm2-常用快捷键"><a href="#2-2-iTerm2-常用快捷键" class="headerlink" title="2.2  iTerm2 常用快捷键"></a>2.2  iTerm2 常用快捷键</h3><ul><li>切换 tab：⌘+← ，⌘+→  ，⌘+{  ， ⌘+} ，⌘+数字直接定位到该 tab</li><li>新建 tab：⌘+t</li><li>顺序切换 pane：⌘+[  ， ⌘+]</li><li>按方向切换 pane：⌘+Option+方向键</li><li>切分屏幕：⌘+d 水平切分，⌘+Shift+d 垂直切分</li><li>智能查找，支持正则查找：⌘+f</li></ul><h2 id="3、安装OH-MY-ZSH"><a href="#3、安装OH-MY-ZSH" class="headerlink" title="3、安装OH MY ZSH"></a>3、安装OH MY ZSH</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>ZSH 是一种Shell指令集，Mac 自带 ZSH 的安装。但 Oh my zsh 可以让你能更简便的配置 ZSH。 安装方式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure><p>等待安装完成即可</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>设置 zsh 为系统的默认的 shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h3 id="更改zsh主题"><a href="#更改zsh主题" class="headerlink" title="更改zsh主题"></a>更改zsh主题</h3><p>编辑 <code>~/.zshrc</code> ，将文本中的 ZSH_THEME 修改为如下（个人推荐主题：ys）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME="ys"</span><br></pre></td></tr></table></figure><p>注：主题文件在 <code>~/.oh-my-zsh/themes</code> 目录</p><h2 id="4、安装JDK"><a href="#4、安装JDK" class="headerlink" title="4、安装JDK"></a>4、安装JDK</h2><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><p>通过 HomeBrew 安装 JDK</p><p>安装 jdk8 <code>brew cask info java8</code></p><p>安装 jdk9 <code>brew cask info java9</code></p><p><em>也可以通过<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">官网</a>下载安装包安装</em></p><p>上述两个文件安装完成后，执行下述命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo "alias setJdk9='export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk9.0.4.jdk/Contents/Home'" &gt;&gt; ~/.zshrc</span><br><span class="line">echo "alias setJdk8='export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home'" &gt;&gt; ~/.zshrc</span><br><span class="line">echo "export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home"  &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><p>这样在命令行中默认设置当前环境变量为 <strong>JAVA 8</strong> , 当我们需要切换到 <strong>JAVA 9</strong> 时只需在命令行中执行命令 <strong>setJdk9</strong> 即可 。</p><h2 id="5、安装-Maven"><a href="#5、安装-Maven" class="headerlink" title="5、安装 Maven"></a>5、安装 Maven</h2><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><p>Maven 是Java生态中用来构建项目的工具。通过brew安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install maven</span><br></pre></td></tr></table></figure><p>等待安装完成后即可</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>在命令行中输入下述命令验证MAVEN是否正确安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mvn -v</span></span><br><span class="line">Apache Maven 3.5.3 (3383c37e1f9e9b3bc3df5050c29c8aff9f295297; 2018-02-25T03:49:05+08:00)</span><br><span class="line">Maven home: /usr/local/Cellar/maven/3.5.3/libexec</span><br><span class="line">Java version: 1.8.0_161, vendor: Oracle Corporation</span><br><span class="line">Java home: /Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre</span><br><span class="line">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class="line">OS name: "mac os x", version: "10.13.4", arch: "x86_64", family: "mac"</span><br></pre></td></tr></table></figure><p>如果有以上输出内容即标识安装完成</p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>在 ~/.m2 目录下创建 settings.xml 文件，使用阿里云的 maven 仓库，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span><br><span class="line">          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">          xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;pluginGroups&gt;&lt;/pluginGroups&gt;</span><br><span class="line">    &lt;proxies&gt;&lt;/proxies&gt;</span><br><span class="line">    &lt;servers&gt;&lt;/servers&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;mirrors&gt;</span><br><span class="line">        &lt;mirror&gt;</span><br><span class="line">            &lt;id&gt;nexus-aliyun&lt;/id&gt;</span><br><span class="line">            &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">            &lt;name&gt;Nexus aliyun&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">        &lt;/mirror&gt;</span><br><span class="line">    &lt;/mirrors&gt;</span><br><span class="line"></span><br><span class="line">    &lt;profiles&gt;</span><br><span class="line">        &lt;profile&gt;</span><br><span class="line">            &lt;id&gt;JDK-1.8&lt;/id&gt;</span><br><span class="line">            &lt;activation&gt;</span><br><span class="line">                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">                &lt;jdk&gt;1.8&lt;/jdk&gt;</span><br><span class="line">            &lt;/activation&gt;</span><br><span class="line">            &lt;properties&gt;</span><br><span class="line">                &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">                &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">                &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;</span><br><span class="line">            &lt;/properties&gt;</span><br><span class="line">        &lt;/profile&gt;</span><br><span class="line">    &lt;/profiles&gt;</span><br><span class="line"></span><br><span class="line">    &lt;activeProfiles&gt;</span><br><span class="line">        &lt;activeProfile&gt;JDK-1.8&lt;/activeProfile&gt;</span><br><span class="line">    &lt;/activeProfiles&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><h2 id="6、安装-Redis"><a href="#6、安装-Redis" class="headerlink" title="6、安装 Redis"></a>6、安装 Redis</h2><p>Redis 是一款基于数据结构的内存数据库。在我们的项目中被用作高速集中式缓存的解决方案。</p><h3 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure><p>等待安装完成即可</p><h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><p>在命令行中输入下述命令查看 reids 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ redis-server -v                                                                                                                                                                        </span><br><span class="line">Redis server v=2.8.3 sha=00000000:0 malloc=libc bits=64 build=e836d8ad888e21a1</span><br></pre></td></tr></table></figure><p>如果有以上输出内容即表示安装完成</p><h2 id="7、安装MySQL"><a href="#7、安装MySQL" class="headerlink" title="7、安装MySQL"></a>7、安装MySQL</h2><p>Mysql 是业界主流的开源关系型数据库。在我们项目中用以持久化用户及系统数据。</p><h3 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure><p>等待安装完成即可</p><h3 id="验证-2"><a href="#验证-2" class="headerlink" title="验证"></a>验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -V</span><br><span class="line">mysql  Ver 14.14 Distrib 5.6.15, for osx10.9 (x86_64) using  EditLine wrapper</span><br></pre></td></tr></table></figure><p>如果有以上输出内容即表示安装完成</p><h2 id="8、安装-ElasticSearch"><a href="#8、安装-ElasticSearch" class="headerlink" title="8、安装 ElasticSearch"></a>8、安装 ElasticSearch</h2><h3 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h3><p>Elasticsearch(简称ES）是一款基于lucene的全文搜索中间件。用于处理在大量文本中通过关键字搜索的场景（例如搜索商品、店铺等）。先在下面的链接中下载安装包（已集成相关插件）后解压, 将解压后的文件夹放到你想安装的目录。通过 brew 安装5.6版的 ES： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install elasticsearch@5.6</span><br></pre></td></tr></table></figure><h3 id="验证-3"><a href="#验证-3" class="headerlink" title="验证"></a>验证</h3><p>打开Iterm2，进入 elasticsearch的安装目录，执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./elasticsearch</span><br></pre></td></tr></table></figure><p>就可以看到启动日志了</p><h2 id="9、安装Nginx"><a href="#9、安装Nginx" class="headerlink" title="9、安装Nginx"></a>9、安装Nginx</h2><h3 id="安装-7"><a href="#安装-7" class="headerlink" title="安装"></a>安装</h3><p>Nginx 是一款轻量的高性能的Http与反向代理服务器。可被用作转发页面的请求至后台的Tomcat服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><p>等待安装完成即可</p><h3 id="验证-4"><a href="#验证-4" class="headerlink" title="验证"></a>验证</h3><p>在命令行中输入下述命令验证 <strong>Nginx</strong> 是否正确安装 (版本可能有所不同)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -V</span><br><span class="line">nginx version: nginx/1.6.3</span><br><span class="line">built by clang 6.1.0 (clang-602.0.49) (based on LLVM 3.6.0svn)</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/Cellar/nginx/1.6.3 --with-http_ssl_module --with-pcre --with-ipv6 --sbin-path=/usr/local/Cellar/nginx/1.6.3/bin/nginx --with-cc-opt=&apos;-I/usr/local/Cellar/pcre/8.36/include -I/usr/local/Cellar/openssl/1.0.2a-1/include&apos; --with-ld-opt=&apos;-L/usr/local/Cellar/pcre/8.36/lib -L/usr/local/Cellar/openssl/1.0.2a-1/lib&apos; --conf-path=/usr/local/etc/nginx/nginx.conf --pid-path=/usr/local/var/run/nginx.pid --lock-path=/usr/local/var/run/nginx.lock --http-client-body-temp-path=/usr/local/var/run/nginx/client_body_temp --http-proxy-temp-path=/usr/local/var/run/nginx/proxy_temp --http-fastcgi-temp-path=/usr/local/var/run/nginx/fastcgi_temp --http-uwsgi-temp-path=/usr/local/var/run/nginx/uwsgi_temp --http-scgi-temp-path=/usr/local/var/run/nginx/scgi_temp --http-log-path=/usr/local/var/log/nginx/access.log --error-log-path=/usr/local/var/log/nginx/error.log --with-http_gzip_static_module</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  2;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    gzip  on;</span><br><span class="line">    include servers/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10、安装-SEQUEL-PRO"><a href="#10、安装-SEQUEL-PRO" class="headerlink" title="10、安装 SEQUEL PRO"></a>10、安装 SEQUEL PRO</h2><p>Sequel Pro 是一款免费的  MySQL 的图形管理工具。</p><h3 id="安装-8"><a href="#安装-8" class="headerlink" title="安装"></a>安装</h3><p>在<a href="http://www.sequelpro.com/" target="_blank" rel="noopener">官网</a>可下载最新版本</p><h2 id="11、安装-IntelliJ-IDEA"><a href="#11、安装-IntelliJ-IDEA" class="headerlink" title="11、安装 IntelliJ IDEA"></a>11、安装 IntelliJ IDEA</h2><p>IntelliJ IDEA 业界公认为最好的 Java 开发工具之一</p><h3 id="安装-9"><a href="#安装-9" class="headerlink" title="安装"></a>安装</h3><p>【<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">官网</a>】，网上有很多破解方法，如果资金允许请支持正版</p><h2 id="12、安装-Zookeeper"><a href="#12、安装-Zookeeper" class="headerlink" title="12、安装 Zookeeper"></a>12、安装 Zookeeper</h2><h3 id="安装-10"><a href="#安装-10" class="headerlink" title="安装"></a>安装</h3><p>通过 brew 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zookeeper</span><br></pre></td></tr></table></figure><h2 id="13、LaunchRocket"><a href="#13、LaunchRocket" class="headerlink" title="13、LaunchRocket"></a>13、LaunchRocket</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>是一个帮助管理Homebrew安装的服务的软件，比如你使用brew安装的Mysql、Redis、MongoDB，LaunchRocket 可以管理这些服务的生命周期和启动方式（自启动、手动启动），传统方式需要使用命令行的命令，而使用LaunchRocket则可以在图形界面中进行管理。</p><h3 id="安装-11"><a href="#安装-11" class="headerlink" title="安装"></a>安装</h3><p>brew 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install launchrocket</span><br></pre></td></tr></table></figure><h2 id="14、一些其他实用软件"><a href="#14、一些其他实用软件" class="headerlink" title="14、一些其他实用软件"></a>14、一些其他实用软件</h2><h3 id="办公："><a href="#办公：" class="headerlink" title="办公："></a>办公：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">markdown 编辑器：BoostNote、Typora、YuWriter、Mou</span><br><span class="line">文本编辑工具：Atom、Visual Studio Code、Sublime</span><br><span class="line">时间/项目管理工具：2Do、OmniPlan、OmniForce</span><br><span class="line">流程图绘制：OmniGraffle</span><br><span class="line">脑图绘制：Xmind、MindNode、iThoughtsX</span><br><span class="line">文稿编辑/演示： KeyNote、Pages、Scrivener、Quiver</span><br><span class="line">状态栏图标隐藏工具：Bartender3</span><br><span class="line">压缩工具：Dr.Unarchiver</span><br><span class="line">技术文档离线阅读：Dash</span><br><span class="line">效率搜索：Alfred3</span><br><span class="line">数据库管理工具：Sequel Pro、Navicat、TablePlus</span><br><span class="line">Git 的 GUI 工具：SourceTree、GitUp</span><br><span class="line">REST 客户端：Postman、Paw</span><br><span class="line">Hosts 切换管理工具：SwitchHosts</span><br></pre></td></tr></table></figure><h3 id="上班必备"><a href="#上班必备" class="headerlink" title="上班必备"></a>上班必备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">社交软件：微信、QQ、钉钉</span><br><span class="line">上班听音乐：网易云音乐、酷我音乐、QQ音乐</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;作为一个开发人员，选择 Mac 是一个非常好的选择，首先 Mac 是 Unix 的内核，支持 Unix 内核的命令，使用 Mac 能帮助我们熟悉 Unix 的操作命令&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;1、HomeBrew&quot;&gt;&lt;a href=&quot;#1、Home
      
    
    </summary>
    
      <category term="mac" scheme="https://blog.milk4j.com/categories/mac/"/>
    
    
      <category term="mac" scheme="https://blog.milk4j.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Hexo基本使用</title>
    <link href="https://blog.milk4j.com/2015/04/21/Hexo%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.milk4j.com/2015/04/21/Hexo基本使用/</id>
    <published>2015-04-21T15:20:36.000Z</published>
    <updated>2018-10-22T02:18:04.969Z</updated>
    
    <content type="html"><![CDATA[<p>官网 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>| 文档 <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> | 社区 <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> | Git地址 <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>详细说明: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>详细说明: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>详细说明: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="发布到远程站点"><a href="#发布到远程站点" class="headerlink" title="发布到远程站点"></a>发布到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>详细说明: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;官网 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;| 文档 &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
      <category term="hexo" scheme="https://blog.milk4j.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://blog.milk4j.com/tags/hexo/"/>
    
  </entry>
  
</feed>
