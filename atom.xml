<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jerry Simple</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.milk4j.com/"/>
  <updated>2018-10-31T08:01:34.362Z</updated>
  <id>https://blog.milk4j.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot+H2+Mybatis单元测试整合和坑</title>
    <link href="https://blog.milk4j.com/2018/10/31/SpringBoot+H2+Mybatis%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%95%B4%E5%90%88%E5%92%8C%E5%9D%91/"/>
    <id>https://blog.milk4j.com/2018/10/31/SpringBoot+H2+Mybatis单元测试整合和坑/</id>
    <published>2018-10-31T05:59:00.000Z</published>
    <updated>2018-10-31T08:01:34.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:h2:mem:testdb;MODE=MYSQL;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span> <span class="comment"># 随便填</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span> <span class="comment"># 随便填</span></span><br><span class="line"><span class="attr">    schema:</span> <span class="attr">classpath:db/schema.sql</span> <span class="comment"># 建表SQL语句</span></span><br><span class="line"><span class="attr">    data:</span> <span class="attr">classpath:db/data.sql</span> <span class="comment"># 数据导入SQL语句</span></span><br><span class="line"><span class="attr">    platform:</span> <span class="string">h2</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>然后在<code>src/test/resources</code>文件夹下面新建一个文件夹<code>db</code> ,然后新建 <code>schema.sql</code>和<code>data.sql</code></p><ul><li>schema.sql 文件是建表语句,内容不能为空,否则报错</li><li>data.sql文件是数据导入的SQL语句,内容不能为空,否则报错</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p><strong>一、不支持表级别的Comment</strong></p><p>建表SQL如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `testTable` (</span><br><span class="line">  `Id` varchar(36) NOT NULL COMMENT &apos;序号&apos;,</span><br><span class="line">  `StartArea` int(11) DEFAULT NULL COMMENT &apos;出发区域&apos;,</span><br><span class="line">  `ArrivalArea` int(11) DEFAULT NULL COMMENT &apos;目的区域&apos;,</span><br><span class="line">  `Updater` varchar(36) DEFAULT NULL COMMENT &apos;更新人&apos;,</span><br><span class="line">  `UpdateTime` datetime DEFAULT NULL COMMENT &apos;更新时间&apos; ,</span><br><span class="line">  `Status` int(11) DEFAULT NULL COMMENT &apos;是否删除&apos;</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT= &apos;区域路线信息列表&apos; ;</span><br></pre></td></tr></table></figure><p>列名后面的COMMENT是支持的，但是最后面的 <code>ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT= &#39;区域路线信息列表&#39;</code>  中的COMMENT不支持。删掉后面的COMMENT即可。</p><p><strong>二、只支持最普通的引索结构,不支持BTREE引索结构</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `testTable` (</span><br><span class="line">  `Id` varchar(36) NOT NULL COMMENT &apos;序号&apos;,</span><br><span class="line">  `StartArea` int(11) DEFAULT NULL COMMENT &apos;出发区域&apos;,</span><br><span class="line">  `ArrivalArea` int(11) DEFAULT NULL COMMENT &apos;目的区域&apos;,</span><br><span class="line">  `Updater` varchar(36) DEFAULT NULL COMMENT &apos;更新人&apos;,</span><br><span class="line">  `UpdateTime` datetime DEFAULT NULL COMMENT &apos;更新时间&apos; ,</span><br><span class="line">  `Status` int(11) DEFAULT NULL COMMENT &apos;是否删除&apos;,</span><br><span class="line">  PRIMARY KEY (`Id`) USING BTREE,</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT= &apos;区域路线信息列表&apos; ;</span><br></pre></td></tr></table></figure><p>这种情况去掉 <code>USING BTREE</code> ,使用普通的引索就好了</p><p><strong>三、插入语句的单引号中的\’不支持</strong></p><p>有如下SQL，其中一个字段存的就是另一个SQL，里面带有单引号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `testTable`</span><br><span class="line">VALUES</span><br><span class="line">(</span><br><span class="line">&apos;1&apos;,</span><br><span class="line">&apos;部门权限&apos;,</span><br><span class="line">&apos;select d.UserId, a.RoleId,b.Id DynamicId,b.DeptName DynamicName,c.ConfigName,c.ConfigType,a.RootDynamicId\n  from RoleDataAuthority a\n left join Dept b on a.DynamicId=b.Id\n left join DataAuthorityConfig c on a.DataAuthorityConfigId=c.Id\n left join RoleUser d on d.RoleId=a.RoleId\n left join `User` e on d.UserId=e.Id\n where a.`Status`=1 and b.`Status`=1 and d.`Status`=1 and e.`Status`=1\n and c.Id=&#123;0&#125; and e.LoginName=\&apos;&#123;1&#125;\&apos;&apos;,</span><br><span class="line">&apos;1&apos;,</span><br><span class="line">&apos;2&apos;,</span><br><span class="line">NULL,</span><br><span class="line">NULL,</span><br><span class="line">&apos;2016-05-27 14:30:49&apos;,</span><br><span class="line">&apos;1&apos;,</span><br><span class="line">&apos;1&apos;,</span><br><span class="line">NULL,</span><br><span class="line">&apos;1&apos; </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>MySQL支持双引号包含字符串，可以把内容中包含的单引号改为双引号，但其他情况可能会涉及到业务调整。另外，不能将包含字符串的单引号改为双引号，H2会把双引号中的内容当做列名处理。</p><p><strong>四、H2 的 UNIQUE KEY是数据库级别的</strong></p><p>H2 的 UNIQUE KEY不是表级别的，MySQL是表级别的，转为H2后容易出现UNIQUE KEY重复。删掉UNIQUE KEY或者修改KEY的名称即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Maven依赖&quot;&gt;&lt;a href=&quot;#Maven依赖&quot; class=&quot;headerlink&quot; title=&quot;Maven依赖&quot;&gt;&lt;/a&gt;Maven依赖&lt;/h2&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
      <category term="spring boot" scheme="https://blog.milk4j.com/categories/spring-boot/"/>
    
    
      <category term="spring boot" scheme="https://blog.milk4j.com/tags/spring-boot/"/>
    
      <category term="h2" scheme="https://blog.milk4j.com/tags/h2/"/>
    
      <category term="单元测试" scheme="https://blog.milk4j.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装nginx</title>
    <link href="https://blog.milk4j.com/2018/10/22/Docker%E5%AE%89%E8%A3%85nginx/"/>
    <id>https://blog.milk4j.com/2018/10/22/Docker安装nginx/</id>
    <published>2018-10-22T04:34:08.000Z</published>
    <updated>2018-10-24T09:53:47.517Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方式一：通过-pull-仓库镜像"><a href="#方式一：通过-pull-仓库镜像" class="headerlink" title="方式一：通过  pull 仓库镜像"></a>方式一：通过  pull 仓库镜像</h3><h4 id="一、下载镜像"><a href="#一、下载镜像" class="headerlink" title="一、下载镜像"></a>一、下载镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><h4 id="二、使用镜像创建容器"><a href="#二、使用镜像创建容器" class="headerlink" title="二、使用镜像创建容器"></a>二、使用镜像创建容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir -p ~/nginx/www ~/nginx/logs ~/nginx/conf</span><br><span class="line"><span class="meta">#</span><span class="bash">www目录将映射为nginx容器配置的虚拟目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash">logs目录将映射为nginx容器的日志目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash">conf目录里的配置文件将映射为nginx容器的配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">找一份默认的 nginx.conf 配置文件放在 conf 目录下,否则下面启动会报错</span></span><br><span class="line">docker run -p 80:80 --name web -v $PWD/www:/www -v  $PWD/logs:/wwwlogs -d nginx</span><br><span class="line">docker cp web:/etc/nginx/nginx.conf </span><br><span class="line"><span class="meta">#</span><span class="bash">删除容器后再运行下面的命令</span></span><br><span class="line">docker run -p 80:80 --name web --link=app1:app1 --link=app2:app2 --link=app3:app3 -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/conf/servers:/etc/nginx/conf.d -v $PWD/logs:/wwwlogs -d nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">此时打开浏览器访问宿主机的 IP 就可看到 nginx 的界面了，安装启动成功</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-d:让容器在后台运行。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-P:将容器内部使用的网络端口映射到我们使用的主机上。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用命令进入交互式终端</span></span><br><span class="line">docker exec -it mynginx /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看 IP</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="meta">#</span><span class="bash">发现找不到指令，需要安装 net-tools 工具依次执行，再执行 ifconfig</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install net-tools</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在宿主机中查询容器的 IP，返回 json 串，里面包含了详细的容器信息，包括 IP ~</span></span><br><span class="line"><span class="meta">#</span><span class="bash">docker inspect [容器名|id]</span></span><br><span class="line">docker inspect mynginx</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li>-p 80:80：将容器的80端口映射到主机的80端口</li><li>–name  web：将容器命名为web</li><li>-v $PWD/www:/www：将主机中当前目录下的www挂载到容器的/www</li><li>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf：将主机中当前目录下的nginx.conf挂载到容器的/etc/nginx/nginx.conf</li><li>-v $PWD/logs:/wwwlogs：将主机中当前目录下的logs挂载到容器的/wwwlogs</li></ul><h3 id="方式二：通过-Dockerfile构建"><a href="#方式二：通过-Dockerfile构建" class="headerlink" title="方式二：通过 Dockerfile构建"></a>方式二：通过 Dockerfile构建</h3><h5 id="构建准备工作"><a href="#构建准备工作" class="headerlink" title="构建准备工作"></a>构建准备工作</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/nginx/www ~/nginx/logs ~/nginx/conf</span><br><span class="line">cd ~/nginx</span><br><span class="line">vi Dockerfile</span><br></pre></td></tr></table></figure><h5 id="在-Dockerfile-中输入如下内容："><a href="#在-Dockerfile-中输入如下内容：" class="headerlink" title="在 Dockerfile 中输入如下内容："></a>在 Dockerfile 中输入如下内容：</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#指定使用那个基础镜像</span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER ginkgo</span><br><span class="line">LABEL Discription="基于centos的nginx镜像" version="1.0"</span><br><span class="line">WORKDIR /usr/local/src</span><br><span class="line">RUN yum install -y wget</span><br><span class="line">RUN wget http://nginx.org/download/nginx-1.8.0.tar.gz</span><br><span class="line">RUN tar -zxvf nginx-1.8.0.tar.gz</span><br><span class="line">WORKDIR nginx-1.8.0</span><br><span class="line">#安装nginx所依赖的包</span><br><span class="line">RUN yum -y install gcc-c++</span><br><span class="line">RUN yum -y install pcre pcre-devel</span><br><span class="line">RUN yum -y install zlib zlib-devel</span><br><span class="line">RUN yum -y install openssl openssl-devel libssl-dev</span><br><span class="line">RUN ./configure</span><br><span class="line">RUN make</span><br><span class="line">RUN make install</span><br><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure><h5 id="通过Dockerfile-构建一个镜像"><a href="#通过Dockerfile-构建一个镜像" class="headerlink" title="通过Dockerfile 构建一个镜像"></a>通过Dockerfile 构建一个镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -t 镜像名 , <span class="string">"."</span> 是Dockerfile 所在的目录，可以使用绝对路径</span></span><br><span class="line">docker build -t ginkgo/nginx .</span><br><span class="line"><span class="meta">#</span><span class="bash">查看镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h5 id="构建-运行容器"><a href="#构建-运行容器" class="headerlink" title="构建|运行容器"></a>构建|运行容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">找一份默认的 nginx.conf 配置文件放在 ~/nginx/conf 目录下,否则下面启动会报错</span></span><br><span class="line">docker run -p 80:80 --name mynginx -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/logs:/wwwlogs -d nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">此时打开浏览器访问宿主机的 IP 就可看到 nginx 的界面了，安装启动成功</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-d:让容器在后台运行。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-P:将容器内部使用的网络端口映射到我们使用的主机上。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用命令进入交互式终端</span></span><br><span class="line">docker exec -it mynginx /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看 IP</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="meta">#</span><span class="bash">发现找不到指令，需要安装 net-tools 工具依次执行，再执行 ifconfig</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install net-tools</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在宿主机中查询容器的 IP，返回 json 串，里面包含了详细的容器信息，包括 IP ~</span></span><br><span class="line">docker inspect [容器名|id]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;方式一：通过-pull-仓库镜像&quot;&gt;&lt;a href=&quot;#方式一：通过-pull-仓库镜像&quot; class=&quot;headerlink&quot; title=&quot;方式一：通过  pull 仓库镜像&quot;&gt;&lt;/a&gt;方式一：通过  pull 仓库镜像&lt;/h3&gt;&lt;h4 id=&quot;一、下载镜像&quot;
      
    
    </summary>
    
      <category term="docker" scheme="https://blog.milk4j.com/categories/docker/"/>
    
    
      <category term="docker" scheme="https://blog.milk4j.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin在IntelliJ Idea中无法生成 spring-configuration-metadata.json 文件</title>
    <link href="https://blog.milk4j.com/2018/09/05/%E7%94%A8Kotlin%E5%9C%A8IntelliJ-Idea%E4%B8%AD%E6%97%A0%E6%B3%95%E7%94%9F%E6%88%90-spring-configuration-metadata-json-%E6%96%87%E4%BB%B6/"/>
    <id>https://blog.milk4j.com/2018/09/05/用Kotlin在IntelliJ-Idea中无法生成-spring-configuration-metadata-json-文件/</id>
    <published>2018-09-05T11:12:09.000Z</published>
    <updated>2018-10-31T01:32:08.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在百度搜索关键词,搜索到了 Stack Overflow 有相关问题</p><blockquote><p>spring-configuration-metadata.json file is not generated in IntelliJ Idea for Kotlin @ConfigurationProperties class</p></blockquote><p>原文链接: </p><blockquote><p><a href="https://stackoverflow.com/questions/37858833/spring-configuration-metadata-json-file-is-not-generated-in-intellij-idea-for-ko" target="_blank" rel="noopener">https://stackoverflow.com/questions/37858833/spring-configuration-metadata-json-file-is-not-generated-in-intellij-idea-for-ko</a></p></blockquote><p>按照里面的方法试了一下,失败了,然后继续百度,在spring-boot的官方文档中找到了相关线索, 直达链接:</p><blockquote><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-kotlin.html#boot-features-kotlin-configuration-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-kotlin.html#boot-features-kotlin-configuration-properties</a></p></blockquote><p>在spring官方文档中找到了kotlin的官方示例,链接地址:</p><blockquote><p><a href="https://kotlinlang.org/docs/reference/kapt.html#using-in-maven" target="_blank" rel="noopener">https://kotlinlang.org/docs/reference/kapt.html#using-in-maven</a></p></blockquote><p>下面是我参考上面的文档所得出来的可用方案</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="一、添加插件"><a href="#一、添加插件" class="headerlink" title="一、添加插件"></a>一、添加插件</h2><p>在<strong>pom</strong>文件中添加插件,没有写版本号是因为项目继承了<code>spring-boot-starter-parent</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">proc</span>&gt;</span>none<span class="tag">&lt;/<span class="name">proc</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Replacing default-compile as it is treated specially by maven --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>none<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Replacing default-testCompile as it is treated specially by maven --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-testCompile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>none<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>java-compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>java-test-compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kotlin-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jetbrains.kotlin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">args</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-Xjsr305=strict<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">args</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">compilerPlugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">compilerPlugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jvmTarget</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">jvmTarget</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>kapt<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>kapt<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sourceDirs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">sourceDir</span>&gt;</span>src/main/kotlin<span class="tag">&lt;/<span class="name">sourceDir</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">sourceDir</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">sourceDir</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">sourceDirs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- Specify your annotation processors here. --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">annotationProcessorPath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">annotationProcessorPath</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jetbrains.kotlin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kotlin-maven-allopen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、使用插件生成"><a href="#二、使用插件生成" class="headerlink" title="二、使用插件生成"></a>二、使用插件生成</h2><p>我之前也是使用了同样的插件,但是始终生成不出来文件,直到看了kotlin官方文档我才发现有这么一句话</p><p><img src="https://oscimg.oschina.net/oscnet/32fe5bfc75b9a2618f9da47c91e0873bb16.jpg" alt="img"></p><p>文字的意思是: </p><p><strong>“请注意，kapt仍然不支持IntelliJ IDEA自己的构建系统。当你想要重新运行注释处理器时，可以从“Maven Projects”工具栏启动构建。”</strong></p><p><strong>很是坑爹啊,你也不标红也不加粗是想怎样啊</strong></p><p>好了,那就按照他说的做吧, 双击下面的插件按钮就可以生产<code>spring-configuration-metadata.json</code>文件了</p><p><img src="https://oscimg.oschina.net/oscnet/3622930814489ff201bd0db85aa89873930.jpg" alt="img"></p><p><strong>参考文档:</strong></p><blockquote><p><a href="https://stackoverflow.com/questions/37858833/spring-configuration-metadata-json-file-is-not-generated-in-intellij-idea-for-ko" target="_blank" rel="noopener">https://stackoverflow.com/questions/37858833/spring-configuration-metadata-json-file-is-not-generated-in-intellij-idea-for-ko</a></p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-kotlin.html#boot-features-kotlin-configuration-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-kotlin.html#boot-features-kotlin-configuration-properties</a></p><p>&lt;<a href="https://kotlinlang.org/docs/reference/kapt.html" target="_blank" rel="noopener">https://kotlinlang.org/docs/reference/kapt.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;在百度搜索关键词,搜索到了 Stack Overflow 有相关问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;spring-
      
    
    </summary>
    
      <category term="kotlin" scheme="https://blog.milk4j.com/categories/kotlin/"/>
    
    
      <category term="spring boot" scheme="https://blog.milk4j.com/tags/spring-boot/"/>
    
      <category term="kotlin" scheme="https://blog.milk4j.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Docker基本使用</title>
    <link href="https://blog.milk4j.com/2018/06/22/Docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.milk4j.com/2018/06/22/Docker基本使用/</id>
    <published>2018-06-22T03:26:02.000Z</published>
    <updated>2018-10-22T11:13:20.539Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-docker使用"><a href="#一-docker使用" class="headerlink" title="一. docker使用"></a>一. docker使用</h4><h5 id="1-docker-ps-查看运行中的容器"><a href="#1-docker-ps-查看运行中的容器" class="headerlink" title="1. docker ps 查看运行中的容器"></a>1. docker ps 查看运行中的容器</h5><h5 id="2-docker-images-查看docker镜像"><a href="#2-docker-images-查看docker镜像" class="headerlink" title="2. docker images 查看docker镜像"></a>2. docker images 查看docker镜像</h5><h5 id="3-docker-rm-id-容器id-删除容器（容器id可以通过docker-ps查看，容器必须停止后才能删除）"><a href="#3-docker-rm-id-容器id-删除容器（容器id可以通过docker-ps查看，容器必须停止后才能删除）" class="headerlink" title="3. docker rm id(容器id)  删除容器（容器id可以通过docker ps查看，容器必须停止后才能删除）"></a>3. docker rm id(容器id)  删除容器（容器id可以通过docker ps查看，容器必须停止后才能删除）</h5><h6 id="3-1-删除全部的容器-docker-rm-docker-ps-a-q"><a href="#3-1-删除全部的容器-docker-rm-docker-ps-a-q" class="headerlink" title="3.1 删除全部的容器 docker rm docker ps -a -q"></a>3.1 删除全部的容器 docker rm <code>docker ps -a -q</code></h6><h5 id="4-docker-stop-id-容器id-停止容器运行"><a href="#4-docker-stop-id-容器id-停止容器运行" class="headerlink" title="4. docker stop  id(容器id) 停止容器运行"></a>4. docker stop  id(容器id) 停止容器运行</h5><h5 id="5-docker-rmi-id-镜像id-删除镜像"><a href="#5-docker-rmi-id-镜像id-删除镜像" class="headerlink" title="5. docker rmi  id(镜像id) 删除镜像"></a>5. docker rmi  id(镜像id) 删除镜像</h5><h5 id="6-docker-pull-ubuntu-16-04-镜像名称-版本号-下载镜像"><a href="#6-docker-pull-ubuntu-16-04-镜像名称-版本号-下载镜像" class="headerlink" title="6. docker pull ubuntu:16.04(镜像名称:版本号) 下载镜像"></a>6. docker pull ubuntu:16.04(镜像名称:版本号) 下载镜像</h5><h5 id="7-docker-run-it-ubuntu-16-04-创建并运行容器容器"><a href="#7-docker-run-it-ubuntu-16-04-创建并运行容器容器" class="headerlink" title="7. docker run -it ubuntu:16.04 创建并运行容器容器"></a>7. docker run -it ubuntu:16.04 创建并运行容器容器</h5><p>　　　　-t 表示在新容器内指定一个伪终端或终端</p><p>　　　　-i 表示允许我们对容器内的 (STDIN) 进行交互</p><p>　　　　-p 指定映射端口</p><p>　　　　-d 在后台运行容器并打印容器ID</p><h6 id="7-1-docker-run-dit-ubuntu-16-04-创建并后台运行容器"><a href="#7-1-docker-run-dit-ubuntu-16-04-创建并后台运行容器" class="headerlink" title="7.1 docker run -dit ubuntu:16.04 创建并后台运行容器"></a>7.1 docker run -dit ubuntu:16.04 创建并后台运行容器</h6><h6 id="7-2-docker-run-ditp-8080-8080（主机端口-容器端口）-ubuntu-16-04-创建并后台运行容器且映射容器的端口"><a href="#7-2-docker-run-ditp-8080-8080（主机端口-容器端口）-ubuntu-16-04-创建并后台运行容器且映射容器的端口" class="headerlink" title="7.2 docker run -ditp 8080:8080（主机端口:容器端口） ubuntu:16.04 创建并后台运行容器且映射容器的端口"></a>7.2 docker run -ditp 8080:8080（主机端口:容器端口） ubuntu:16.04 创建并后台运行容器且映射容器的端口</h6><h5 id="8-docker-attach-id-容器id-进入正在运行中的容器环境"><a href="#8-docker-attach-id-容器id-进入正在运行中的容器环境" class="headerlink" title="8. docker attach id(容器id) 进入正在运行中的容器环境"></a>8. docker attach id(容器id) 进入正在运行中的容器环境</h5><h5 id="9-退出容器"><a href="#9-退出容器" class="headerlink" title="9. 退出容器"></a>9. 退出容器</h5><h6 id="9-1-exit-直接退出容器并终止容器运行"><a href="#9-1-exit-直接退出容器并终止容器运行" class="headerlink" title="9.1 exit 直接退出容器并终止容器运行"></a>9.1 exit 直接退出容器并终止容器运行</h6><h6 id="9-2-ctrl-p-ctrl-q-（快捷键）-退出容器，但是不会终止容器运行"><a href="#9-2-ctrl-p-ctrl-q-（快捷键）-退出容器，但是不会终止容器运行" class="headerlink" title="9.2 [ctrl+p]+[ctrl+q]（快捷键） 退出容器，但是不会终止容器运行"></a>9.2 [ctrl+p]+[ctrl+q]（快捷键） 退出容器，但是不会终止容器运行</h6><h5 id="10-docker-commit-m’版本标识’-id-容器id-ubuntu-16-04-镜像与版本号-提交镜像且生成镜像（可以通过该命令把搭建好的容器打包成一个新的镜像或者覆盖原镜像（即是修改原镜像内容，生成的镜像名与版本号相同就可以直接覆盖））"><a href="#10-docker-commit-m’版本标识’-id-容器id-ubuntu-16-04-镜像与版本号-提交镜像且生成镜像（可以通过该命令把搭建好的容器打包成一个新的镜像或者覆盖原镜像（即是修改原镜像内容，生成的镜像名与版本号相同就可以直接覆盖））" class="headerlink" title="10. docker commit -m’版本标识’ id(容器id) ubuntu:16.04(镜像与版本号)   提交镜像且生成镜像（可以通过该命令把搭建好的容器打包成一个新的镜像或者覆盖原镜像（即是修改原镜像内容，生成的镜像名与版本号相同就可以直接覆盖））"></a>10. docker commit -m’版本标识’ id(容器id) ubuntu:16.04(镜像与版本号)   提交镜像且生成镜像（可以通过该命令把搭建好的容器打包成一个新的镜像或者覆盖原镜像（即是修改原镜像内容，生成的镜像名与版本号相同就可以直接覆盖））</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一-docker使用&quot;&gt;&lt;a href=&quot;#一-docker使用&quot; class=&quot;headerlink&quot; title=&quot;一. docker使用&quot;&gt;&lt;/a&gt;一. docker使用&lt;/h4&gt;&lt;h5 id=&quot;1-docker-ps-查看运行中的容器&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="docker" scheme="https://blog.milk4j.com/categories/docker/"/>
    
    
      <category term="docker" scheme="https://blog.milk4j.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch Rest 客户端使用(长文,待续...)</title>
    <link href="https://blog.milk4j.com/2018/06/20/ElasticSearch-Rest-%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.milk4j.com/2018/06/20/ElasticSearch-Rest-客户端使用/</id>
    <published>2018-06-20T12:36:39.000Z</published>
    <updated>2018-10-31T01:38:12.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>阅读文档须知,文档基于<code>Elasticsearch 6.x</code>,阅读要求,熟悉 <code>ElasticSearch</code> 的语法</p><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>高级客户端要求最低的 <code>java</code> 版本是1.8 ，它依赖 <code>Elasticsearch</code> 的核心工程，客户端的版本应该和 <code>Elasticsearch</code> 的版本保持一致，高级客户端和 <code>TransportClient</code>【TCP 连接客户端】 接受一样的请求参数，并且返回一样的响应结果，如果你想从 <code>TransportClient</code> 客户端迁移到 <code>REST</code> 客户端，请参考<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/6.3/java-rest-high-level-migration.html" target="_blank" rel="noopener">迁移手册</a></p><p>高级客户端保证能够与运行在相同主要版本和更高版本上的<code>Elasticsearch</code>节点进行通信。它不需要与通信的<code>Elasticsearch</code>节点处于相同的版本，因为它是向前兼容的，这意味着它支持与更高版本的<code>Elasticsearch</code>进行通信，而不是与其开发的版本进行通信。</p><p>6.0 客户端能够与任何6.x版本的 <code>Elasticsearch</code>节点通信，而6.1客户端肯定能够与6.1,6.2和任何更高版本的6.x版本通信，但在与老版的<code>Elasticsearch</code>节点通信时可能存在不兼容问题版本，例如6.1和6.0，6.1客户端为一些 <code>api</code> 添加了新的请求体字段支持，然而6.0节点却不支持。</p><p>建议在将<code>Elasticsearch</code>集群升级到新的主版本时升级高级客户端，因为<code>REST API</code>中断更改可能会导致意外结果，具体取决于请求所针对的节点，并且新添加的API仅支持新版本的客户端。一旦集群中的所有节点都升级到新的主版本，客户端应保持同步更新。</p><h3 id="Java-api-文档"><a href="#Java-api-文档" class="headerlink" title="Java api 文档"></a>Java api 文档</h3><p><a href="https://artifacts.elastic.co/javadoc/org/elasticsearch/client/elasticsearch-rest-high-level-client/6.3.1/index.html" target="_blank" rel="noopener">文档地址</a>：<code>&lt;https://artifacts.elastic.co/javadoc/org/elasticsearch/client/elasticsearch-rest-high-level-client/6.3.1/index.html&gt;</code></p><h3 id="maven-仓库"><a href="#maven-仓库" class="headerlink" title="maven 仓库"></a>maven 仓库</h3><p>高级Java REST客户端托管在 <a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.elasticsearch.client%22" target="_blank" rel="noopener">Maven Central上</a>。所需的最低Java版本是<code>1.8</code>。</p><p>高级REST客户端与Elasticsearch具有相同的发布周期。将版本替换为所需的客户端版本。</p><p>如果您正在寻找SNAPSHOT版本，可以通过<a href="https://snapshots.elastic.co/maven/" target="_blank" rel="noopener">https://snapshots.elastic.co/maven/</a>获取Elastic Maven Snapshot存储库。</p><h4 id="Maven-配置"><a href="#Maven-配置" class="headerlink" title="Maven 配置"></a>Maven 配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Gradel-配置"><a href="#Gradel-配置" class="headerlink" title="Gradel 配置"></a>Gradel 配置</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'org.elasticsearch.client:elasticsearch-rest-high-level-client:6.3.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>高级客户端依赖下面的组件及其传递依赖性：</p><ul><li>org.elasticsearch.client:elasticsearch-rest-client</li><li>org.elasticsearch:elasticsearch</li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>一个<code>RestHighLevelClient</code>实例需要一个<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/6.3/java-rest-low-usage-initialization.html" target="_blank" rel="noopener">低级客户端的Builder</a> 来构建如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">        RestClient.builder(</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9200</span>, <span class="string">"http"</span>),</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9201</span>, <span class="string">"http"</span>)));</span><br></pre></td></tr></table></figure><p>高级客户端将在内部创建用于执行请求的低级客户端，低级客户端基于框架提供的<code>builder</code>，并管理其生命周期。</p><p>高级客户端实例应该在不再需要时关闭，以便正确释放它使用的所有资源，以及底层的http客户端实例及其线程。这可以通过<code>close</code> 方法完成，该方法将关闭内部<code>RestClient</code>实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.close();</span><br></pre></td></tr></table></figure><h2 id="Document-API"><a href="#Document-API" class="headerlink" title="Document API"></a>Document API</h2><p>Java高级REST客户端支持以下文档API：</p><p>单文档API：</p><ul><li>index api - 索引API</li><li>get api - 获取API</li><li>delete api - 删除API</li><li>update api - 更新API</li></ul><p>多文档API</p><ul><li>bulk api - 批量操作 api</li><li>Multi-Get API - 批量获取 api</li></ul><h3 id="Index-API"><a href="#Index-API" class="headerlink" title="Index API"></a>Index API</h3><h4 id="Index-请求体"><a href="#Index-请求体" class="headerlink" title="Index 请求体"></a>Index 请求体</h4><p>一个引索请求需要下面的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IndexRequest request = <span class="keyword">new</span> IndexRequest(</span><br><span class="line">        <span class="string">"posts"</span>, <span class="comment">//index 名</span></span><br><span class="line">        <span class="string">"doc"</span>,  <span class="comment">//type 名</span></span><br><span class="line">        <span class="string">"1"</span>);   <span class="comment">//文档 ID</span></span><br><span class="line">String jsonString = <span class="string">"&#123;"</span> +</span><br><span class="line">        <span class="string">"\"user\":\"kimchy\","</span> +</span><br><span class="line">        <span class="string">"\"postDate\":\"2013-01-30\","</span> +</span><br><span class="line">        <span class="string">"\"message\":\"trying out Elasticsearch\""</span> +</span><br><span class="line">        <span class="string">"&#125;"</span>;</span><br><span class="line">request.source(jsonString, XContentType.JSON);<span class="comment">//设置 string 类型的文档source</span></span><br></pre></td></tr></table></figure><h4 id="构建文档-source-的方式"><a href="#构建文档-source-的方式" class="headerlink" title="构建文档 source 的方式"></a>构建文档 source 的方式</h4><p>除了<code>String</code>上面显示的示例之外，还可以以不同方式提供文档源 ：</p><p>方式一：以 <code>Map</code> 的方式提供的文档源，<code>Map</code>自动转换为<code>JSON</code>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; jsonMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">jsonMap.put(<span class="string">"user"</span>, <span class="string">"kimchy"</span>);</span><br><span class="line">jsonMap.put(<span class="string">"postDate"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">jsonMap.put(<span class="string">"message"</span>, <span class="string">"trying out Elasticsearch"</span>);</span><br><span class="line">IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .source(jsonMap);</span><br></pre></td></tr></table></figure><p>方式二：以<code>XContentBuilder</code>对象方式提供，<code>Elasticsearch</code>内置了<code>helper</code>生成<code>JSON</code>内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">XContentBuilder builder = XContentFactory.jsonBuilder();</span><br><span class="line">builder.startObject();</span><br><span class="line">&#123;</span><br><span class="line">    builder.field(<span class="string">"user"</span>, <span class="string">"kimchy"</span>);</span><br><span class="line">    builder.timeField(<span class="string">"postDate"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    builder.field(<span class="string">"message"</span>, <span class="string">"trying out Elasticsearch"</span>);</span><br><span class="line">&#125;</span><br><span class="line">builder.endObject();</span><br><span class="line">IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .source(builder);</span><br></pre></td></tr></table></figure><p>方式三：以键值对方式提供，转换为<code>JSON</code>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .source(<span class="string">"user"</span>, <span class="string">"kimchy"</span>,</span><br><span class="line">                <span class="string">"postDate"</span>, <span class="keyword">new</span> Date(),</span><br><span class="line">                <span class="string">"message"</span>, <span class="string">"trying out Elasticsearch"</span>);</span><br></pre></td></tr></table></figure><h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h4><p>可以选择以下参数：</p><ul><li>设置路由</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.routing(<span class="string">"routing"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置父文档</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.parent(<span class="string">"parent"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置超时时间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>));</span><br><span class="line">request.timeout(<span class="string">"1s"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置刷新策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.setRefreshPolicy(WriteRequest.RefreshPolicy.WAIT_UNTIL);</span><br><span class="line">request.setRefreshPolicy(<span class="string">"wait_for"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置版本</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.version(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li>设置版本类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.versionType(VersionType.EXTERNAL);</span><br></pre></td></tr></table></figure><ul><li>设置文档操作类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.opType(DocWriteRequest.OpType.CREATE); </span><br><span class="line">request.opType(<span class="string">"create"</span>);</span><br></pre></td></tr></table></figure><ul><li>文档执行之前，设置 <code>pipeline</code> 名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setPipeline(&quot;pipeline&quot;);</span><br></pre></td></tr></table></figure><h4 id="同步执行方式"><a href="#同步执行方式" class="headerlink" title="同步执行方式"></a>同步执行方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IndexResponse indexResponse = client.index(request);</span><br></pre></td></tr></table></figure><h4 id="异步执行方式"><a href="#异步执行方式" class="headerlink" title="异步执行方式"></a>异步执行方式</h4><p>索引请求的异步执行需要将<code>IndexRequest</code> 实例和<code>ActionListener</code>实例都传递给异步方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ActionListener&lt;IndexResponse&gt; listener = <span class="keyword">new</span> ActionListener&lt;IndexResponse&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(IndexResponse indexResponse)</span> </span>&#123;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">IndexResponse indexResponse = client.index(request);</span><br></pre></td></tr></table></figure><p>异步方法不会阻塞并立即返回。一旦完成，如果执行成功，则使用该方法<code>ActionListener</code>回调<code>onResponse</code>，如果失败则回调<code>onFailure</code>方法。</p><h4 id="引索响应结果"><a href="#引索响应结果" class="headerlink" title="引索响应结果"></a>引索响应结果</h4><p>返回的<code>IndexResponse</code>包含了有关已执行操作的信息，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">String index = indexResponse.getIndex();</span><br><span class="line">String type = indexResponse.getType();</span><br><span class="line">String id = indexResponse.getId();</span><br><span class="line"><span class="keyword">long</span> version = indexResponse.getVersion();</span><br><span class="line"><span class="keyword">if</span> (indexResponse.getResult() == DocWriteResponse.Result.CREATED) &#123;</span><br><span class="line">    <span class="comment">//创建文档操作</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (indexResponse.getResult() == DocWriteResponse.Result.UPDATED) &#123;</span><br><span class="line">    <span class="comment">//更新文档操作</span></span><br><span class="line">&#125;</span><br><span class="line">ReplicationResponse.ShardInfo shardInfo = indexResponse.getShardInfo();</span><br><span class="line"><span class="keyword">if</span> (shardInfo.getTotal() != shardInfo.getSuccessful()) &#123;</span><br><span class="line">    <span class="comment">//处理成功分片数小于总分片数的情况</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (shardInfo.getFailed() &gt; <span class="number">0</span>) &#123;<span class="comment">//理潜在的失败情况</span></span><br><span class="line">    <span class="keyword">for</span> (ReplicationResponse.ShardInfo.Failure failure : shardInfo.getFailures()) &#123;</span><br><span class="line">        String reason = failure.reason(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在文档版本冲突，则会抛出<code>ElasticsearchException</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .source(<span class="string">"field"</span>, <span class="string">"value"</span>)</span><br><span class="line">        .version(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    IndexResponse response = client.index(request);</span><br><span class="line">&#125; <span class="keyword">catch</span>(ElasticsearchException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.status() == RestStatus.CONFLICT) &#123;</span><br><span class="line">        <span class="comment">//引发的异常表示返回了版本冲突错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果已存在具有相同索引，类型和ID的文档，<code>opType</code>设置为<code>create</code>也会发生冲突：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .source(<span class="string">"field"</span>, <span class="string">"value"</span>)</span><br><span class="line">        .opType(DocWriteRequest.OpType.CREATE);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    IndexResponse response = client.index(request);</span><br><span class="line">&#125; <span class="keyword">catch</span>(ElasticsearchException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.status() == RestStatus.CONFLICT) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Get-API"><a href="#Get-API" class="headerlink" title="Get API"></a>Get API</h3><h4 id="Get-请求体"><a href="#Get-请求体" class="headerlink" title="Get 请求体"></a>Get 请求体</h4><p>构建 GetRequest 的参数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">"posts"</span>,<span class="string">"doc"</span>,<span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><h4 id="可选参数-1"><a href="#可选参数-1" class="headerlink" title="可选参数"></a>可选参数</h4><ul><li>设置返回响应不包含任何字段，默认情况下返回响应包含该所有字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.fetchSourceContext(FetchSourceContext.DO_NOT_FETCH_SOURCE);</span><br></pre></td></tr></table></figure><ul><li>配置返回响应包含哪些字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String[] includes = <span class="keyword">new</span> String[]&#123;<span class="string">"message"</span>, <span class="string">"*Date"</span>&#125;;</span><br><span class="line">String[] excludes = Strings.EMPTY_ARRAY;</span><br><span class="line">FetchSourceContext fetchSourceContext =</span><br><span class="line">        <span class="keyword">new</span> FetchSourceContext(<span class="keyword">true</span>, includes, excludes);</span><br><span class="line">request.fetchSourceContext(fetchSourceContext);</span><br></pre></td></tr></table></figure><ul><li>设置返回响应不包含哪些字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String[] includes = Strings.EMPTY_ARRAY;</span><br><span class="line">String[] excludes = <span class="keyword">new</span> String[]&#123;<span class="string">"message"</span>&#125;;</span><br><span class="line">FetchSourceContext fetchSourceContext =</span><br><span class="line">        <span class="keyword">new</span> FetchSourceContext(<span class="keyword">true</span>, includes, excludes);</span><br><span class="line">request.fetchSourceContext(fetchSourceContext);</span><br></pre></td></tr></table></figure><ul><li>设置检索哪些存储字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.storedFields(<span class="string">"message"</span>); <span class="comment">//为特定存储字段配置检索 (要求在映射中单独存储字段)</span></span><br><span class="line">GetResponse getResponse = client.get(request);</span><br><span class="line">String message = getResponse.getField(<span class="string">"message"</span>).getValue();<span class="comment">//获取message存储的值 (要求将字段单独存储在映射中)</span></span><br></pre></td></tr></table></figure><ul><li>设置路由</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.routing(<span class="string">"routing"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置父文档</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.parent(<span class="string">"parent"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置偏好</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.preference(<span class="string">"preference"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置实时标识，默认 <code>true</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.realtime(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><ul><li>设置每次获取文档之前是否执行刷新操作，默认 <code>false</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.refresh(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><ul><li>设置版本号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.version(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li>设置版本类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.versionType(VersionType.EXTERNAL);</span><br></pre></td></tr></table></figure><h4 id="同步执行"><a href="#同步执行" class="headerlink" title="同步执行"></a>同步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetResponse getResponse = client.get(getRequest);</span><br></pre></td></tr></table></figure><h4 id="异步执行"><a href="#异步执行" class="headerlink" title="异步执行"></a>异步执行</h4><p><code>get</code>请求的异步执行需要将GetRequest 实例和ActionListener实例都传递给异步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ActionListener&lt;GetResponse&gt; listener = <span class="keyword">new</span> ActionListener&lt;GetResponse&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(GetResponse getResponse)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">GetResponse getResponse = client.get(getRequest);</span><br></pre></td></tr></table></figure><p>异步方法不会阻塞并立即返回。一旦完成，如果执行成功，则使用该方法<code>ActionListener</code>回调<code>onResponse</code>，如果失败则回调<code>onFailure</code>方法。</p><h4 id="响应结果"><a href="#响应结果" class="headerlink" title="响应结果"></a>响应结果</h4><p>返回的<code>IndexResponse</code>包含了有关已执行操作的信息，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String index = getResponse.getIndex();</span><br><span class="line">String type = getResponse.getType();</span><br><span class="line">String id = getResponse.getId();</span><br><span class="line"><span class="keyword">if</span> (getResponse.isExists()) &#123;</span><br><span class="line">    <span class="keyword">long</span> version = getResponse.getVersion();</span><br><span class="line">    String sourceAsString = getResponse.getSourceAsString();        </span><br><span class="line">    Map&lt;String, Object&gt; sourceAsMap = getResponse.getSourceAsMap(); </span><br><span class="line">    <span class="keyword">byte</span>[] sourceAsBytes = getResponse.getSourceAsBytes();          </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//处理未找到文档的方案。注意，虽然返回的响应具有404状态代码，但他会返回一个有效GetResponse而不是抛出异常。此类响应不包含任何文档字段，而且isExists方法返回false。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当对不存在的索引(<code>index</code>)执行get请求时，响应会有<code>404</code>状态代码，但是会抛出<code>ElasticsearchException</code>，需要按如下方式处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">"does_not_exist"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    GetResponse getResponse = client.get(request);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ElasticsearchException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.status() == RestStatus.NOT_FOUND) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果请求特定版本的文档，并且现有文档具有不同的版本号，则会引发版本冲突：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>).version(<span class="number">2</span>);</span><br><span class="line">    GetResponse getResponse = client.get(request);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ElasticsearchException exception) &#123;</span><br><span class="line">    <span class="keyword">if</span> (exception.status() == RestStatus.CONFLICT) &#123;</span><br><span class="line">        <span class="comment">//处理版本冲突</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Exists-API"><a href="#Exists-API" class="headerlink" title="Exists API"></a>Exists API</h3><p>如果文档存在就返回 <code>true</code>，否则返回 <code>false</code></p><h4 id="Exists-Request"><a href="#Exists-Request" class="headerlink" title="Exists Request"></a>Exists Request</h4><p>它的<code>GetRequest</code>就像<em>Get API</em>一样。支持所有可选参数 。由于<code>exists()</code>只返回<code>true</code>或<code>false</code>，所有建议关闭返回<code>_source</code>和任何存储的字段，以便请求更加轻量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GetRequest getRequest = <span class="keyword">new</span> GetRequest(</span><br><span class="line">    <span class="string">"posts"</span>, </span><br><span class="line">    <span class="string">"doc"</span>,   </span><br><span class="line">    <span class="string">"1"</span>);    </span><br><span class="line">getRequest.fetchSourceContext(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">false</span>)); <span class="comment">//不返回_source</span></span><br><span class="line">getRequest.storedFields(<span class="string">"_none_"</span>);  <span class="comment">//不返回存储字段</span></span><br></pre></td></tr></table></figure><h4 id="同步执行-1"><a href="#同步执行-1" class="headerlink" title="同步执行"></a>同步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> exists = client.exists(getRequest);</span><br></pre></td></tr></table></figure><h4 id="异步执行-1"><a href="#异步执行-1" class="headerlink" title="异步执行"></a>异步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ActionListener&lt;Boolean&gt; listener = <span class="keyword">new</span> ActionListener&lt;Boolean&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Boolean exists)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">client.existsAsync(getRequest, listener);</span><br></pre></td></tr></table></figure><h3 id="Delete-API"><a href="#Delete-API" class="headerlink" title="Delete API"></a>Delete API</h3><h4 id="Delete-Request"><a href="#Delete-Request" class="headerlink" title="Delete Request"></a>Delete Request</h4><p><code>DeleteRequest</code> 参数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">"posts"</span>,<span class="string">"doc"</span>,<span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><h4 id="可选参数-2"><a href="#可选参数-2" class="headerlink" title="可选参数"></a>可选参数</h4><ul><li>设置路由</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.routing(<span class="string">"routing"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置父文档</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.parent(<span class="string">"parent"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置超时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.timeout(TimeValue.timeValueMinutes(<span class="number">2</span>)); </span><br><span class="line">request.timeout(<span class="string">"2m"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置刷新策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.setRefreshPolicy(WriteRequest.RefreshPolicy.WAIT_UNTIL); </span><br><span class="line">request.setRefreshPolicy(<span class="string">"wait_for"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置版本号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.version(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li>设置版本类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.versionType(VersionType.EXTERNAL);</span><br></pre></td></tr></table></figure><h4 id="同步执行-2"><a href="#同步执行-2" class="headerlink" title="同步执行"></a>同步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DeleteResponse deleteResponse = client.delete(request);</span><br></pre></td></tr></table></figure><h4 id="异步执行-2"><a href="#异步执行-2" class="headerlink" title="异步执行"></a>异步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ActionListener&lt;DeleteResponse&gt; listener = <span class="keyword">new</span> ActionListener&lt;DeleteResponse&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(DeleteResponse deleteResponse)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">client.deleteAsync(request, listener);</span><br></pre></td></tr></table></figure><h4 id="Delete-Response"><a href="#Delete-Response" class="headerlink" title="Delete Response"></a>Delete Response</h4><p>返回的<code>DeleteResponse</code>包含了有关已执行操作的信息，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String index = deleteResponse.getIndex();</span><br><span class="line">String type = deleteResponse.getType();</span><br><span class="line">String id = deleteResponse.getId();</span><br><span class="line"><span class="keyword">long</span> version = deleteResponse.getVersion();</span><br><span class="line">ReplicationResponse.ShardInfo shardInfo = deleteResponse.getShardInfo();</span><br><span class="line"><span class="keyword">if</span> (shardInfo.getTotal() != shardInfo.getSuccessful()) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (shardInfo.getFailed() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (ReplicationResponse.ShardInfo.Failure failure : shardInfo.getFailures()) &#123;</span><br><span class="line">        String reason = failure.reason(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它还可以检查文档是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"does_not_exist"</span>);</span><br><span class="line">DeleteResponse deleteResponse = client.delete(request);</span><br><span class="line"><span class="keyword">if</span> (deleteResponse.getResult() == DocWriteResponse.Result.NOT_FOUND) &#123;</span><br><span class="line">    <span class="comment">//如果找不到要删除的文档</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果请求的文档版本冲突，会抛<code>ElasticsearchException</code>异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>).version(<span class="number">2</span>);</span><br><span class="line">    DeleteResponse deleteResponse = client.delete(request);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ElasticsearchException exception) &#123;</span><br><span class="line">    <span class="keyword">if</span> (exception.status() == RestStatus.CONFLICT) &#123;</span><br><span class="line">        <span class="comment">//引发的异常表示返回了版本冲突错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Update-API"><a href="#Update-API" class="headerlink" title="Update API"></a>Update API</h3><h4 id="UpdateRequest"><a href="#UpdateRequest" class="headerlink" title="UpdateRequest"></a>UpdateRequest</h4><p>参数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><p><code>Update API</code>允许使用脚本或传递部分文档来更新现有文档。</p><h4 id="使用脚本更新文档"><a href="#使用脚本更新文档" class="headerlink" title="使用脚本更新文档"></a>使用脚本更新文档</h4><p>使用内联脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; parameters = singletonMap(<span class="string">"count"</span>, <span class="number">4</span>); <span class="comment">//使用Map对象作为脚本参数</span></span><br><span class="line">Script inline = <span class="keyword">new</span> Script(ScriptType.INLINE, <span class="string">"painless"</span>,</span><br><span class="line">        <span class="string">"ctx._source.field += params.count"</span>, parameters);  <span class="comment">//使用painless语言和提供的参数创建内联脚本</span></span><br><span class="line">UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>);</span><br><span class="line">request.script(inline); <span class="comment">//将脚本设置为更新请求</span></span><br></pre></td></tr></table></figure><p>或者使用存储在es 中的脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Script stored =<span class="keyword">new</span> Script(ScriptType.STORED, <span class="keyword">null</span>, <span class="string">"increment-field"</span>, parameters);<span class="comment">//使用存储在 es 中的painless脚本，脚本名为increment-field</span></span><br><span class="line">request.script(stored);</span><br></pre></td></tr></table></figure><h4 id="传递部分文档作为参数来更新文档"><a href="#传递部分文档作为参数来更新文档" class="headerlink" title="传递部分文档作为参数来更新文档"></a>传递部分文档作为参数来更新文档</h4><p>当使用部分文档来更新现有的文档时，部分文档将与现有文档合并。</p><p>部分文档可以以不同方式提供：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>);</span><br><span class="line">String jsonString = <span class="string">"&#123;"</span> +</span><br><span class="line">        <span class="string">"\"updated\":\"2017-01-01\","</span> +</span><br><span class="line">        <span class="string">"\"reason\":\"daily update\""</span> +</span><br><span class="line">        <span class="string">"&#125;"</span>;</span><br><span class="line">request.doc(jsonString, XContentType.JSON);<span class="comment">//用json格式的字符串作为部分文档源</span></span><br></pre></td></tr></table></figure><p>以 <code>Map</code> 提供部分文档源，会被自动转化成 <code>json</code> 格式，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; jsonMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">jsonMap.put(<span class="string">"updated"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">jsonMap.put(<span class="string">"reason"</span>, <span class="string">"daily update"</span>);</span><br><span class="line">UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .doc(jsonMap);</span><br></pre></td></tr></table></figure><p>用<code>XContentBuilder</code>对象作为部分文档源，<code>Elasticsearch</code>内置的 helpers 会自动将它转化为 json 文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">XContentBuilder builder = XContentFactory.jsonBuilder();</span><br><span class="line">builder.startObject();</span><br><span class="line">&#123;</span><br><span class="line">    builder.timeField(<span class="string">"updated"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    builder.field(<span class="string">"reason"</span>, <span class="string">"daily update"</span>);</span><br><span class="line">&#125;</span><br><span class="line">builder.endObject();</span><br><span class="line">UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .doc(builder);</span><br></pre></td></tr></table></figure><p> 使用键值对作为部分文档源，他会被转换成 json 文本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .doc(<span class="string">"updated"</span>, <span class="keyword">new</span> Date(),</span><br><span class="line">             <span class="string">"reason"</span>, <span class="string">"daily update"</span>);</span><br></pre></td></tr></table></figure><h4 id="Upserts"><a href="#Upserts" class="headerlink" title="Upserts"></a>Upserts</h4><p>如果文档尚不存在，则可以使用以下<code>upsert</code>方法来将它作为新文档插入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String jsonString = <span class="string">"&#123;\"created\":\"2017-01-01\"&#125;"</span>;</span><br><span class="line">request.upsert(jsonString, XContentType.JSON);</span><br></pre></td></tr></table></figure><p>和部分文档更新一样，<code>upsert</code> 方法接受<code>String</code>, <code>Map</code>, <code>XContentBuilder</code> or 键值对作为入参</p><h4 id="可选参数-3"><a href="#可选参数-3" class="headerlink" title="可选参数"></a>可选参数</h4><ul><li>设置路由</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.routing(<span class="string">"routing"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置父文档</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.parent(<span class="string">"parent"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置超时时间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>)); </span><br><span class="line">request.timeout(<span class="string">"1s"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置刷新策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.setRefreshPolicy(WriteRequest.RefreshPolicy.WAIT_UNTIL); </span><br><span class="line">request.setRefreshPolicy(<span class="string">"wait_for"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置重试更新操作的次数</li></ul><p>如果要更新的文档已在更新操作的get和indexing阶段之间的另一个操作更改，则重试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.retryOnConflict(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>设置是否获取新文档内容，默认 <code>false</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.fetchSource(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><ul><li>指定返回哪些字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] includes = <span class="keyword">new</span> String[]&#123;<span class="string">"updated"</span>, <span class="string">"r*"</span>&#125;;<span class="comment">//正则匹配</span></span><br><span class="line">String[] excludes = Strings.EMPTY_ARRAY;</span><br><span class="line">request.fetchSource(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">true</span>, includes, excludes));</span><br></pre></td></tr></table></figure><ul><li>指定不返回哪些字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] includes = <span class="keyword">new</span> String[]&#123;<span class="string">"updated"</span>, <span class="string">"r*"</span>&#125;;</span><br><span class="line">String[] excludes = Strings.EMPTY_ARRAY;</span><br><span class="line">request.fetchSource(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">true</span>, includes, excludes));</span><br></pre></td></tr></table></figure><ul><li>设置文档版本号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.version(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li>设置是否启用noop 检测</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.detectNoop(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><ul><li>指示脚本必须运行，无论文档是否存在，即如果文档尚不存在，脚本将负责创建文档</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.scriptedUpsert(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><ul><li>如果文档不存在，则表明必须将部分文档用作upsert文档</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.docAsUpsert(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><ul><li>设置在执行更新操作之前必须处于活动状态的分片副本数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.waitForActiveShards(<span class="number">2</span>); </span><br><span class="line">request.waitForActiveShards(ActiveShardCount.ALL);</span><br></pre></td></tr></table></figure><h4 id="同步执行-3"><a href="#同步执行-3" class="headerlink" title="同步执行"></a>同步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UpdateResponse updateResponse = client.update(request);</span><br></pre></td></tr></table></figure><h4 id="异步执行-3"><a href="#异步执行-3" class="headerlink" title="异步执行"></a>异步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">client.updateAsync(request, <span class="keyword">new</span> ActionListener&lt;UpdateResponse&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(UpdateResponse updateResponse)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="UpdateResponse"><a href="#UpdateResponse" class="headerlink" title="UpdateResponse"></a>UpdateResponse</h4><p>返回的<code>UpdateResponse</code>包含了有关已执行操作的信息，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String index = updateResponse.getIndex();</span><br><span class="line">String type = updateResponse.getType();</span><br><span class="line">String id = updateResponse.getId();</span><br><span class="line"><span class="keyword">long</span> version = updateResponse.getVersion();</span><br><span class="line"><span class="keyword">if</span> (updateResponse.getResult() == DocWriteResponse.Result.CREATED) &#123;</span><br><span class="line">    <span class="comment">//首次创建文档（upsert）</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (updateResponse.getResult() == DocWriteResponse.Result.UPDATED) &#123;</span><br><span class="line">    <span class="comment">//文档更新</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (updateResponse.getResult() == DocWriteResponse.Result.DELETED) &#123;</span><br><span class="line">    <span class="comment">//文档更新</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (updateResponse.getResult() == DocWriteResponse.Result.NOOP) &#123;</span><br><span class="line">    <span class="comment">//文档未受更新影响，即未对文档执行任何操作（noop）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UpdateRequest</code> 通过<code>fetchSource</code>方法启用获取文档功能时，响应包含更新文档的来源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GetResult result = updateResponse.getGetResult(); </span><br><span class="line"><span class="keyword">if</span> (result.isExists()) &#123;</span><br><span class="line">    String sourceAsString = result.sourceAsString(); </span><br><span class="line">    Map&lt;String, Object&gt; sourceAsMap = result.sourceAsMap(); </span><br><span class="line">    <span class="keyword">byte</span>[] sourceAsBytes = result.source(); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以检查分片失败：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ReplicationResponse.ShardInfo shardInfo = updateResponse.getShardInfo();</span><br><span class="line"><span class="keyword">if</span> (shardInfo.getTotal() != shardInfo.getSuccessful()) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (shardInfo.getFailed() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (ReplicationResponse.ShardInfo.Failure failure : shardInfo.getFailures()) &#123;</span><br><span class="line">        String reason = failure.reason(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当对一个不存在的文档执行<code>UpdateRequest</code>时，响应具有<code>404</code>状态代码，会抛出<code>ElasticsearchException</code>，需要按如下方式处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"type"</span>, <span class="string">"does_not_exist"</span>)</span><br><span class="line">        .doc(<span class="string">"field"</span>, <span class="string">"value"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    UpdateResponse updateResponse = client.update(request);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ElasticsearchException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.status() == RestStatus.NOT_FOUND) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果发生文档版本冲突，会抛出异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">        .doc(<span class="string">"field"</span>, <span class="string">"value"</span>)</span><br><span class="line">        .version(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    UpdateResponse updateResponse = client.update(request);</span><br><span class="line">&#125; <span class="keyword">catch</span>(ElasticsearchException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.status() == RestStatus.CONFLICT) &#123;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bulk-API"><a href="#Bulk-API" class="headerlink" title="Bulk API"></a>Bulk API</h3><h4 id="BulkRequest"><a href="#BulkRequest" class="headerlink" title="BulkRequest"></a>BulkRequest</h4><p><code>BulkRequest</code>可用于使用单个请求执行多个索引，更新和/或删除操作</p><p>它要求至少将一个操作添加到批量请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BulkRequest request = <span class="keyword">new</span> BulkRequest(); </span><br><span class="line">request.add(<span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)  </span><br><span class="line">        .source(XContentType.JSON,<span class="string">"field"</span>, <span class="string">"foo"</span>));</span><br><span class="line">request.add(<span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"2"</span>)  </span><br><span class="line">        .source(XContentType.JSON,<span class="string">"field"</span>, <span class="string">"bar"</span>));</span><br><span class="line">request.add(<span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"3"</span>)  </span><br><span class="line">        .source(XContentType.JSON,<span class="string">"field"</span>, <span class="string">"baz"</span>));</span><br></pre></td></tr></table></figure><p>并且可以添加不同的操作类型<code>BulkRequest</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BulkRequest request = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">request.add(<span class="keyword">new</span> DeleteRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"3"</span>)); </span><br><span class="line">request.add(<span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"2"</span>) </span><br><span class="line">        .doc(XContentType.JSON,<span class="string">"other"</span>, <span class="string">"test"</span>));</span><br><span class="line">request.add(<span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"4"</span>)  </span><br><span class="line">        .source(XContentType.JSON,<span class="string">"field"</span>, <span class="string">"baz"</span>));</span><br></pre></td></tr></table></figure><h4 id="可选参数-4"><a href="#可选参数-4" class="headerlink" title="可选参数"></a>可选参数</h4><ul><li>设置超时时间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.timeout(TimeValue.timeValueMinutes(<span class="number">2</span>)); </span><br><span class="line">request.timeout(<span class="string">"2m"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置刷新策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.timeout(TimeValue.timeValueMinutes(<span class="number">2</span>)); </span><br><span class="line">request.timeout(<span class="string">"2m"</span>);</span><br></pre></td></tr></table></figure><ul><li>设置在索引/更新/删除操作之前必须处于活动状态的分片副本数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.waitForActiveShards(<span class="number">2</span>); </span><br><span class="line">request.waitForActiveShards(ActiveShardCount.ALL); <span class="comment">//可选ActiveShardCount.ALL、 ActiveShardCount.ONE 、 ActiveShardCount.DEFAULT</span></span><br></pre></td></tr></table></figure><h4 id="同步执行-4"><a href="#同步执行-4" class="headerlink" title="同步执行"></a>同步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BulkResponse bulkResponse = client.bulk(request);</span><br></pre></td></tr></table></figure><h4 id="异步执行-4"><a href="#异步执行-4" class="headerlink" title="异步执行"></a>异步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ActionListener&lt;BulkResponse&gt; listener = <span class="keyword">new</span> ActionListener&lt;BulkResponse&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(BulkResponse bulkResponse)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">client.bulkAsync(request, listener);</span><br></pre></td></tr></table></figure><h4 id="BulkResponse"><a href="#BulkResponse" class="headerlink" title="BulkResponse"></a>BulkResponse</h4><p>响应结果，允许迭代每个结果，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (BulkItemResponse bulkItemResponse : bulkResponse) &#123; </span><br><span class="line">    <span class="comment">//可以是IndexResponse、UpdateResponse、DeleteResponse，他们可以全部被视为DocWriteResponse实例</span></span><br><span class="line">    DocWriteResponse itemResponse = bulkItemResponse.getResponse(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bulkItemResponse.getOpType() == DocWriteRequest.OpType.INDEX</span><br><span class="line">            || bulkItemResponse.getOpType() == DocWriteRequest.OpType.CREATE) &#123; </span><br><span class="line">        IndexResponse indexResponse = (IndexResponse) itemResponse;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bulkItemResponse.getOpType() == DocWriteRequest.OpType.UPDATE) &#123; </span><br><span class="line">        UpdateResponse updateResponse = (UpdateResponse) itemResponse;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bulkItemResponse.getOpType() == DocWriteRequest.OpType.DELETE) &#123; </span><br><span class="line">        DeleteResponse deleteResponse = (DeleteResponse) itemResponse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>批量响应提供了一种快速检查一个或多个操作是否失败的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（bulkResponse.hasFailures（））&#123; </span><br><span class="line"><span class="comment">//如果至少有一个操作失败，则返回true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，有必要迭代所有操作结果，以检查操作是否失败，如果是，则获取相应的失败信息： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>（BulkItemResponse bulkItemResponse：bulkResponse）&#123;</span><br><span class="line">    <span class="keyword">if</span>（bulkItemResponse.isFailed（））&#123; </span><br><span class="line">        BulkItemResponse.Failure failure = bulkItemResponse.getFailure（）; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="批量处理器"><a href="#批量处理器" class="headerlink" title="批量处理器"></a>批量处理器</h4><p><code>BulkProcessor</code>提供了一个工具类简化操作，它可以透明地执行添加到 <code>processor</code> 中的 <code>index</code>/<code>update</code>/<code>delete</code>操作。</p><p>为了执行请求，<code>BulkProcessor</code>需要以下组件：</p><ul><li><p><code>RestHighLevelClient</code></p><p>此客户端用于执行<code>BulkRequest</code> 和获取<code>BulkResponse</code></p></li><li><p><code>BulkProcessor.Listener</code></p><p>在每次<code>BulkRequest</code>执行之前、之后或<code>BulkRequest</code>失败时调用器监听</p></li></ul><p>然后该<code>BulkProcessor.builder</code>方法可用于构建新的<code>BulkProcessor</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">BulkProcessor.Listener listener = <span class="keyword">new</span> BulkProcessor.Listener() &#123; </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeBulk</span><span class="params">(<span class="keyword">long</span> executionId, BulkRequest request)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterBulk</span><span class="params">(<span class="keyword">long</span> executionId, BulkRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            BulkResponse response)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterBulk</span><span class="params">(<span class="keyword">long</span> executionId, BulkRequest request, Throwable failure)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">BulkProcessor bulkProcessor =</span><br><span class="line">        BulkProcessor.builder(client::bulkAsync, listener).build();</span><br></pre></td></tr></table></figure><p><code>BulkProcessor.Builder</code>提供了方法来配置<code>BulkProcessor</code>处理请求的行为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BulkProcessor.Builder builder = BulkProcessor.builder(client::bulkAsync, listener);</span><br><span class="line">builder.setBulkActions(<span class="number">500</span>);<span class="comment">//根据当前添加的操作数设置何时刷新新的批量请求（默认为1000，使用-1禁用它） </span></span><br><span class="line">builder.setBulkSize(<span class="keyword">new</span> ByteSizeValue(<span class="number">1L</span>, ByteSizeUnit.MB)); <span class="comment">//根据当前添加的操作内容大小设置何时刷新新的批量请求（默认为5Mb，使用-1禁用它）</span></span><br><span class="line">builder.setConcurrentRequests(<span class="number">0</span>); <span class="comment">//设置允许执行的并发请求数（默认为1，使用0只允许执行单个请求）</span></span><br><span class="line">builder.setFlushInterval(TimeValue.timeValueSeconds(<span class="number">10L</span>)); <span class="comment">//BulkRequest如果间隔超过，则 设置刷新间隔刷新任何挂起（默认为未设置）</span></span><br><span class="line">builder.setBackoffPolicy(BackoffPolicy</span><br><span class="line">        .constantBackoff(TimeValue.timeValueSeconds(<span class="number">1L</span>), <span class="number">3</span>));<span class="comment">//设置一个最初等待1秒的常量重试策略，最多重试3次。见BackoffPolicy.noBackoff()、BackoffPolicy.constantBackoff()、BackoffPolicy.exponentialBackoff() 提供更多的选择</span></span><br></pre></td></tr></table></figure><p>一旦<code>BulkProcessor</code>被创建，请求可以被添加到<code>processor</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">IndexRequest one = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>).</span><br><span class="line">        source(XContentType.JSON, <span class="string">"title"</span>,</span><br><span class="line">                <span class="string">"In which order are my Elasticsearch queries executed?"</span>);</span><br><span class="line">IndexRequest two = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"2"</span>)</span><br><span class="line">        .source(XContentType.JSON, <span class="string">"title"</span>,</span><br><span class="line">                <span class="string">"Current status and upcoming changes in Elasticsearch"</span>);</span><br><span class="line">IndexRequest three = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"3"</span>)</span><br><span class="line">        .source(XContentType.JSON, <span class="string">"title"</span>,</span><br><span class="line">                <span class="string">"The Future of Federated Search in Elasticsearch"</span>);</span><br><span class="line"></span><br><span class="line">bulkProcessor.add(one);</span><br><span class="line">bulkProcessor.add(two);</span><br><span class="line">bulkProcessor.add(three);</span><br></pre></td></tr></table></figure><p><code>BulkProcessor</code> 执行所有的请求，并且为每次的 <code>BulkRequest</code> 回调<code>BulkProcessor.Listener</code>，监听器提供了访问 <code>BulkRequest</code> 和 <code>BulkResponse</code> 的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">BulkProcessor.Listener listener = <span class="keyword">new</span> BulkProcessor.Listener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeBulk</span><span class="params">(<span class="keyword">long</span> executionId, BulkRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numberOfActions = request.numberOfActions(); </span><br><span class="line">        logger.debug(<span class="string">"Executing bulk [&#123;&#125;] with &#123;&#125; requests"</span>,</span><br><span class="line">                executionId, numberOfActions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterBulk</span><span class="params">(<span class="keyword">long</span> executionId, BulkRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            BulkResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (response.hasFailures()) &#123; </span><br><span class="line">            logger.warn(<span class="string">"Bulk [&#123;&#125;] executed with failures"</span>, executionId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">"Bulk [&#123;&#125;] completed in &#123;&#125; milliseconds"</span>,</span><br><span class="line">                    executionId, response.getTook().getMillis());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterBulk</span><span class="params">(<span class="keyword">long</span> executionId, BulkRequest request, Throwable failure)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行失败后调用</span></span><br><span class="line">        logger.error(<span class="string">"Failed to execute bulk"</span>, failure); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>将所有请求添加到<code>BulkProcessor</code>后，需要关闭其实例，有两种关闭方式。</p><p>该<code>awaitClose()</code>方法可用于等待所有请求都已处理或指定的等待时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> terminated = bulkProcessor.awaitClose（<span class="number">30L</span>，TimeUnit.SECONDS）;<span class="comment">//true：如果所有批量请求都已完成，false：在所有批量请求完成之前等待时间已过</span></span><br></pre></td></tr></table></figure><p><code>close()</code>方法可用于立即关闭<code>BulkProcessor</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bulkProcessor.close（）;</span><br></pre></td></tr></table></figure><p>两种方法在关闭处理器之前刷新已经添加到处理器的请求，并且禁止添加新请求</p><h3 id="Multi-Get-API"><a href="#Multi-Get-API" class="headerlink" title="Multi-Get API"></a>Multi-Get API</h3><p><code>multiGet API</code> 可以在单个请求中执行多个 <code>get</code> 请求</p><h4 id="Multi-Get-Request"><a href="#Multi-Get-Request" class="headerlink" title="Multi-Get Request"></a>Multi-Get Request</h4><p>获取一个 <code>MultiGetRequest</code>实例，然后添加多个 <code>MultiGetRequest.Item</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MultiGetRequest request = <span class="keyword">new</span> MultiGetRequest();</span><br><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(</span><br><span class="line">    <span class="string">"index"</span>,         </span><br><span class="line">    <span class="string">"type"</span>,          </span><br><span class="line">    <span class="string">"example_id"</span>));  </span><br><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"another_id"</span>));</span><br></pre></td></tr></table></figure><h4 id="可选参数-5"><a href="#可选参数-5" class="headerlink" title="可选参数"></a>可选参数</h4><p><code>multiGet</code>和 <code>get Api</code>支持相同的可选参数. 你可以在 <code>Item</code>上设置可选参数:</p><ul><li>设置不返回任何文档，默认返回文档</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"example_id"</span>)</span><br><span class="line">            .fetchSourceContext(FetchSourceContext.DO_NOT_FETCH_SOURCE)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><ul><li>设置返回文档的哪些字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String[] includes = <span class="keyword">new</span> String[] &#123;<span class="string">"foo"</span>, <span class="string">"*r"</span>&#125;;</span><br><span class="line">String[] excludes = Strings.EMPTY_ARRAY;</span><br><span class="line">FetchSourceContext fetchSourceContext =</span><br><span class="line">        <span class="keyword">new</span> FetchSourceContext(<span class="keyword">true</span>, includes, excludes);</span><br><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"example_id"</span>)</span><br><span class="line">    .fetchSourceContext(fetchSourceContext));</span><br></pre></td></tr></table></figure><ul><li>设置不返回文档的哪些字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String[] includes = Strings.EMPTY_ARRAY;</span><br><span class="line">String[] excludes = <span class="keyword">new</span> String[] &#123;<span class="string">"foo"</span>, <span class="string">"*r"</span>&#125;;</span><br><span class="line">FetchSourceContext fetchSourceContext =</span><br><span class="line">        <span class="keyword">new</span> FetchSourceContext(<span class="keyword">true</span>, includes, excludes);</span><br><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"example_id"</span>)</span><br><span class="line">    .fetchSourceContext(fetchSourceContext));</span><br></pre></td></tr></table></figure><ul><li>配置返回指定的存储字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"example_id"</span>)</span><br><span class="line">    .storedFields(<span class="string">"foo"</span>));  <span class="comment">//设置返回存储字段 foo</span></span><br><span class="line">MultiGetResponse response = client.multiGet(request);</span><br><span class="line">MultiGetItemResponse item = response.getResponses()[<span class="number">0</span>];</span><br><span class="line">String value = item.getResponse().getField(<span class="string">"foo"</span>).getValue(); <span class="comment">//获取存储字段foo的值</span></span><br></pre></td></tr></table></figure><ul><li>其他可选参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"with_routing"</span>)</span><br><span class="line">    .routing(<span class="string">"some_routing"</span>));<span class="comment">//设置路由       </span></span><br><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"with_parent"</span>)</span><br><span class="line">    .parent(<span class="string">"some_parent"</span>));<span class="comment">//设置父文档       </span></span><br><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"with_version"</span>)</span><br><span class="line">    .versionType(VersionType.EXTERNAL)<span class="comment">//设置文档版本类型</span></span><br><span class="line">    .version(<span class="number">10123L</span>)); <span class="comment">//设置版本号</span></span><br><span class="line">request.preference(<span class="string">"some_preference"</span>);  <span class="comment">//设置偏好</span></span><br><span class="line">request.realtime(<span class="keyword">false</span>); <span class="comment">//设置实时标识，默认为 true       </span></span><br><span class="line">request.refresh(<span class="keyword">true</span>); <span class="comment">//获取文档之前执行刷新操作，默认 false</span></span><br></pre></td></tr></table></figure><h4 id="同步执行-5"><a href="#同步执行-5" class="headerlink" title="同步执行"></a>同步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MultiGetResponse response = client.multiGet(request);</span><br></pre></td></tr></table></figure><h4 id="异步执行-5"><a href="#异步执行-5" class="headerlink" title="异步执行"></a>异步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ActionListener&lt;MultiGetResponse&gt; listener = <span class="keyword">new</span> ActionListener&lt;MultiGetResponse&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(MultiGetResponse response)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">MultiGetResponse response = client.multiGet(request);</span><br></pre></td></tr></table></figure><h4 id="MultiGetResponse"><a href="#MultiGetResponse" class="headerlink" title="MultiGetResponse"></a>MultiGetResponse</h4><p>返回的<code>MultiGetResponse</code>通过<code>getResponses</code>方法可以获取一个 <code>MultiGetItemResponse</code> 列表，列表中的响应与请求的顺序相同，如果 <code>get</code> 成功 <code>MultiGetItemResponse</code>包含一个 <code>GetResponse</code>，如果它失败了会包含一个<code>MultiGetResponse.Failure</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MultiGetItemResponse firstItem = response.getResponses（）[<span class="number">0</span>];</span><br><span class="line">assertNull（firstItem.getFailure（））;<span class="comment">//如果成功，返回 null       </span></span><br><span class="line">GetResponse firstGet = firstItem.getResponse（）; <span class="comment">//获取 GetResponse</span></span><br><span class="line">String index = firstItem.getIndex（）;</span><br><span class="line">String type = firstItem.getType（）;</span><br><span class="line">String id = firstItem.getId（）;</span><br><span class="line"><span class="keyword">if</span>（firstGet.isExists（））<span class="comment">//判断文档是否存在</span></span><br><span class="line">    <span class="keyword">long</span> version = firstGet.getVersion（）;</span><br><span class="line">    String sourceAsString = firstGet.getSourceAsString（）;        </span><br><span class="line">    Map &lt;String，Object&gt; sourceAsMap = firstGet.getSourceAsMap（）; </span><br><span class="line">    <span class="keyword">byte</span> [] sourceAsBytes = firstGet.getSourceAsBytes（）;          </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果请求的 index 不存在，则返回响应会包含一个异常信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">assertNull(missingIndexItem.getResponse());                </span><br><span class="line">Exception e = missingIndexItem.getFailure().getFailure();  </span><br><span class="line">ElasticsearchException ee = (ElasticsearchException) e;    </span><br><span class="line"><span class="comment">// TODO status is broken! fix in a followup</span></span><br><span class="line"><span class="comment">// assertEquals(RestStatus.NOT_FOUND, ee.status());        </span></span><br><span class="line">assertThat(e.getMessage(),</span><br><span class="line">    containsString(<span class="string">"reason=no such index"</span>));</span><br></pre></td></tr></table></figure><p>请求文档版本冲突，则返回响应会包含一个异常信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MultiGetRequest request = <span class="keyword">new</span> MultiGetRequest();</span><br><span class="line">request.add(<span class="keyword">new</span> MultiGetRequest.Item(<span class="string">"index"</span>, <span class="string">"type"</span>, <span class="string">"example_id"</span>)</span><br><span class="line">    .version(<span class="number">1000L</span>));</span><br><span class="line">MultiGetResponse response = client.multiGet(request);</span><br><span class="line">MultiGetItemResponse item = response.getResponses()[<span class="number">0</span>];</span><br><span class="line">assertNull(item.getResponse());                          </span><br><span class="line">Exception e = item.getFailure().getFailure();            </span><br><span class="line">ElasticsearchException ee = (ElasticsearchException) e;  </span><br><span class="line"><span class="comment">// TODO status is broken! fix in a followup</span></span><br><span class="line"><span class="comment">// assertEquals(RestStatus.CONFLICT, ee.status());          </span></span><br><span class="line">assertThat(e.getMessage(),</span><br><span class="line">    containsString(<span class="string">"version conflict, current version [1] is "</span></span><br><span class="line">        + <span class="string">"different than the one provided [1000]"</span>));</span><br></pre></td></tr></table></figure><h2 id="Search-API"><a href="#Search-API" class="headerlink" title="Search API"></a>Search API</h2><p>高级客户端支持下面的 <code>Search API</code>:</p><ul><li>Search API</li><li>Search Scroll API</li><li>Clear Scroll API</li><li>Multi-Search API</li><li>Ranking Evaluation API</li></ul><h3 id="Search-API-1"><a href="#Search-API-1" class="headerlink" title="Search API"></a>Search API</h3><h4 id="SearchRequest"><a href="#SearchRequest" class="headerlink" title="SearchRequest"></a>SearchRequest</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(); </span><br><span class="line">SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder(); </span><br><span class="line">searchSourceBuilder.query(QueryBuilders.matchAllQuery()); </span><br><span class="line">searchRequest.source(searchSourceBuilder);</span><br></pre></td></tr></table></figure><h4 id="可选参数-6"><a href="#可选参数-6" class="headerlink" title="可选参数"></a>可选参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">"posts"</span>); </span><br><span class="line">searchRequest.types(<span class="string">"doc"</span>); </span><br><span class="line">searchRequest.routing(<span class="string">"routing"</span>); </span><br><span class="line">searchRequest.indicesOptions(IndicesOptions.lenientExpandOpen());</span><br><span class="line">searchRequest.preference(<span class="string">"_local"</span>);</span><br></pre></td></tr></table></figure><h4 id="使用-SearchBuilder"><a href="#使用-SearchBuilder" class="headerlink" title="使用 SearchBuilder"></a>使用 SearchBuilder</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder(); </span><br><span class="line">sourceBuilder.query(QueryBuilders.termQuery(<span class="string">"user"</span>, <span class="string">"kimchy"</span>)); </span><br><span class="line">sourceBuilder.from(<span class="number">0</span>); </span><br><span class="line">sourceBuilder.size(<span class="number">5</span>); </span><br><span class="line">sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br></pre></td></tr></table></figure><h4 id="构建查询语句"><a href="#构建查询语句" class="headerlink" title="构建查询语句"></a>构建查询语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MatchQueryBuilder matchQueryBuilder = <span class="keyword">new</span> MatchQueryBuilder(<span class="string">"user"</span>, <span class="string">"kimchy"</span>);</span><br><span class="line">matchQueryBuilder.fuzziness(Fuzziness.AUTO); </span><br><span class="line">matchQueryBuilder.prefixLength(<span class="number">3</span>); </span><br><span class="line">matchQueryBuilder.maxExpansions(<span class="number">10</span>); </span><br><span class="line">matchQueryBuilder.fuzziness(Fuzziness.AUTO); </span><br><span class="line">matchQueryBuilder.prefixLength(<span class="number">3</span>); </span><br><span class="line">matchQueryBuilder.maxExpansions(<span class="number">10</span>); </span><br><span class="line">searchSourceBuilder.query(matchQueryBuilder);</span><br></pre></td></tr></table></figure><h4 id="设置排序"><a href="#设置排序" class="headerlink" title="设置排序"></a>设置排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sourceBuilder.sort(<span class="keyword">new</span> ScoreSortBuilder().order(SortOrder.DESC)); </span><br><span class="line">sourceBuilder.sort(<span class="keyword">new</span> FieldSortBuilder(<span class="string">"_uid"</span>).order(SortOrder.ASC));</span><br></pre></td></tr></table></figure><h4 id="文档过滤"><a href="#文档过滤" class="headerlink" title="文档过滤"></a>文档过滤</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sourceBuilder.fetchSource(<span class="keyword">false</span>);</span><br><span class="line">String[] includeFields = <span class="keyword">new</span> String[] &#123;<span class="string">"title"</span>, <span class="string">"user"</span>, <span class="string">"innerObject.*"</span>&#125;;</span><br><span class="line">String[] excludeFields = <span class="keyword">new</span> String[] &#123;<span class="string">"_type"</span>&#125;;</span><br><span class="line">sourceBuilder.fetchSource(includeFields, excludeFields);</span><br></pre></td></tr></table></figure><h4 id="字段高亮"><a href="#字段高亮" class="headerlink" title="字段高亮"></a>字段高亮</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder(); </span><br><span class="line">HighlightBuilder.Field highlightTitle =</span><br><span class="line">        <span class="keyword">new</span> HighlightBuilder.Field(<span class="string">"title"</span>); </span><br><span class="line">highlightTitle.highlighterType(<span class="string">"unified"</span>);  </span><br><span class="line">highlightBuilder.field(highlightTitle);  </span><br><span class="line">HighlightBuilder.Field highlightUser = <span class="keyword">new</span> HighlightBuilder.Field(<span class="string">"user"</span>);</span><br><span class="line">highlightBuilder.field(highlightUser);</span><br><span class="line">searchSourceBuilder.highlighter(highlightBuilder);</span><br></pre></td></tr></table></figure><h4 id="添加聚合查询"><a href="#添加聚合查询" class="headerlink" title="添加聚合查询"></a>添加聚合查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">TermsAggregationBuilder aggregation = AggregationBuilders.terms(<span class="string">"by_company"</span>)</span><br><span class="line">        .field(<span class="string">"company.keyword"</span>);</span><br><span class="line">aggregation.subAggregation(AggregationBuilders.avg(<span class="string">"average_age"</span>)</span><br><span class="line">        .field(<span class="string">"age"</span>));</span><br><span class="line">searchSourceBuilder.aggregation(aggregation);</span><br></pre></td></tr></table></figure><h4 id="请求建议词"><a href="#请求建议词" class="headerlink" title="请求建议词"></a>请求建议词</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">SuggestionBuilder termSuggestionBuilder =</span><br><span class="line">    SuggestBuilders.termSuggestion(<span class="string">"user"</span>).text(<span class="string">"kmichy"</span>); </span><br><span class="line">SuggestBuilder suggestBuilder = <span class="keyword">new</span> SuggestBuilder();</span><br><span class="line">suggestBuilder.addSuggestion(<span class="string">"suggest_user"</span>, termSuggestionBuilder); </span><br><span class="line">searchSourceBuilder.suggest(suggestBuilder);</span><br></pre></td></tr></table></figure><h4 id="分析查询和聚合"><a href="#分析查询和聚合" class="headerlink" title="分析查询和聚合"></a>分析查询和聚合</h4><p><code>profile API</code> 可用于为特定搜索分析查询和聚合的执行情况。为了使用它, 必须在 SearchSourceBuilder 上设置<code>profile</code>标志为 <code>true</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">searchSourceBuilder.profile(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>执行 <code>SearchRequest</code> 后, 相应的 <code>SearchResponse</code> 将包含分析结果。</p><h4 id="同步执行-6"><a href="#同步执行-6" class="headerlink" title="同步执行"></a>同步执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SearchResponse searchResponse = client.search(searchRequest);</span><br></pre></td></tr></table></figure><h4 id="异步执行-6"><a href="#异步执行-6" class="headerlink" title="异步执行"></a>异步执行</h4><p>执行 <code>SearchRequest</code> 也可以以异步方式进行, 以便客户端可以直接返回。用户需要通过将请求和监听器传递给异步搜索方法来指定如何处理响应或潜在故障:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ActionListener&lt;SearchResponse&gt; listener = <span class="keyword">new</span> ActionListener&lt;SearchResponse&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(SearchResponse searchResponse)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">client.searchAsync(searchRequest, listener);</span><br></pre></td></tr></table></figure><p>异步方法不会阻止线程，也不会立即返回。完成该操作后, 如果执行成功则回调<code>ActionListener</code>的 <code>onResponse</code> 方法，失败则回调 onFailure` 方法</p><h4 id="SearchResponse"><a href="#SearchResponse" class="headerlink" title="SearchResponse"></a>SearchResponse</h4><p>执行搜索返回的 <code>SearchResponse</code> 提供了有关搜索执行本身以及对返回访问的文档的详细信息。看下有关于请求执行操作的信息, 如 HTTP 状态代码、执行时间或请求是否提前终止或超时:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RestStatus status = searchResponse.status();</span><br><span class="line">TimeValue took = searchResponse.getTook();</span><br><span class="line">Boolean terminatedEarly = searchResponse.isTerminatedEarly();</span><br><span class="line"><span class="keyword">boolean</span> timedOut = searchResponse.isTimedOut();</span><br></pre></td></tr></table></figure><p>其次, 响应还提供有关在分片级别上执行的信息, 提供有关受影响搜索的分片总数以及成功与失败的分片的统计数据。潜在的故障也可以通过迭代 <code>ShardSearchFailure</code> 数组来处理, 如下面的示例所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> totalShards = searchResponse.getTotalShards();</span><br><span class="line"><span class="keyword">int</span> successfulShards = searchResponse.getSuccessfulShards();</span><br><span class="line"><span class="keyword">int</span> failedShards = searchResponse.getFailedShards();</span><br><span class="line"><span class="keyword">for</span> (ShardSearchFailure failure : searchResponse.getShardFailures()) &#123;</span><br><span class="line">    <span class="comment">// failures should be handled here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取搜索命中的文档"><a href="#获取搜索命中的文档" class="headerlink" title="获取搜索命中的文档"></a>获取搜索命中的文档</h4><p>要获得对返回的文档的访问权限, 我们首先需要得到响应中包含的 SearchHits：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SearchHits hits = searchResponse.getHits();</span><br><span class="line"><span class="keyword">long</span> totalHits = hits.getTotalHits();</span><br><span class="line"><span class="keyword">float</span> maxScore = hits.getMaxScore();</span><br></pre></td></tr></table></figure><p>SearchHits 提供有关所有命中的全局信息, 如命中总数或最大得分:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> totalHits = hits.getTotalHits();</span><br><span class="line"><span class="keyword">float</span> maxScore = hits.getMaxScore();</span><br></pre></td></tr></table></figure><p>嵌套在 SearchHits 中的是可以迭代的单个搜索结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SearchHit[] searchHits = hits.getHits();</span><br><span class="line"><span class="keyword">for</span> (SearchHit hit : searchHits) &#123;</span><br><span class="line">    <span class="comment">// do something with the SearchHit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SearchHit 提供对基本信息的访问, 如索引、类型、docId 和每个搜索命中的分数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String index = hit.getIndex();</span><br><span class="line">String type = hit.getType();</span><br><span class="line">String id = hit.getId();</span><br><span class="line"><span class="keyword">float</span> score = hit.getScore();</span><br></pre></td></tr></table></figure><p>此外, 它还允许您返回文档源, 既可以是简单的 JSON 字符串, 也可以是键/值对的映射。在此映射中,通常键值对的键为字段名, 值为字段值。多值字段作为对象的列表返回, 嵌套对象作为另一个键/值映射。这些案件需要相应地强制执行:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String sourceAsString = hit.getSourceAsString();</span><br><span class="line">Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();</span><br><span class="line">String documentTitle = (String) sourceAsMap.get(<span class="string">"title"</span>);</span><br><span class="line">List&lt;Object&gt; users = (List&lt;Object&gt;) sourceAsMap.get(<span class="string">"user"</span>);</span><br><span class="line">Map&lt;String, Object&gt; innerObject =</span><br><span class="line">        (Map&lt;String, Object&gt;) sourceAsMap.get(<span class="string">"innerObject"</span>);</span><br></pre></td></tr></table></figure><h4 id="获取高亮结果"><a href="#获取高亮结果" class="headerlink" title="获取高亮结果"></a>获取高亮结果</h4><p>可以从结果中获取每个 <code>SearchHit</code> 中高亮显示的文本片段。<code>SearchHit</code>提供对 <code>HighlightField</code> 实例的访问, 其中每一个都包含一个或多个突出显示的文本片段:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SearchHits hits = searchResponse.getHits();</span><br><span class="line"><span class="keyword">for</span> (SearchHit hit : hits.getHits()) &#123;</span><br><span class="line">    Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">    HighlightField highlight = highlightFields.get(<span class="string">"title"</span>); </span><br><span class="line">    Text[] fragments = highlight.fragments();  </span><br><span class="line">    String fragmentString = fragments[<span class="number">0</span>].string();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取聚合结果"><a href="#获取聚合结果" class="headerlink" title="获取聚合结果"></a>获取聚合结果</h4><p>可以从 SearchResponse 获取聚合结果, 首先获取聚合树的根、聚合对象, 然后按名称获取聚合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Aggregations aggregations = searchResponse.getAggregations();</span><br><span class="line">Terms byCompanyAggregation = aggregations.get(<span class="string">"by_company"</span>); </span><br><span class="line">Bucket elasticBucket = byCompanyAggregation.getBucketByKey(<span class="string">"Elastic"</span>); </span><br><span class="line">Avg averageAge = elasticBucket.getAggregations().get(<span class="string">"average_age"</span>); </span><br><span class="line"><span class="keyword">double</span> avg = averageAge.getValue();</span><br></pre></td></tr></table></figure><p>请注意, 如果按名称访问聚合, 则需要根据所请求的聚合类型指定聚合接口, 否则将引发抛出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Range range = aggregations.get(<span class="string">"by_company"</span>); <span class="comment">//这将引发异常, 因为 "by_company" 是一个term聚合, 但这里尝试将它一范围聚合取出</span></span><br></pre></td></tr></table></figure><p>还可以将所有的聚合 转化成 <code>map</code> ,以聚合名作为 <code>key</code> 值。在这种情况下,需要显示强制转换到正确的类型:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Aggregation&gt; aggregationMap = aggregations.getAsMap();</span><br><span class="line">Terms companyAggregation = (Terms) aggregationMap.get(<span class="string">"by_company"</span>);</span><br></pre></td></tr></table></figure><p>还有一些 getter 将所有顶层聚合作为列表返回:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Aggregation&gt; aggregationList = aggregations.asList();</span><br></pre></td></tr></table></figure><p>最后, 可以遍历所有聚合, 然后根据它们的类型决定如何进一步处理它们:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Aggregation agg : aggregations) &#123;</span><br><span class="line">    String type = agg.getType();</span><br><span class="line">    <span class="keyword">if</span> (type.equals(TermsAggregationBuilder.NAME)) &#123;</span><br><span class="line">        Bucket elasticBucket = ((Terms) agg).getBucketByKey(<span class="string">"Elastic"</span>);</span><br><span class="line">        <span class="keyword">long</span> numberOfDocs = elasticBucket.getDocCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取建议"><a href="#获取建议" class="headerlink" title="获取建议"></a>获取建议</h4><p>要从 SearchResponse 中返回<code>suggestions</code>, 请使用<code>suggestion</code> 对象作为入口点, 然后检索嵌套的建议对象:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Suggest suggest = searchResponse.getSuggest(); </span><br><span class="line">TermSuggestion termSuggestion = suggest.getSuggestion(<span class="string">"suggest_user"</span>); </span><br><span class="line"><span class="keyword">for</span> (TermSuggestion.Entry entry : termSuggestion.getEntries()) &#123; </span><br><span class="line">    <span class="keyword">for</span> (TermSuggestion.Entry.Option option : entry) &#123; </span><br><span class="line">        String suggestText = option.getText().string();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取性能分析结果"><a href="#获取性能分析结果" class="headerlink" title="获取性能分析结果"></a>获取性能分析结果</h4><p>使用 <code>getProfileResults ()</code> 方法从 <code>SearchResponse</code> 检索性能分析结果。此方法返回一个<code>Map</code>,包含 <code>SearchRequest</code> 执行中所涉及的每个分片的 <code>ProfileShardResult</code> 对象。<code>ProfileShardResult</code> 存储在映射中, 使用唯一标识配置文件结果对应的碎片的键.   </p><p>下面是一个示例代码, 它演示如何循环访问每个分片的所有性能分析结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, ProfileShardResult&gt; profilingResults =</span><br><span class="line">        searchResponse.getProfileResults(); </span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, ProfileShardResult&gt; profilingResult : profilingResults.entrySet()) &#123; </span><br><span class="line">    String key = profilingResult.getKey(); </span><br><span class="line">    ProfileShardResult profileShardResult = profilingResult.getValue(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ProfileShardResult</code> 对象本身包含一个或多个<code>QueryProfileShardResult</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;QueryProfileShardResult&gt; queryProfileShardResults =</span><br><span class="line">        profileShardResult.getQueryProfileResults(); </span><br><span class="line"><span class="keyword">for</span> (QueryProfileShardResult queryProfileResult : queryProfileShardResults) &#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (ProfileResult profileResult : queryProfileResult.getQueryResults()) &#123; </span><br><span class="line">    String queryName = profileResult.getQueryName(); </span><br><span class="line">    <span class="keyword">long</span> queryTimeInMillis = profileResult.getTime(); </span><br><span class="line">    List&lt;ProfileResult&gt; profiledChildren = profileResult.getProfiledChildren(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;&lt;/a&gt;起步&lt;/h2&gt;&lt;p&gt;阅读文档须知,文档基于&lt;code&gt;Elasticsearch 6.x&lt;/code&gt;,阅读要求,熟悉 &lt;code&gt;ElasticSearch&lt;
      
    
    </summary>
    
      <category term="elasticsearch" scheme="https://blog.milk4j.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="https://blog.milk4j.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Mac后端开发环境搭建</title>
    <link href="https://blog.milk4j.com/2018/04/14/Mac%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://blog.milk4j.com/2018/04/14/Mac后端开发环境搭建/</id>
    <published>2018-04-14T02:01:56.000Z</published>
    <updated>2018-10-24T09:53:47.494Z</updated>
    
    <content type="html"><![CDATA[<p><code>作为一个开发人员，选择 Mac 是一个非常好的选择，首先 Mac 是 Unix 的内核，支持 Unix 内核的命令，使用 Mac 能帮助我们熟悉 Unix 的操作命令</code></p><h2 id="1、HomeBrew"><a href="#1、HomeBrew" class="headerlink" title="1、HomeBrew"></a>1、HomeBrew</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p><code>Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。</code></p><p><code>简单点说，Homebrew 是以最简单、最灵活的方式来安装苹果公司在 MacOS 中不包含的 UNIX 工具。</code></p><h3 id="1-2-安装与卸载"><a href="#1-2-安装与卸载" class="headerlink" title="1.2 安装与卸载"></a>1.2 安装与卸载</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>打开终端，复制粘贴，大约1分钟左右，下载完成，过程中需要输入密码，其他无需任何操作：</p><p><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></p><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p>有安装就要有卸载，打开终端，复制粘贴： </p><p><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;</code></p><p>其实只用把上面安装的install换成uninstall就行了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>Homebrew 常用命令，下面以安装 git 为例（使用 brew 安装默认安装软件包的最新版本）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">安装任意软件包：</span><br><span class="line">brew install git</span><br><span class="line">卸载已安装软件包：</span><br><span class="line">brew uninstall git</span><br><span class="line">搜索可用软件包：</span><br><span class="line">brew search git</span><br><span class="line">查看任意软件包信息：</span><br><span class="line">brew info git</span><br><span class="line">更新已安装的软件包：</span><br><span class="line">brew upgrade git</span><br><span class="line">查看所有已安装的软件包：</span><br><span class="line">brew list</span><br><span class="line">更新 Homebrew：</span><br><span class="line">brew update</span><br><span class="line">查看 HomeBrew 版本：</span><br><span class="line">brew -v</span><br><span class="line">HomeBrew 帮助信息：</span><br><span class="line">brew -h</span><br></pre></td></tr></table></figure><p>使用 <code>brew -h</code> 看下官方帮助：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew -h</span></span><br><span class="line">Example usage:</span><br><span class="line">  brew search [TEXT|/REGEX/]</span><br><span class="line">  brew info [FORMULA...]</span><br><span class="line">  brew install FORMULA...</span><br><span class="line">  brew update</span><br><span class="line">  brew upgrade [FORMULA...]</span><br><span class="line">  brew uninstall FORMULA...</span><br><span class="line">  brew list [FORMULA...]</span><br><span class="line"></span><br><span class="line">Troubleshooting:</span><br><span class="line">  brew config</span><br><span class="line">  brew doctor</span><br><span class="line">  brew install --verbose --debug FORMULA</span><br><span class="line"></span><br><span class="line">Contributing:</span><br><span class="line">  brew create [URL [--no-fetch]]</span><br><span class="line">  brew edit [FORMULA...]</span><br><span class="line"></span><br><span class="line">Further help:</span><br><span class="line">  brew commands</span><br><span class="line">  brew help [COMMAND]</span><br><span class="line">  man brew</span><br><span class="line">  https://docs.brew.sh</span><br></pre></td></tr></table></figure><h4 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h4><p>在<code>Mac OS X 10.11</code>系统以后，<code>/usr/local/</code>等系统目录下的文件读写是需要系统root权限的，以往的Homebrew安装如果没有指定安装路径，会默认安装在这些需要系统root用户读写权限的目录下，导致有些指令需要添加sudo前缀来执行，比如升级Homebrew需要：<code>sudo brew update</code></p><p><strong>推荐:</strong>   安装Homebrew时对安装路径进行指定，直接安装在不需要系统root用户授权就可以自由读写的目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby &lt;install path&gt; -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><p>下面是我的 HomeBrew 的版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew -v</span></span><br><span class="line">Homebrew 1.6.0</span><br><span class="line">Homebrew/homebrew-core (no git repository)</span><br></pre></td></tr></table></figure><p>默认安装的所有的命令都在<code>/usr/local/bin</code>目录下，安装文件都在<code>/usr/local/Cellar</code>下，对应的配置文件都在<code>/usr/local/etc</code>下</p><h3 id="1-3-Cakebrew"><a href="#1-3-Cakebrew" class="headerlink" title="1.3 Cakebrew"></a>1.3 Cakebrew</h3><p>Cakebrew 是 HomeBrew 的 GUI 版本，提供图形化的方式安装和管理软件包，安装方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install cakebrew</span><br></pre></td></tr></table></figure><h3 id="1-4-homebrew-cask"><a href="#1-4-homebrew-cask" class="headerlink" title="1.4  homebrew-cask"></a>1.4  homebrew-cask</h3><p>homebrew-cask安装常用软件，比在网上下载安装文件安装的优势在于：<br>（1）节省下载安装包的过程，一行命令即可安装<br>（2）一些在网上搜不到安装文件的软件也可以通过这种方法安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap phinze/homebrew-cask</span><br><span class="line">brew install brew-cask</span><br></pre></td></tr></table></figure><p>使用方法：将上面的brew换成brew cask即可，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install qq</span><br></pre></td></tr></table></figure><p>使用 brew cask 安装常用的软件：</p><p>brew cask 搜索地址 <a href="https://caskroom.github.io/search" target="_blank" rel="noopener">https://caskroom.github.io/search</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">brew cask install yy</span><br><span class="line">brew cask install qq</span><br><span class="line">brew cask install dash # 帮助文档</span><br><span class="line">brew cask install atom</span><br><span class="line">brew cask install sequel-pro # mysql可视化工具</span><br><span class="line">brew cask install sourcetree # git可视化工具</span><br><span class="line">brew cask install neteasemusic # 网易云音乐</span><br><span class="line">brew cask install android-file-transfer # android 传输工具</span><br><span class="line">brew cask install android-studio</span><br><span class="line">brew cask install intellij-idea</span><br><span class="line">brew cask install visual-studio-code</span><br><span class="line">brew cask install mockplus # 比较不错的画原型工具</span><br><span class="line">brew cask install alfred # 小红帽</span><br><span class="line">brew cask install the-unarchiver # 压缩工具</span><br><span class="line">brew cask install thunder # 迅雷</span><br><span class="line">brew cask install mplayerx # 播放器</span><br><span class="line">brew cask install iterm2 # mac上最好用的终端</span><br><span class="line">brew cask install cd-to # 当前目录在终端显示</span><br><span class="line">brew cask install duet # ipad做外接显示器</span><br><span class="line">brew cask install ckb # 海盗船机械键盘驱动</span><br><span class="line">brew cask install shadowsocksx # 翻墙工具</span><br><span class="line">brew cask install firefox # 火狐</span><br><span class="line">brew cask install foxmail # 邮箱客户端</span><br><span class="line">brew cask install rdm # redis 客户端</span><br><span class="line">brew cask install typora # markdown工具</span><br><span class="line">brew cask install macdown</span><br><span class="line">brew cask install cyberduck # ftp工具</span><br><span class="line">brew cask install bearychat</span><br></pre></td></tr></table></figure><h2 id="2、iTerm2"><a href="#2、iTerm2" class="headerlink" title="2、iTerm2"></a>2、iTerm2</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>ITERM2 是 MAC 下最好的终端工具。直接去<a href="https://www.iterm2.com/" target="_blank" rel="noopener">官网</a>下载安装包安装即可使用。</p><h3 id="2-2-iTerm2-常用快捷键"><a href="#2-2-iTerm2-常用快捷键" class="headerlink" title="2.2  iTerm2 常用快捷键"></a>2.2  iTerm2 常用快捷键</h3><ul><li>切换 tab：⌘+← ，⌘+→  ，⌘+{  ， ⌘+} ，⌘+数字直接定位到该 tab</li><li>新建 tab：⌘+t</li><li>顺序切换 pane：⌘+[  ， ⌘+]</li><li>按方向切换 pane：⌘+Option+方向键</li><li>切分屏幕：⌘+d 水平切分，⌘+Shift+d 垂直切分</li><li>智能查找，支持正则查找：⌘+f</li></ul><h2 id="3、安装OH-MY-ZSH"><a href="#3、安装OH-MY-ZSH" class="headerlink" title="3、安装OH MY ZSH"></a>3、安装OH MY ZSH</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>ZSH 是一种Shell指令集，Mac 自带 ZSH 的安装。但 Oh my zsh 可以让你能更简便的配置 ZSH。 安装方式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure><p>等待安装完成即可</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>设置 zsh 为系统的默认的 shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h3 id="更改zsh主题"><a href="#更改zsh主题" class="headerlink" title="更改zsh主题"></a>更改zsh主题</h3><p>编辑 <code>~/.zshrc</code> ，将文本中的 ZSH_THEME 修改为如下（个人推荐主题：ys）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME="ys"</span><br></pre></td></tr></table></figure><p>注：主题文件在 <code>~/.oh-my-zsh/themes</code> 目录</p><h2 id="4、安装JDK"><a href="#4、安装JDK" class="headerlink" title="4、安装JDK"></a>4、安装JDK</h2><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><p>通过 HomeBrew 安装 JDK</p><p>安装 jdk8 <code>brew cask info java8</code></p><p>安装 jdk9 <code>brew cask info java9</code></p><p><em>也可以通过<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">官网</a>下载安装包安装</em></p><p>上述两个文件安装完成后，执行下述命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo "alias setJdk9='export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk9.0.4.jdk/Contents/Home'" &gt;&gt; ~/.zshrc</span><br><span class="line">echo "alias setJdk8='export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home'" &gt;&gt; ~/.zshrc</span><br><span class="line">echo "export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home"  &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><p>这样在命令行中默认设置当前环境变量为 <strong>JAVA 8</strong> , 当我们需要切换到 <strong>JAVA 9</strong> 时只需在命令行中执行命令 <strong>setJdk9</strong> 即可 。</p><h2 id="5、安装-Maven"><a href="#5、安装-Maven" class="headerlink" title="5、安装 Maven"></a>5、安装 Maven</h2><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><p>Maven 是Java生态中用来构建项目的工具。通过brew安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install maven</span><br></pre></td></tr></table></figure><p>等待安装完成后即可</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>在命令行中输入下述命令验证MAVEN是否正确安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mvn -v</span></span><br><span class="line">Apache Maven 3.5.3 (3383c37e1f9e9b3bc3df5050c29c8aff9f295297; 2018-02-25T03:49:05+08:00)</span><br><span class="line">Maven home: /usr/local/Cellar/maven/3.5.3/libexec</span><br><span class="line">Java version: 1.8.0_161, vendor: Oracle Corporation</span><br><span class="line">Java home: /Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre</span><br><span class="line">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class="line">OS name: "mac os x", version: "10.13.4", arch: "x86_64", family: "mac"</span><br></pre></td></tr></table></figure><p>如果有以上输出内容即标识安装完成</p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>在 ~/.m2 目录下创建 settings.xml 文件，使用阿里云的 maven 仓库，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span><br><span class="line">          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">          xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;pluginGroups&gt;&lt;/pluginGroups&gt;</span><br><span class="line">    &lt;proxies&gt;&lt;/proxies&gt;</span><br><span class="line">    &lt;servers&gt;&lt;/servers&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;mirrors&gt;</span><br><span class="line">        &lt;mirror&gt;</span><br><span class="line">            &lt;id&gt;nexus-aliyun&lt;/id&gt;</span><br><span class="line">            &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">            &lt;name&gt;Nexus aliyun&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">        &lt;/mirror&gt;</span><br><span class="line">    &lt;/mirrors&gt;</span><br><span class="line"></span><br><span class="line">    &lt;profiles&gt;</span><br><span class="line">        &lt;profile&gt;</span><br><span class="line">            &lt;id&gt;JDK-1.8&lt;/id&gt;</span><br><span class="line">            &lt;activation&gt;</span><br><span class="line">                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">                &lt;jdk&gt;1.8&lt;/jdk&gt;</span><br><span class="line">            &lt;/activation&gt;</span><br><span class="line">            &lt;properties&gt;</span><br><span class="line">                &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">                &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">                &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;</span><br><span class="line">            &lt;/properties&gt;</span><br><span class="line">        &lt;/profile&gt;</span><br><span class="line">    &lt;/profiles&gt;</span><br><span class="line"></span><br><span class="line">    &lt;activeProfiles&gt;</span><br><span class="line">        &lt;activeProfile&gt;JDK-1.8&lt;/activeProfile&gt;</span><br><span class="line">    &lt;/activeProfiles&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><h2 id="6、安装-Redis"><a href="#6、安装-Redis" class="headerlink" title="6、安装 Redis"></a>6、安装 Redis</h2><p>Redis 是一款基于数据结构的内存数据库。在我们的项目中被用作高速集中式缓存的解决方案。</p><h3 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure><p>等待安装完成即可</p><h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><p>在命令行中输入下述命令查看 reids 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ redis-server -v                                                                                                                                                                        </span><br><span class="line">Redis server v=2.8.3 sha=00000000:0 malloc=libc bits=64 build=e836d8ad888e21a1</span><br></pre></td></tr></table></figure><p>如果有以上输出内容即表示安装完成</p><h2 id="7、安装MySQL"><a href="#7、安装MySQL" class="headerlink" title="7、安装MySQL"></a>7、安装MySQL</h2><p>Mysql 是业界主流的开源关系型数据库。在我们项目中用以持久化用户及系统数据。</p><h3 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure><p>等待安装完成即可</p><h3 id="验证-2"><a href="#验证-2" class="headerlink" title="验证"></a>验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -V</span><br><span class="line">mysql  Ver 14.14 Distrib 5.6.15, for osx10.9 (x86_64) using  EditLine wrapper</span><br></pre></td></tr></table></figure><p>如果有以上输出内容即表示安装完成</p><h2 id="8、安装-ElasticSearch"><a href="#8、安装-ElasticSearch" class="headerlink" title="8、安装 ElasticSearch"></a>8、安装 ElasticSearch</h2><h3 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h3><p>Elasticsearch(简称ES）是一款基于lucene的全文搜索中间件。用于处理在大量文本中通过关键字搜索的场景（例如搜索商品、店铺等）。先在下面的链接中下载安装包（已集成相关插件）后解压, 将解压后的文件夹放到你想安装的目录。通过 brew 安装5.6版的 ES： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install elasticsearch@5.6</span><br></pre></td></tr></table></figure><h3 id="验证-3"><a href="#验证-3" class="headerlink" title="验证"></a>验证</h3><p>打开Iterm2，进入 elasticsearch的安装目录，执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./elasticsearch</span><br></pre></td></tr></table></figure><p>就可以看到启动日志了</p><h2 id="9、安装Nginx"><a href="#9、安装Nginx" class="headerlink" title="9、安装Nginx"></a>9、安装Nginx</h2><h3 id="安装-7"><a href="#安装-7" class="headerlink" title="安装"></a>安装</h3><p>Nginx 是一款轻量的高性能的Http与反向代理服务器。可被用作转发页面的请求至后台的Tomcat服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><p>等待安装完成即可</p><h3 id="验证-4"><a href="#验证-4" class="headerlink" title="验证"></a>验证</h3><p>在命令行中输入下述命令验证 <strong>Nginx</strong> 是否正确安装 (版本可能有所不同)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -V</span><br><span class="line">nginx version: nginx/1.6.3</span><br><span class="line">built by clang 6.1.0 (clang-602.0.49) (based on LLVM 3.6.0svn)</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/Cellar/nginx/1.6.3 --with-http_ssl_module --with-pcre --with-ipv6 --sbin-path=/usr/local/Cellar/nginx/1.6.3/bin/nginx --with-cc-opt=&apos;-I/usr/local/Cellar/pcre/8.36/include -I/usr/local/Cellar/openssl/1.0.2a-1/include&apos; --with-ld-opt=&apos;-L/usr/local/Cellar/pcre/8.36/lib -L/usr/local/Cellar/openssl/1.0.2a-1/lib&apos; --conf-path=/usr/local/etc/nginx/nginx.conf --pid-path=/usr/local/var/run/nginx.pid --lock-path=/usr/local/var/run/nginx.lock --http-client-body-temp-path=/usr/local/var/run/nginx/client_body_temp --http-proxy-temp-path=/usr/local/var/run/nginx/proxy_temp --http-fastcgi-temp-path=/usr/local/var/run/nginx/fastcgi_temp --http-uwsgi-temp-path=/usr/local/var/run/nginx/uwsgi_temp --http-scgi-temp-path=/usr/local/var/run/nginx/scgi_temp --http-log-path=/usr/local/var/log/nginx/access.log --error-log-path=/usr/local/var/log/nginx/error.log --with-http_gzip_static_module</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  2;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    gzip  on;</span><br><span class="line">    include servers/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10、安装-SEQUEL-PRO"><a href="#10、安装-SEQUEL-PRO" class="headerlink" title="10、安装 SEQUEL PRO"></a>10、安装 SEQUEL PRO</h2><p>Sequel Pro 是一款免费的  MySQL 的图形管理工具。</p><h3 id="安装-8"><a href="#安装-8" class="headerlink" title="安装"></a>安装</h3><p>在<a href="http://www.sequelpro.com/" target="_blank" rel="noopener">官网</a>可下载最新版本</p><h2 id="11、安装-IntelliJ-IDEA"><a href="#11、安装-IntelliJ-IDEA" class="headerlink" title="11、安装 IntelliJ IDEA"></a>11、安装 IntelliJ IDEA</h2><p>IntelliJ IDEA 业界公认为最好的 Java 开发工具之一</p><h3 id="安装-9"><a href="#安装-9" class="headerlink" title="安装"></a>安装</h3><p>【<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">官网</a>】，网上有很多破解方法，如果资金允许请支持正版</p><h2 id="12、安装-Zookeeper"><a href="#12、安装-Zookeeper" class="headerlink" title="12、安装 Zookeeper"></a>12、安装 Zookeeper</h2><h3 id="安装-10"><a href="#安装-10" class="headerlink" title="安装"></a>安装</h3><p>通过 brew 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zookeeper</span><br></pre></td></tr></table></figure><h2 id="13、LaunchRocket"><a href="#13、LaunchRocket" class="headerlink" title="13、LaunchRocket"></a>13、LaunchRocket</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>是一个帮助管理Homebrew安装的服务的软件，比如你使用brew安装的Mysql、Redis、MongoDB，LaunchRocket 可以管理这些服务的生命周期和启动方式（自启动、手动启动），传统方式需要使用命令行的命令，而使用LaunchRocket则可以在图形界面中进行管理。</p><h3 id="安装-11"><a href="#安装-11" class="headerlink" title="安装"></a>安装</h3><p>brew 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install launchrocket</span><br></pre></td></tr></table></figure><h2 id="14、一些其他实用软件"><a href="#14、一些其他实用软件" class="headerlink" title="14、一些其他实用软件"></a>14、一些其他实用软件</h2><h3 id="办公："><a href="#办公：" class="headerlink" title="办公："></a>办公：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">markdown 编辑器：BoostNote、Typora、YuWriter、Mou</span><br><span class="line">文本编辑工具：Atom、Visual Studio Code、Sublime</span><br><span class="line">时间/项目管理工具：2Do、OmniPlan、OmniForce</span><br><span class="line">流程图绘制：OmniGraffle</span><br><span class="line">脑图绘制：Xmind、MindNode、iThoughtsX</span><br><span class="line">文稿编辑/演示： KeyNote、Pages、Scrivener、Quiver</span><br><span class="line">状态栏图标隐藏工具：Bartender3</span><br><span class="line">压缩工具：Dr.Unarchiver</span><br><span class="line">技术文档离线阅读：Dash</span><br><span class="line">效率搜索：Alfred3</span><br><span class="line">数据库管理工具：Sequel Pro、Navicat、TablePlus</span><br><span class="line">Git 的 GUI 工具：SourceTree、GitUp</span><br><span class="line">REST 客户端：Postman、Paw</span><br><span class="line">Hosts 切换管理工具：SwitchHosts</span><br></pre></td></tr></table></figure><h3 id="上班必备"><a href="#上班必备" class="headerlink" title="上班必备"></a>上班必备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">社交软件：微信、QQ、钉钉</span><br><span class="line">上班听音乐：网易云音乐、酷我音乐、QQ音乐</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;作为一个开发人员，选择 Mac 是一个非常好的选择，首先 Mac 是 Unix 的内核，支持 Unix 内核的命令，使用 Mac 能帮助我们熟悉 Unix 的操作命令&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;1、HomeBrew&quot;&gt;&lt;a href=&quot;#1、Home
      
    
    </summary>
    
      <category term="mac" scheme="https://blog.milk4j.com/categories/mac/"/>
    
    
      <category term="mac" scheme="https://blog.milk4j.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Hexo基本使用</title>
    <link href="https://blog.milk4j.com/2015/04/21/Hexo%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.milk4j.com/2015/04/21/Hexo基本使用/</id>
    <published>2015-04-21T15:20:36.000Z</published>
    <updated>2018-10-22T02:18:04.969Z</updated>
    
    <content type="html"><![CDATA[<p>官网 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>| 文档 <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> | 社区 <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> | Git地址 <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>详细说明: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>详细说明: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>详细说明: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="发布到远程站点"><a href="#发布到远程站点" class="headerlink" title="发布到远程站点"></a>发布到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>详细说明: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;官网 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;| 文档 &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
      <category term="hexo" scheme="https://blog.milk4j.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://blog.milk4j.com/tags/hexo/"/>
    
  </entry>
  
</feed>
