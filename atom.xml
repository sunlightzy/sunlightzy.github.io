<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jerry Simple</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.milk4j.com/"/>
  <updated>2018-12-22T11:14:49.435Z</updated>
  <id>https://blog.milk4j.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot 自动配置(autoconfigure)原理</title>
    <link href="https://blog.milk4j.com/2018/11/11/Spring%20Boot%20%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE(autoconfigure)%E5%8E%9F%E7%90%86/"/>
    <id>https://blog.milk4j.com/2018/11/11/Spring Boot 自动配置(autoconfigure)原理/</id>
    <published>2018-11-11T15:59:59.000Z</published>
    <updated>2018-12-22T11:14:49.435Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-说明"><a href="#0-说明" class="headerlink" title="0. 说明"></a>0. 说明</h2><p>环境配置清单</p><blockquote><p>java version “1.8.0_161”<br>Java(TM) SE Runtime Environment (build 1.8.0_161-b12)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)<br>Spring Boot  2.1.0.RELEASE</p></blockquote><p>项目 <a href="https://github.com/sunlightzy/spring-boot-auto-configuration" target="_blank" rel="noopener">GitHub</a></p><h2 id="1-前提知识"><a href="#1-前提知识" class="headerlink" title="1. 前提知识"></a>1. 前提知识</h2><h3 id="一、SPI扩展机制"><a href="#一、SPI扩展机制" class="headerlink" title="一、SPI扩展机制"></a>一、SPI扩展机制</h3><h4 id="1-解释"><a href="#1-解释" class="headerlink" title="1. 解释"></a>1. 解释</h4><p>SPI:  <code>Service Provider Interface</code> , 即 服务提供接口</p><h4 id="2-如何写一个Java-SPI呢"><a href="#2-如何写一个Java-SPI呢" class="headerlink" title="2. 如何写一个Java SPI呢?"></a>2. 如何写一个Java SPI呢?</h4><ol><li>定义一组接口， 接口是 <code>com.glmapper.spi.FilterProvider</code>；</li><li>接口的一个或多个实现(<code>com.glmapper.spi.provider.FileFilterProvider</code> [从文件系统加载filter], <code>com.glmapper.spi.provider.DataSourceFilterProvider</code> [从数据源中加载filter])；</li><li>在 <code>src/main/resources/</code> 下建立 <code>/META-INF/services</code> 目录， 新增一个以接口命名的文件 <code>com.glmapper.spi.FilterProvider</code>, 内容是要对应的实现类(<code>com.glmapper.spi.provider.FileFilterProvider</code> 或 <code>com.glmapper.spi.provider.DataSourceFilterProvider</code> 或两者)；</li><li>使用 <code>ServiceLoader</code> 来加载配置文件中指定的实现。</li></ol><h4 id="3-SPI应用案例"><a href="#3-SPI应用案例" class="headerlink" title="3. SPI应用案例"></a>3. SPI应用案例</h4><ol><li><p><code>Dubbo</code> 中有大量的<code>SPI</code>应用,不过<code>Dubbo</code>不是原生的<code>java spi</code>机制,他是原生的一个变种 . <code>Dubbo SPI</code>  约定:</p><ol><li>扩展点约定 :  扩展点必须是 <code>Interface</code> 类型 ， 必须被 <code>@SPI</code> 注解 ， 满足这两点才是一个扩展点。</li><li>扩展定义约定 ： 在 <code>META-INF/services/、META-INF/dubbo/、META-INF/dubbo/internal/</code>目录下新建扩展点文件,这些路径下定义的文件名称为扩展点接口的全类名 , 文件中以键值对的方式配置扩展点的扩展实现。例如文件  <code>META-INF/dubbo/internal/com.alibaba.dubbo.common.extension.ExtensionFactory</code>  中定义的扩展 ：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adaptive=com.alibaba.dubbo.common.extension.factory.AdaptiveExtensionFactory</span><br><span class="line">spi=com.alibaba.dubbo.common.extension.factory.SpiExtensionFactory</span><br><span class="line">spring=com.alibaba.dubbo.config.spring.extension.SpringExtensionFactory</span><br></pre></td></tr></table></figure><p>关于<code>Dubbo SPI</code>扩展机制在此不再继续展开描述</p></li><li><p><code>JDBC</code> 数据库驱动包: <code>java mysql</code> 驱动采用原生的<code>spi</code>机制<code>mysql-connector-java-xxx.jar</code> 就有一个 <code>/META-INF/services/java.sql.Driver</code> 里面内容是 </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.mysql.jdbc.Driver</span><br><span class="line">com.mysql.fabric.jdbc.FabricMySQLDriver</span><br></pre></td></tr></table></figure><ol start="3"><li>当然还有今天的主角 <code>spring boot</code> ,他也是原生<code>spi</code>的变种,它的约定是在<code>src/main/resorces/</code>下建立<code>META-INF/spring.factories</code>, 当springboot服务启动时，对象实例化过程会加载<code>META-INF/spring.factories</code>文件，将该配置文件中的配置的类载入到Spring容器中.下面是<code>spring-boot-autoconfigure jar</code>包中<code>spring.factories</code> 的内容:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span><br><span class="line">org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer</span><br><span class="line"></span><br><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span><br><span class="line"></span><br><span class="line"># Auto Configuration Import Listeners</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span><br><span class="line"></span><br><span class="line"># Auto Configuration Import Filters</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnClassCondition</span><br><span class="line"></span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line"># 这里省略了一堆</span><br><span class="line"></span><br><span class="line"># Failure analyzers</span><br><span class="line">org.springframework.boot.diagnostics.FailureAnalyzer=\</span><br><span class="line">org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceBeanCreationFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.HikariDriverConfigurationFailureAnalyzer</span><br><span class="line"></span><br><span class="line"># Template availability providers</span><br><span class="line">org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider=\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.JspTemplateAvailabilityProvider</span><br></pre></td></tr></table></figure><h2 id="2-Spring-Boot-自动配置机制"><a href="#2-Spring-Boot-自动配置机制" class="headerlink" title="2. Spring Boot 自动配置机制"></a>2. Spring Boot 自动配置机制</h2><h3 id="0-总体流程概述"><a href="#0-总体流程概述" class="headerlink" title="0. 总体流程概述"></a>0. 总体流程概述</h3><h3 id="1-几个重要的事件回调机制"><a href="#1-几个重要的事件回调机制" class="headerlink" title="1. 几个重要的事件回调机制"></a>1. 几个重要的事件回调机制</h3><h4 id="ApplicationContextInitializer"><a href="#ApplicationContextInitializer" class="headerlink" title="ApplicationContextInitializer"></a>ApplicationContextInitializer</h4><p>配置在<code>META-INF/spring.factories</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span><br><span class="line">org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer</span><br></pre></td></tr></table></figure><p><strong>ApplicationContextInitializer 是上下文初始化入口</strong></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxkeicqfdrj317y0u07f2.jpg" alt="image-20181125164451526"></p><h4 id="SpringApplicationRunListener"><a href="#SpringApplicationRunListener" class="headerlink" title="SpringApplicationRunListener"></a>SpringApplicationRunListener</h4><p>配置在<code>META-INF/spring.factories</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Run Listeners</span><br><span class="line">org.springframework.boot.SpringApplicationRunListener=\</span><br><span class="line">org.springframework.boot.context.event.EventPublishingRunListener</span><br></pre></td></tr></table></figure><p>SpringApplicationRunListener 的功能是监听容器的整个启动过程也就是<code>SpringApplication.run()</code>方法的整个生命周期</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fyfgl3b4dfj31840u07ez.jpg" alt="image-20181222132906562"></p><h4 id="ApplicationRunner-amp-CommandLineRunner"><a href="#ApplicationRunner-amp-CommandLineRunner" class="headerlink" title="ApplicationRunner &amp; CommandLineRunner"></a>ApplicationRunner &amp; CommandLineRunner</h4><p><code>CommandLineRunner &amp; ApplicationRunner</code> 接口是在容器启动成功后的最后一步回调（类似开机自启动）, 两者功能差不多, 只需要将其实现类放在<code>IOC</code>容器中,应用启动后会自动回调接口方法</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxkeja1e7aj31bo0mktdo.jpg" alt="image-20181125164546033"></p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxkek96kk9j31b40ootfu.jpg" alt="image-20181125164642736"></p><h3 id="2-自动配置注解"><a href="#2-自动配置注解" class="headerlink" title="2. 自动配置注解"></a>2. 自动配置注解</h3><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><p><strong>@EnableAutoConfiguration是自动配置的开关, 下面看看他的结构</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Enable auto-configuration of the Spring Application Context, attempting to guess and</span></span><br><span class="line"><span class="comment"> * configure beans that you are likely to need. Auto-configuration classes are usually</span></span><br><span class="line"><span class="comment"> * applied based on your classpath and what beans you have defined. For example, if you</span></span><br><span class="line"><span class="comment"> * have &#123;<span class="doctag">@code</span> tomcat-embedded.jar&#125; on your classpath you are likely to want a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> TomcatServletWebServerFactory&#125; (unless you have defined your own</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ServletWebServerFactory&#125; bean).</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * When using &#123;<span class="doctag">@link</span> SpringBootApplication&#125;, the auto-configuration of the context is</span></span><br><span class="line"><span class="comment"> * automatically enabled and adding this annotation has therefore no additional effect.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Auto-configuration tries to be as intelligent as possible and will back-away as you</span></span><br><span class="line"><span class="comment"> * define more of your own configuration. You can always manually &#123;<span class="doctag">@link</span> #exclude()&#125; any</span></span><br><span class="line"><span class="comment"> * configuration that you never want to apply (use &#123;<span class="doctag">@link</span> #excludeName()&#125; if you don't</span></span><br><span class="line"><span class="comment"> * have access to them). You can also exclude them via the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> spring.autoconfigure.exclude&#125; property. Auto-configuration is always applied</span></span><br><span class="line"><span class="comment"> * after user-defined beans have been registered.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The package of the class that is annotated with &#123;<span class="doctag">@code</span> <span class="doctag">@EnableAutoConfiguration</span>&#125;,</span></span><br><span class="line"><span class="comment"> * usually via &#123;<span class="doctag">@code</span> <span class="doctag">@SpringBootApplication</span>&#125;, has specific significance and is often used</span></span><br><span class="line"><span class="comment"> * as a 'default'. For example, it will be used when scanning for &#123;<span class="doctag">@code</span> <span class="doctag">@Entity</span>&#125; classes.</span></span><br><span class="line"><span class="comment"> * It is generally recommended that you place &#123;<span class="doctag">@code</span> <span class="doctag">@EnableAutoConfiguration</span>&#125; (if you're</span></span><br><span class="line"><span class="comment"> * not using &#123;<span class="doctag">@code</span> <span class="doctag">@SpringBootApplication</span>&#125;) in a root package so that all sub-packages</span></span><br><span class="line"><span class="comment"> * and classes can be searched.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Auto-configuration classes are regular Spring &#123;<span class="doctag">@link</span> Configuration&#125; beans. They are</span></span><br><span class="line"><span class="comment"> * located using the &#123;<span class="doctag">@link</span> SpringFactoriesLoader&#125; mechanism (keyed against this class).</span></span><br><span class="line"><span class="comment"> * Generally auto-configuration beans are &#123;<span class="doctag">@link</span> Conditional <span class="doctag">@Conditional</span>&#125; beans (most</span></span><br><span class="line"><span class="comment"> * often using &#123;<span class="doctag">@link</span> ConditionalOnClass <span class="doctag">@ConditionalOnClass</span>&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ConditionalOnMissingBean <span class="doctag">@ConditionalOnMissingBean</span>&#125; annotations).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Phillip Webb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephane Nicoll</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ConditionalOnBean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ConditionalOnMissingBean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ConditionalOnClass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> AutoConfigureAfter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> SpringBootApplication</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="comment">// 自动配置包,注册扫描包</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="comment">// 导入的这个AutoConfigurationImportSelector是自动配置的关键</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude specific auto-configuration classes such that they will never be applied.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the classes to exclude</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude specific auto-configuration class names such that they will never be</span></span><br><span class="line"><span class="comment"> * applied.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the class names to exclude</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<code>AutoConfigurationImportSelector</code>找到<code>selectImports()</code>方法，他调用了<code>getCandidateConfigurations()</code>方法，在这里，这个方法又调用了<code>Spring Core</code>包中的<code>loadFactoryNames()</code>方法。这个方法的作用是，会查询<code>META-INF/spring.factories</code>文件中包含的<code>JAR</code>文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">       <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">           <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//1. 得到注解信息</span></span><br><span class="line">       AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader</span><br><span class="line">           .loadMetadata(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">       AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(</span><br><span class="line">           autoConfigurationMetadata, annotationMetadata);</span><br><span class="line">       <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the &#123;<span class="doctag">@link</span> AutoConfigurationEntry&#125; based on the &#123;<span class="doctag">@link</span> AnnotationMetadata&#125;</span></span><br><span class="line"><span class="comment"> * of the importing &#123;<span class="doctag">@link</span> Configuration <span class="doctag">@Configuration</span>&#125; class.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> autoConfigurationMetadata the auto-configuration metadata</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> annotationMetadata the annotation metadata of the configuration class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the auto-configurations that should be imported</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">AutoConfigurationMetadata autoConfigurationMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line"><span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">// 2. 得到注解中的所有属性信息</span></span><br><span class="line">AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class="line">       <span class="comment">// 3. 得到spring.factories中配置在EnableAutoConfiguration下的字符串列表</span></span><br><span class="line">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,</span><br><span class="line">attributes);</span><br><span class="line">       <span class="comment">// 4. 去重</span></span><br><span class="line">configurations = removeDuplicates(configurations);</span><br><span class="line">       <span class="comment">// 5. 根据注解中的exclude信息去除不需要的</span></span><br><span class="line">Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">checkExcludedClasses(configurations, exclusions);</span><br><span class="line">configurations.removeAll(exclusions);</span><br><span class="line">configurations = filter(configurations, autoConfigurationMetadata);</span><br><span class="line">       <span class="comment">// 7. 派发事件</span></span><br><span class="line">fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有的自动配置类,也就是配置在spring.factories中 EnableAutoConfiguration 下的所有字符串列表</span></span><br><span class="line"><span class="comment"> * Return the auto-configuration class names that should be considered. By default</span></span><br><span class="line"><span class="comment"> * this method will load candidates using &#123;<span class="doctag">@link</span> SpringFactoriesLoader&#125; with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #getSpringFactoriesLoaderFactoryClass()&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> metadata the source metadata</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> attributes the &#123;<span class="doctag">@link</span> #getAttributes(AnnotationMetadata) annotation</span></span><br><span class="line"><span class="comment"> * attributes&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a list of candidate configurations</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata,</span></span></span><br><span class="line"><span class="function"><span class="params">AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// getSpringFactoriesLoaderFactoryClass()直接返回EnableAutoConfiguration.class</span></span><br><span class="line">       <span class="comment">// 所以这一步加载了所有的自动配置类</span></span><br><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(</span><br><span class="line">getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());</span><br><span class="line">Assert.notEmpty(configurations,</span><br><span class="line"><span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span></span><br><span class="line">+ <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</span><br><span class="line"><span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the class used by &#123;<span class="doctag">@link</span> SpringFactoriesLoader&#125; to load configuration</span></span><br><span class="line"><span class="comment"> * candidates.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the factory class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line"><span class="keyword">return</span> EnableAutoConfiguration.class;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面进入<code>org.springframework.core.io.support.SpringFactoriesLoader#loadFactoryNames</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load the fully qualified class names of factory implementations of the</span></span><br><span class="line"><span class="comment"> * given type from &#123;<span class="doctag">@value</span> #FACTORIES_RESOURCE_LOCATION&#125;, using the given</span></span><br><span class="line"><span class="comment"> * class loader.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> factoryClass the interface or abstract class representing the factory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classLoader the ClassLoader to use for loading resources; can be</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> null&#125; to use the default</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if an error occurs while loading factory names</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #loadFactories</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取全类名</span></span><br><span class="line">   String factoryClassName = factoryClass.getName();</span><br><span class="line">    <span class="comment">// 加载所有的spring.factories中的配置,然后筛选出factoryClassName下的配置的值</span></span><br><span class="line">   <span class="keyword">return</span> loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxkfaf053aj31ac0u0h0m.jpg" alt="image-20181125170438713"></p><p>在上面的<code>spring-boot-autoconfigure.jar</code>里的<code>spring.factories</code>文件下我们可以看到有这么一段关于<code>EnableAutoConfiguration</code>的配置(放一小段)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure><p>在<code>SpringBoot</code>启动配置类上面打上<code>@EnableAutoConfiguration</code>注解之后<code>springboot</code>就会实例化配置文件中这些<code>XxxAutoConfiguration</code>类启用这些类的功能, </p><p>==<strong>需要注意的是</strong>: 加了<code>@EableAutoConfiguration</code>注解的配置类只会为这个类所在的包以及子包下面的类自动配置==</p><p><code>@EnableAutoConfiguration</code>是自动配置的开关 ,如果要自己写自动配置类,还有一些<code>Conditional</code>的注解类需要掌握</p><h4 id="ConditionalOnXxx系列注解"><a href="#ConditionalOnXxx系列注解" class="headerlink" title="@ConditionalOnXxx系列注解"></a>@ConditionalOnXxx系列注解</h4><p><strong><code>SpringBoot</code>的自动配置全都依赖于这个系列的注解,下面列举了一些:</strong></p><blockquote><p><code>ConditionalOnBean</code>                 当指定bean存在时, 配置生效<br><code>ConditionalOnClass</code>                 当指定类存在时, 配置生效<br><code>ConditionalOnCloudPlatform</code>         当项目环境为指定云平台环境时, 配置生效<br><code>ConditionalOnEnableResourceChain</code>     当<code>ResourceChain</code>是启用状态时, 配置生效<br><code>ConditionalOnExpression</code>            当表达式为true时, 配置生效<br><code>ConditionalOnJava</code>                当环境的java为指定版本时,配置生效<br><code>ConditionalOnJndi</code>                当指定的<code>JNDI</code>存在时, 配置生效<br><code>ConditionalOnMissingBean</code>            当指定的bean不存在时, 配置生效<br><code>ConditionalOnMissingClass</code>        当指定的类不存在时, 配置生效<br><code>ConditionalOnNotWebApplication</code>    当项目为非web项目时, 配置生效<br><code>ConditionalOnProperty</code>            当指定的配置存在时, 配置生效<br><code>ConditionalOnResource</code>            当指定的资源存在时, 配置生效<br><code>ConditionalOnSingleCandidate</code>        当指定的类是单例时, 配置生效<br><code>ConditionalOnWebApplication</code>        当项目是web项目时, 配置生效</p></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxkflre2kcj327u0motr4.jpg" alt="image-20181125172244614"></p><h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4><p>下面以<code>HttpEncodingAutoConfiguration</code>为例来看一下自动配置</p><blockquote><p><code>@ConditionalOnProperty</code>注解的玩法很多, 详细使用案例参考本文文末附件<strong>@ConditionalOnProperty注解</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> EnableAutoConfiguration Auto-configuration&#125; for configuring the encoding to use</span></span><br><span class="line"><span class="comment"> * in web applications.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephane Nicoll</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Brian Clozel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 启用HttpProperties配置并加入到IOC容器</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HttpProperties.class)</span><br><span class="line"><span class="comment">// 当项目是servlet容器下的web项目时,这个配置类才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = ConditionalOnWebApplication.Type.SERVLET)</span><br><span class="line"><span class="comment">// 当CharacterEncodingFilter类存在时,这个配置类才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(CharacterEncodingFilter.class)</span><br><span class="line"><span class="comment">// 当spring.http.encoding.enabled这个环境变量存在且值不为false时,这个配置类才生效</span></span><br><span class="line"><span class="comment">// @ConditionalOnProperty这个注解的玩法很多</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.http.encoding"</span>, value = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> HttpProperties.Encoding properties;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="comment">// 当容器中没有CharacterEncodingFilter类型的实例时,这个方法生效</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">      filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">      filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">      filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">      <span class="keyword">return</span> filter;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> LocaleCharsetMappingsCustomizer <span class="title">localeCharsetMappingsCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> LocaleCharsetMappingsCustomizer(<span class="keyword">this</span>.properties);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LocaleCharsetMappingsCustomizer</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">         <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">ConfigurableServletWebServerFactory</span>&gt;, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> HttpProperties.Encoding properties;</span><br><span class="line"></span><br><span class="line">      LocaleCharsetMappingsCustomizer(HttpProperties.Encoding properties) &#123;</span><br><span class="line">         <span class="keyword">this</span>.properties = properties;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableServletWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">this</span>.properties.getMapping() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            factory.setLocaleCharsetMappings(<span class="keyword">this</span>.properties.getMapping());</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-SpringBoot启动过程"><a href="#3-SpringBoot启动过程" class="headerlink" title="3. SpringBoot启动过程"></a>3. SpringBoot启动过程</h2><h3 id="0-总体流程概述-1"><a href="#0-总体流程概述-1" class="headerlink" title="0. 总体流程概述"></a>0. 总体流程概述</h3><h3 id="1-创建启动类"><a href="#1-创建启动类" class="headerlink" title="1. 创建启动类"></a>1. 创建启动类</h3><p>1.1. 创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bootstrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用SpringApplication静态方法run为入口</span></span><br><span class="line">        SpringApplication.run(Bootstrap.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2. 跟踪进入<code>org.springframework.boot.SpringApplication#run(java.lang.String...)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Static helper that can be used to run a &#123;<span class="doctag">@link</span> SpringApplication&#125; from the</span></span><br><span class="line"><span class="comment">    * specified sources using default settings and user supplied arguments.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> sources the sources to load</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> args the application arguments (usually passed from a Java main method)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the running &#123;<span class="doctag">@link</span> ApplicationContext&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Object[] sources, String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 进入构造器,会有初始化过程</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SpringApplication(sources).run(args);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new &#123;<span class="doctag">@link</span> SpringApplication&#125; instance. The application context will load</span></span><br><span class="line"><span class="comment"> * beans from the specified sources (see &#123;<span class="doctag">@link</span> SpringApplication class-level&#125;</span></span><br><span class="line"><span class="comment"> * documentation for details. The instance can be customized before calling</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #run(String...)&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sources the bean sources</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #run(Object, String[])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #SpringApplication(ResourceLoader, Object...)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(Object... sources)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 初始化</span></span><br><span class="line">initialize(sources);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Object[] sources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sources != <span class="keyword">null</span> &amp;&amp; sources.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.sources.addAll(Arrays.asList(sources));</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">// 推断是否为web环境</span></span><br><span class="line"><span class="keyword">this</span>.webEnvironment = deduceWebEnvironment();</span><br><span class="line">       <span class="comment">// 获取所有的配置在spring.factores中的ApplicationContextInitializer</span></span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">ApplicationContextInitializer.class));</span><br><span class="line">       <span class="comment">// 获取所有的配置在spring.factores中的 ApplicationListener</span></span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">       <span class="comment">// 推断启动类,我们这里就是Bootstrap.class</span></span><br><span class="line"><span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运行spring应用,创建一个新的spring上ApplicationContext下文环境</span></span><br><span class="line"><span class="comment"> * Run the Spring application, creating and refreshing a new</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ApplicationContext&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args the application arguments (usually passed from a Java main method)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a running &#123;<span class="doctag">@link</span> ApplicationContext&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start();</span><br><span class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">       <span class="comment">// 加载java的AWT图形化相关的系统配置变量, 可以忽略</span></span><br><span class="line">configureHeadlessProperty();</span><br><span class="line">       <span class="comment">// 实例化spring.factories中配置的所有SpringApplicationRunListener并返回到 listeners 中</span></span><br><span class="line">       <span class="comment">// SpringApplicationRunListeners内部是一个List&lt;SpringApplicationRunListener&gt;</span></span><br><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">       <span class="comment">// 启动应用监听器,回调starting方法,</span></span><br><span class="line">       <span class="comment">// spring应用进行到某一阶段时会广播通知所有的监听器, 监听器的方法就会被回调执行</span></span><br><span class="line">listeners.starting();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 包装命令行启动参数 也就是 Bootstrap.main(String[] args)中的args</span></span><br><span class="line">           <span class="comment">// 我们可以通过命令号启动应用 java -jar demo.jar --server.port=8989 这个server.port=8989就是启动参数</span></span><br><span class="line">           <span class="comment">// 他可以接受多个启动参数,包括指定profile [dev/test/pre/prod]</span></span><br><span class="line">ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">           <span class="comment">// 准备应用环境, 包括读取系统环境变量,yml,properties等配置文件, </span></span><br><span class="line">           <span class="comment">// 同时回调listeners的environmentPrepared方法</span></span><br><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">applicationArguments);</span><br><span class="line">           <span class="comment">// 打印Banner 也就是我们启动应用时控制台打印出的Spring 的 logo了,这个也可以自定义</span></span><br><span class="line">           <span class="comment">// 有兴趣的自行百度自定义springboot banner, 我不喜欢这些花里胡哨的东西(才怪)</span></span><br><span class="line">Banner printedBanner = printBanner(environment);</span><br><span class="line">           <span class="comment">// 创建上下文,决定创建web的ioc还是普通的ioc</span></span><br><span class="line">context = createApplicationContext();</span><br><span class="line">           <span class="comment">// 实例化配置在spring.factories中的FailureAnalyzer应用启动失败的分析器,并返回</span></span><br><span class="line">analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">           <span class="comment">// 上下文准备,会广播通知listeners回调contextPrepared方法</span></span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">printedBanner);</span><br><span class="line">           <span class="comment">// 刷新上下文</span></span><br><span class="line">refreshContext(context);</span><br><span class="line">           <span class="comment">// 上下文刷新后的一些擦屁股工作</span></span><br><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line">           <span class="comment">// 容器已经创建和刷新完成,广播通知listeners回调finished方法</span></span><br><span class="line">listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">stopWatch.stop();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line"><span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">.logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">&#125;</span><br><span class="line">           <span class="comment">// 到此如果没有启动报错,那你的应用就已经启动完成了</span></span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们要说的是<code>springboot</code>自动配置, 但是我写这些做什么呢? 因为自动配置就是在上面的一些步骤中完成的,下面继续</p><p>总结一下,应用启动过程经历了哪些阶段呢. </p><ol><li><code>getRunListeners(...)</code>获取SpringApplicationRunListener监听器</li><li><code>prepareEnvironment(...)</code>应用环境准备</li><li><code>createApplicationContext(...)</code>创建应用上下文</li><li><code>prepareContext(...)</code>上下文准备</li><li><code>refreshContext(...)</code>刷新上下文</li><li><code>afterRefresh(...)</code>上下文刷新完后的一些收尾工作</li></ol><h3 id="2-prepareEnvironment"><a href="#2-prepareEnvironment" class="headerlink" title="2. prepareEnvironment"></a>2. prepareEnvironment</h3><p><strong>容器环境准备阶段</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">prepareEnvironment</span><span class="params">(SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 存在就获取环境,不存在就创建环境</span></span><br><span class="line">    ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class="line">    <span class="comment">// 环境配置:</span></span><br><span class="line">    <span class="comment">// 1. 收集用户自定义的配置和系统环境变量</span></span><br><span class="line">    <span class="comment">// 2. 收集Profiles信息</span></span><br><span class="line">    configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">    <span class="comment">// 遍历listeners 调用 environmentPrepared</span></span><br><span class="line">    listeners.environmentPrepared(environment);</span><br><span class="line">    <span class="comment">// 把环境绑定到SpringApplication, 实际上是增加了一个K-V键值对==&gt;</span></span><br><span class="line">    <span class="comment">// "spring.main" = SpringApplication的Bindable对象</span></span><br><span class="line">    bindToSpringApplication(environment);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isCustomEnvironment) &#123;</span><br><span class="line">        <span class="comment">// 推断项目的环境,并把当前环境转换成项目所需要的环境</span></span><br><span class="line">        environment = <span class="keyword">new</span> EnvironmentConverter(getClassLoader())</span><br><span class="line">            .convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());</span><br><span class="line">    &#125;</span><br><span class="line">    ConfigurationPropertySources.attach(environment);</span><br><span class="line">    <span class="keyword">return</span> environment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-createApplicationContext"><a href="#3-createApplicationContext" class="headerlink" title="3. createApplicationContext"></a>3. createApplicationContext</h3><p><strong>根据是否为web环境来决定创建一个web应用或者非web应用的上下文</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title">createApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = <span class="keyword">this</span>.applicationContextClass;</span><br><span class="line">    <span class="keyword">if</span> (contextClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 根据环境来创建对应的上下文, 下面的值的包名我省略了</span></span><br><span class="line">            <span class="comment">//DEFAULT_CONTEXT_CLASS: "AnnotationConfigApplicationContext";</span></span><br><span class="line">            <span class="comment">//DEFAULT_SERVLET_WEB_CONTEXT_CLASS: "AnnotationConfigServletWebServerApplicationContext";</span></span><br><span class="line">            <span class="comment">//DEFAULT_REACTIVE_WEB_CONTEXT_CLASS: "AnnotationConfigReactiveWebServerApplicationContext";</span></span><br><span class="line">            <span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;</span><br><span class="line">                <span class="keyword">case</span> SERVLET:</span><br><span class="line">                    contextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> REACTIVE:</span><br><span class="line">                    contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                <span class="string">"Unable create a default ApplicationContext, "</span></span><br><span class="line">                + <span class="string">"please specify an ApplicationContextClass"</span>,</span><br><span class="line">                ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建并返回应用上下文</span></span><br><span class="line">    <span class="keyword">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-prepareContext"><a href="#4-prepareContext" class="headerlink" title="4. prepareContext"></a>4. prepareContext</h3><p><strong>上下文的一些成员变量初始化工作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(ConfigurableApplicationContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">      ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">      ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">   context.setEnvironment(environment);</span><br><span class="line">    <span class="comment">// 做了三件事:</span></span><br><span class="line">    <span class="comment">// 1. 注册beanNameGenerator到Context中</span></span><br><span class="line">    <span class="comment">// 2. 为Context设置资源加载器resourceLoader</span></span><br><span class="line">    <span class="comment">// 3. 为Context设置类加载器</span></span><br><span class="line">    <span class="comment">// 4. 为Context设置ConversionService, ConversionService是提供值转换服务的</span></span><br><span class="line">   postProcessApplicationContext(context);</span><br><span class="line">    <span class="comment">// 触发ApplicationContextInitializer初始化方法,初始化上下文</span></span><br><span class="line">   applyInitializers(context);</span><br><span class="line">    <span class="comment">// 遍历触发listener的contextPrepared方法</span></span><br><span class="line">   listeners.contextPrepared(context);</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">      logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">      logStartupProfileInfo(context);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Add boot specific singleton beans  把命令行参数添加到ioc中</span></span><br><span class="line">   context.getBeanFactory().registerSingleton(<span class="string">"springApplicationArguments"</span>,</span><br><span class="line">         applicationArguments);</span><br><span class="line">   <span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">      context.getBeanFactory().registerSingleton(<span class="string">"springBootBanner"</span>, printedBanner);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">       ((DefaultListableBeanFactory) beanFactory)</span><br><span class="line">        .setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// Load the sources</span></span><br><span class="line">   Set&lt;Object&gt; sources = getSources();</span><br><span class="line">   Assert.notEmpty(sources, <span class="string">"Sources must not be empty"</span>);</span><br><span class="line">    <span class="comment">// 加载上下文:</span></span><br><span class="line">    <span class="comment">// 1. 实例化 BeanDefinitionLoader</span></span><br><span class="line">    <span class="comment">// 2. 执行load()方法</span></span><br><span class="line">    <span class="comment">//  2.1 加载启动类上的注解、解析注解元信息、</span></span><br><span class="line">   load(context, sources.toArray(<span class="keyword">new</span> Object[sources.size()]));</span><br><span class="line">    <span class="comment">// 遍历listener调动contextLoaded上下文加载完成方法</span></span><br><span class="line">   listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// load()最终会到AnnotatedBeanDefinitionReader#doRegisterBean方法,看看做了些啥</span></span><br><span class="line">&lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">doRegisterBean</span><span class="params">(Class&lt;T&gt; annotatedClass, @Nullable Supplier&lt;T&gt; instanceSupplier, @Nullable String name, @Nullable Class&lt;? extends Annotation&gt;[] qualifiers, BeanDefinitionCustomizer... definitionCustomizers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分析启动类的注解的信息</span></span><br><span class="line">    AnnotatedGenericBeanDefinition abd = <span class="keyword">new</span> AnnotatedGenericBeanDefinition(annotatedClass);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.conditionEvaluator.shouldSkip(abd.getMetadata())) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Supplier无参数有返回值的接口方法</span></span><br><span class="line">    abd.setInstanceSupplier(instanceSupplier);</span><br><span class="line">    <span class="comment">//检查scope，实例中没有指定，默认是singleton</span></span><br><span class="line">    ScopeMetadata scopeMetadata = <span class="keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(abd);</span><br><span class="line">    abd.setScope(scopeMetadata.getScopeName());</span><br><span class="line">    <span class="comment">////获取bean的名字，这里是启动类</span></span><br><span class="line">    String beanName = (name != <span class="keyword">null</span> ? name : <span class="keyword">this</span>.beanNameGenerator.generateBeanName(abd, <span class="keyword">this</span>.registry));</span><br><span class="line">    <span class="comment">// 对于是否是@lazy，是否使用了@primary</span></span><br><span class="line">    AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);</span><br><span class="line">    <span class="keyword">if</span> (qualifiers != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;? extends Annotation&gt; qualifier : qualifiers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Primary.class == qualifier) &#123;</span><br><span class="line">                abd.setPrimary(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Lazy.class == qualifier) &#123;</span><br><span class="line">                abd.setLazyInit(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                abd.addQualifier(<span class="keyword">new</span> AutowireCandidateQualifier(qualifier));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (BeanDefinitionCustomizer customizer : definitionCustomizers) &#123;</span><br><span class="line">        customizer.customize(abd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据注解信息生产BeanDefinition</span></span><br><span class="line">    BeanDefinitionHolder definitionHolder = <span class="keyword">new</span> BeanDefinitionHolder(abd, beanName);</span><br><span class="line">    <span class="comment">// 根据Bean的作用域，创建相应的代理对象</span></span><br><span class="line">    definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">    <span class="comment">// 将Bean加入到beanDefinitionMap中</span></span><br><span class="line">    BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-refreshContext"><a href="#5-refreshContext" class="headerlink" title="5. refreshContext"></a>5. refreshContext</h3><p>最终会定位到<code>org.springframework.context.support.AbstractApplicationContext#refresh</code>方法,  除此之外最后还会注册<code>ShutdownHook</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">      <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">      <span class="comment">// 1. 清除缓存</span></span><br><span class="line">      <span class="comment">// 2. 初始化所有在上下文环境中的占位符配置</span></span><br><span class="line">      <span class="comment">// 3. 校验所有required的配置是否已经被解析完成</span></span><br><span class="line">      prepareRefresh();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">      <span class="comment">// 通知子类刷新Bean工厂</span></span><br><span class="line">      <span class="comment">//  1. 为BeanFactory设置了一个ID, 就是在yaml文件中配置的spring.application.name</span></span><br><span class="line">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">      <span class="comment">// 1. 为BeanFactory设置类加载器</span></span><br><span class="line">      <span class="comment">// 2. 设置表达式解析器StandardBeanExpressionResolver</span></span><br><span class="line">      <span class="comment">// 3. 设置配置文件注册器ResourceEditorRegistrar</span></span><br><span class="line">      <span class="comment">// 4. 设置Bean的后置处理器</span></span><br><span class="line">      <span class="comment">// 不一一列举了,下面看图</span></span><br><span class="line">      prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">         <span class="comment">// 1. 添加子类自定义的Bean后置处理器</span></span><br><span class="line">         <span class="comment">// 2. 扫描basePackage下的类,按照需求加入到容器</span></span><br><span class="line">         <span class="comment">// 3. 把带有Spring注解的类加入到容器</span></span><br><span class="line">         postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">         <span class="comment">// 调用IOC容器中所有的Bean工厂处理器 BeanDefinitionRegistryPostProcessor、BeanFactoryPostProcessor</span></span><br><span class="line">         <span class="comment">// 1. 配置类后置处理器 ConfigurationClassPostProcessor 解析 配置类 转换为 BeanDefinition</span></span><br><span class="line">         <span class="comment">//    1.1 @ComponentScan注解配置的basePackage</span></span><br><span class="line">         <span class="comment">//    1.2 @Import注解导入的配置类</span></span><br><span class="line">         <span class="comment">//    1.3 @ImportResource注解导入的xml文件</span></span><br><span class="line">         <span class="comment">//    1.4 @Bean注解的方法</span></span><br><span class="line">         <span class="comment">//    1.5 @PropertySource注解导入的.properties配置文件</span></span><br><span class="line">         <span class="comment">//    1.6 处理所有的SpringBoot配置类</span></span><br><span class="line">         <span class="comment">// 2. 后置处理器太多了, 功能列不过来了</span></span><br><span class="line">         invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">         <span class="comment">// 注册所有 用于拦截Bean创建的BeanProcessor</span></span><br><span class="line">         registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">         <span class="comment">// 初始化MessageSource, 供i18n用的</span></span><br><span class="line">         initMessageSource();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">         <span class="comment">// 初始化事件广播器, 在这之前的listener都是遍历直接调用的方法, 从这里开始,listener会通过接受广播的方式回调</span></span><br><span class="line">         initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">         <span class="comment">// 初始化其他在特殊容器中的Bean,比如父子容器</span></span><br><span class="line">         <span class="comment">// 比如在web容器中会初始化TomcatWebServer</span></span><br><span class="line">         onRefresh();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">         <span class="comment">// 检查并注册listener到广播器</span></span><br><span class="line">         registerListeners();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">         <span class="comment">// 初始化所有的非懒加载的单例对象</span></span><br><span class="line">         <span class="comment">// 需要注意的是在AbstractAutowireCapableBeanFactory#createBean(String, RootBeanDefinition, Object[])</span></span><br><span class="line">         <span class="comment">// 这个方法中有一段如下代码</span></span><br><span class="line">         <span class="comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span><br><span class="line">     <span class="comment">// Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span></span><br><span class="line">         <span class="comment">// 方法注释的意思是给BeanPostProcessor一个返回目标接口的代理对象的机会, 具体可查阅和</span></span><br><span class="line">         <span class="comment">// InstantiationAwareBeanPostProcessor相关的资料</span></span><br><span class="line">         finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">         <span class="comment">// 完成刷新: </span></span><br><span class="line">         <span class="comment">// 1. 清除各种缓存</span></span><br><span class="line">         <span class="comment">// 2. 初始化生命周期处理器</span></span><br><span class="line">         <span class="comment">// 3. 发布ContextRefreshedEvent事件</span></span><br><span class="line">         <span class="comment">// 4. 启动WebServer</span></span><br><span class="line">         <span class="comment">// 5. 发布ServletWebServerInitializedEvent时间</span></span><br><span class="line">         finishRefresh();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                  <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">         destroyBeans();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">         cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">         <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">         resetCommonCaches();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="prepareBeanFactory"><a href="#prepareBeanFactory" class="headerlink" title="prepareBeanFactory"></a>prepareBeanFactory</h4><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxlo3y71fbj31610u04gy.jpg" alt="image-20181126190231737"></p><h3 id="6-afterRefresh"><a href="#6-afterRefresh" class="headerlink" title="6. afterRefresh"></a>6. afterRefresh</h3><p>这个阶段SpringBoot没有具体的实现,留给开发者自定义子类去实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Called after the context has been refreshed.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context the application context</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args the application arguments</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterRefresh</span><span class="params">(ConfigurableApplicationContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">      ApplicationArguments args)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-附件"><a href="#4-附件" class="headerlink" title="4. 附件"></a>4. 附件</h2><h5 id="ConditionalOnProperty注解"><a href="#ConditionalOnProperty注解" class="headerlink" title="@ConditionalOnProperty注解"></a>@ConditionalOnProperty注解</h5><h6 id="一、-ConditionalOnProperty-结构"><a href="#一、-ConditionalOnProperty-结构" class="headerlink" title="一、@ConditionalOnProperty 结构"></a>一、@ConditionalOnProperty 结构</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)  </span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)  </span><br><span class="line"><span class="meta">@Documented</span>  </span><br><span class="line"><span class="meta">@Conditional</span>(&#123;OnPropertyCondition.class&#125;)  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnProperty &#123;  </span><br><span class="line">    <span class="comment">//数组，获取对应property名称的值，不可与name同时使用  </span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//property名称的前缀，可有可无</span></span><br><span class="line">    <span class="function">String <span class="title">prefix</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//数组，property完整名称或部分名称（可与prefix组合使用，组成完整的property名称），不可与value同时使用 </span></span><br><span class="line">    String[] name() <span class="keyword">default</span> &#123;&#125;; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//可与name组合使用，比较获取到的属性值与havingValue给定的值是否相同，相同才加载配置  </span></span><br><span class="line">    <span class="function">String <span class="title">havingValue</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//缺少该property时是否可以加载。如果为true，没有该property也会正常加载；反之报错</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matchIfMissing</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//是否可以松散匹配  </span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">relaxedNames</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="二、-ConditionalOnProperty-用法"><a href="#二、-ConditionalOnProperty-用法" class="headerlink" title="二、@ConditionalOnProperty 用法"></a>二、@ConditionalOnProperty 用法</h6><p><strong>1. 有如下spring boot代码和yml配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"com.glmapper.hello.one"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloOneAutoconfigure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml配置如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试 @ConditionalOnProperty(value = "com.glmapper.hello.one")</span></span><br><span class="line"><span class="comment">#com.glmapper.hello.one:        # 正常</span></span><br><span class="line"><span class="comment">#com.glmapper.hello.one: 1      # 正常</span></span><br><span class="line"><span class="comment">#com.glmapper.hello.one: null   # 正常</span></span><br><span class="line"><span class="comment">#com.glmapper.hello.one: true   # 正常</span></span><br><span class="line"><span class="comment">#com.glmapper.hello.one: false  # 失效</span></span><br></pre></td></tr></table></figure></p><p><strong>2. 有如下spring boot代码和yml配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"com.glmapper.hello.two"</span>, havingValue = <span class="string">"2"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTwoAutoconfigure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml配置如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#matchIfMissing = true表示 : 配置项不存在则生效, matchIfMissing 默认为 false 表示配置项不存在则失效</span></span><br><span class="line"><span class="comment">#配置项存在则必须值为2才生效</span></span><br><span class="line"><span class="string">com.glmapper.hello.two:</span> <span class="number">2</span>        <span class="comment"># 正常</span></span><br><span class="line"><span class="string">com.glmapper.hello.two:</span> <span class="number">9</span>        <span class="comment"># 失效</span></span><br><span class="line"><span class="string">com.glmapper.hello.two:</span>          <span class="comment"># 失效</span></span><br><span class="line"><span class="string">com.glmapper.hello.two:</span> <span class="literal">true</span>     <span class="comment"># 失效</span></span><br></pre></td></tr></table></figure></p><blockquote><p>当且仅当配置文件中的Value和havingValue的值一致时才加载成功<br><strong>3. 有如下spring boot代码和yml配置</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"com.glmapper.hello"</span>, name = &#123;<span class="string">"three"</span>, <span class="string">"four"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloThreeFourAutoconfigure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml配置如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试 @ConditionalOnProperty(prefix = "com.glmapper.hello", name = &#123;"three", "four"&#125;)</span></span><br><span class="line"><span class="comment">#表示 com.glmapper.hello.three 和 com.glmapper.hello.four 都存在才生效, 缺一不可</span></span><br><span class="line"><span class="string">com.glmapper.hello:</span>          <span class="comment"># 正常</span></span><br><span class="line"><span class="attr">  three:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  four:</span> <span class="number">4</span></span><br><span class="line"><span class="string">com.glmapper.hello:</span>          <span class="comment"># 失效</span></span><br><span class="line"><span class="attr">  three:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p><strong>4. 有如下spring boot代码和yml配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"com.glmapper.hello"</span>, name = &#123;<span class="string">"five"</span>, <span class="string">"six"</span>&#125;, havingValue = <span class="string">"123"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloFiveSixAutoconfigure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml 配置如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试 @ConditionalOnProperty(prefix = "com.glmapper.hello", name = &#123;"five", "six"&#125;, havingValue="123", matchIfMissing = true)</span></span><br><span class="line"><span class="comment">#matchIfMissing = true表示 : 配置项不存在则生效, matchIfMissing 默认为 false 表示配置项不存在则失效</span></span><br><span class="line"><span class="string">com.glmapper.hello:</span>          <span class="comment"># 正常</span></span><br><span class="line"><span class="attr">  five:</span> <span class="number">123</span></span><br><span class="line"><span class="attr">  six:</span> <span class="number">123</span></span><br><span class="line"><span class="string">com.glmapper.hello:</span>          <span class="comment"># 失效</span></span><br><span class="line"><span class="attr">  five:</span> <span class="number">1230</span></span><br><span class="line"><span class="attr">  six:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><blockquote><p>yml不配置相关参数,正常启动，当 matchIfMissing = true 时，即使没有 <code>object.pool.size</code> 属性也会加载正常 </p></blockquote><h6 id="三、-ConditionalOnProperty-应用场景"><a href="#三、-ConditionalOnProperty-应用场景" class="headerlink" title="三、 @ConditionalOnProperty 应用场景"></a>三、 @ConditionalOnProperty 应用场景</h6><ol><li>通过 <code>@ConditionalOnProperty</code> 来控制 <code>Configuration</code> 是否生效</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0-说明&quot;&gt;&lt;a href=&quot;#0-说明&quot; class=&quot;headerlink&quot; title=&quot;0. 说明&quot;&gt;&lt;/a&gt;0. 说明&lt;/h2&gt;&lt;p&gt;环境配置清单&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;java version “1.8.0_161”&lt;br&gt;Java(
      
    
    </summary>
    
      <category term="spring boot" scheme="https://blog.milk4j.com/categories/spring-boot/"/>
    
    
      <category term="spring boot" scheme="https://blog.milk4j.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的一些遗忘点</title>
    <link href="https://blog.milk4j.com/2018/10/31/MySQL%E7%9A%84%E4%B8%80%E4%BA%9B%E9%81%97%E5%BF%98%E7%82%B9/"/>
    <id>https://blog.milk4j.com/2018/10/31/MySQL的一些遗忘点/</id>
    <published>2018-10-31T05:59:00.000Z</published>
    <updated>2018-11-19T10:33:48.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Group-By-和-Order-By-一起使用"><a href="#一、Group-By-和-Order-By-一起使用" class="headerlink" title="一、Group By 和 Order By 一起使用"></a>一、Group By 和 Order By 一起使用</h2><p>order by 的列，必须是出现在group by 子句里的列 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>( <span class="string">`id`</span> ) <span class="keyword">FROM</span> <span class="string">`order`</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="string">`order_code`</span> , <span class="string">`created_at`</span></span><br><span class="line"><span class="comment">-- order by 的列，必须是出现在 group by 子句里的列 </span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`created_at`</span> <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h2 id="二、忘记root密码"><a href="#二、忘记root密码" class="headerlink" title="二、忘记root密码"></a>二、忘记root密码</h2><p>具体步骤如下：</p><ol><li><p>修改MySQL的配置文件（默认为/etc/my.cnf）,在[mysqld]下添加一行skip-grant-tables</p></li><li><p>保存配置文件后，重启MySQL服务 service mysqld restart</p></li><li><p>再次进入MySQL命令行 mysql -uroot -p,输入密码时直接回车，就会进入MySQL数据库了，这个时候按照常规流程修改root密码即可。依次输入：</p><blockquote><p>use mysql;    更改数据库<br>UPDATE user SET authentication_string=password(“passwd”) WHERE USER= ‘root’;  重设密码,注意我用的是5.7.22的数据库密码存储在authentication_string字段, 之前有的版本存储在password字段,具体看情况吧<br>flush privileges;  刷新MySQL的系统权限相关表，以防止更改后拒绝访问；或或者重启MySQL服务器</p></blockquote></li><li>密码修改完毕后，再按照步骤1中的流程，删掉配置文件中的那行，并且重启MySQL服务，新密码就生效了。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Group-By-和-Order-By-一起使用&quot;&gt;&lt;a href=&quot;#一、Group-By-和-Order-By-一起使用&quot; class=&quot;headerlink&quot; title=&quot;一、Group By 和 Order By 一起使用&quot;&gt;&lt;/a&gt;一、Group 
      
    
    </summary>
    
      <category term="mysql" scheme="https://blog.milk4j.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://blog.milk4j.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot Junit单元测试</title>
    <link href="https://blog.milk4j.com/2018/10/31/SpringBoot%20Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://blog.milk4j.com/2018/10/31/SpringBoot Junit单元测试/</id>
    <published>2018-10-31T05:59:00.000Z</published>
    <updated>2018-11-03T08:51:50.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JUnit中的注解"><a href="#一、JUnit中的注解" class="headerlink" title="一、JUnit中的注解"></a>一、JUnit中的注解</h2><ul><li>@BeforeClass：针对所有测试，只执行一次，且必须为static void</li><li>@Before：初始化方法，执行当前测试类的每个测试方法前执行。</li><li>@Test：测试方法，在这里可以测试期望异常和超时时间</li><li>@After：释放资源，执行当前测试类的每个测试方法后执行</li><li>@AfterClass：针对所有测试，只执行一次，且必须为static void</li><li>@Ignore：忽略的测试方法（只在测试类的时候生效，单独执行该测试方法无效）</li><li>@RunWith:可以更改测试运行器 ，缺省值 org.junit.runner.Runner</li></ul><p><strong>一个单元测试类执行顺序为：</strong></p><blockquote><p>@BeforeClass –&gt; @Before –&gt; @Test –&gt; @After –&gt; @AfterClass </p></blockquote><p><strong>每一个测试方法的调用顺序为：</strong></p><blockquote><p>@Before –&gt; @Test –&gt; @After</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、JUnit中的注解&quot;&gt;&lt;a href=&quot;#一、JUnit中的注解&quot; class=&quot;headerlink&quot; title=&quot;一、JUnit中的注解&quot;&gt;&lt;/a&gt;一、JUnit中的注解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;@BeforeClass：针对所有测试，只执行一次，且必
      
    
    </summary>
    
      <category term="spring boot" scheme="https://blog.milk4j.com/categories/spring-boot/"/>
    
    
      <category term="Junit" scheme="https://blog.milk4j.com/tags/Junit/"/>
    
      <category term="单元测试" scheme="https://blog.milk4j.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+H2+Mybatis单元测试整合和坑</title>
    <link href="https://blog.milk4j.com/2018/10/31/SpringBoot+H2+Mybatis%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%95%B4%E5%90%88%E5%92%8C%E5%9D%91/"/>
    <id>https://blog.milk4j.com/2018/10/31/SpringBoot+H2+Mybatis单元测试整合和坑/</id>
    <published>2018-10-31T05:59:00.000Z</published>
    <updated>2018-10-31T08:46:11.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:h2:mem:testdb;MODE=MYSQL;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span> <span class="comment"># 随便填</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span> <span class="comment"># 随便填</span></span><br><span class="line"><span class="attr">    schema:</span> <span class="attr">classpath:db/schema.sql</span> <span class="comment"># 建表SQL语句</span></span><br><span class="line"><span class="attr">    data:</span> <span class="attr">classpath:db/data.sql</span> <span class="comment"># 数据导入SQL语句</span></span><br><span class="line"><span class="attr">    platform:</span> <span class="string">h2</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>然后在<code>src/test/resources</code>文件夹下面新建一个文件夹<code>db</code> ,然后新建 <code>schema.sql</code>和<code>data.sql</code></p><ul><li>schema.sql 文件是建表语句,内容不能为空,否则报错</li><li>data.sql文件是数据导入的SQL语句,内容不能为空,否则报错</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p><strong>一、不支持表级别的Comment</strong></p><p>建表SQL如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`testTable`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">varchar</span>(<span class="number">36</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'序号'</span>,</span><br><span class="line">  <span class="string">`StartArea`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出发区域'</span>,</span><br><span class="line">  <span class="string">`ArrivalArea`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'目的区域'</span>,</span><br><span class="line">  <span class="string">`Updater`</span> <span class="built_in">varchar</span>(<span class="number">36</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新人'</span>,</span><br><span class="line">  <span class="string">`UpdateTime`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span> ,</span><br><span class="line">  <span class="string">`Status`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'是否删除'</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>= <span class="string">'区域路线信息列表'</span> ;</span><br></pre></td></tr></table></figure><p>列名后面的COMMENT是支持的，但是最后面的 <code>ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT= &#39;区域路线信息列表&#39;</code>  中的COMMENT不支持。删掉后面的COMMENT即可。</p><p><strong>二、只支持最普通的引索结构,不支持BTREE引索结构</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`testTable`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">varchar</span>(<span class="number">36</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'序号'</span>,</span><br><span class="line">  <span class="string">`StartArea`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出发区域'</span>,</span><br><span class="line">  <span class="string">`ArrivalArea`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'目的区域'</span>,</span><br><span class="line">  <span class="string">`Updater`</span> <span class="built_in">varchar</span>(<span class="number">36</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新人'</span>,</span><br><span class="line">  <span class="string">`UpdateTime`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span> ,</span><br><span class="line">  <span class="string">`Status`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'是否删除'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>= <span class="string">'区域路线信息列表'</span> ;</span><br></pre></td></tr></table></figure><p>这种情况去掉 <code>USING BTREE</code> ,使用普通的引索就好了</p><p><strong>三、插入语句的单引号中的\’不支持</strong></p><p>有如下SQL，其中一个字段存的里面带有单引号：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`testTable`</span></span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(</span><br><span class="line"><span class="string">'1'</span>,</span><br><span class="line"><span class="string">'部门权限'</span>,</span><br><span class="line"><span class="string">'LoginName=\'&#123;1&#125;\''</span>,</span><br><span class="line"><span class="string">'1'</span>,</span><br><span class="line"><span class="string">'2'</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="string">'2016-05-27 14:30:49'</span>,</span><br><span class="line"><span class="string">'1'</span>,</span><br><span class="line"><span class="string">'1'</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="string">'1'</span> </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>MySQL支持双引号包含字符串，可以把内容中包含的单引号改为双引号，但其他情况可能会涉及到业务调整。另外，不能将包含字符串的单引号改为双引号，H2会把双引号中的内容当做列名处理。</p><p><strong>四、H2 的 UNIQUE KEY是数据库级别的</strong></p><p>H2 的 UNIQUE KEY不是表级别的，MySQL是表级别的，转为H2后容易出现UNIQUE KEY重复。删掉UNIQUE KEY或者修改KEY的名称即可。</p><p><strong>五、无法使用子查询</strong></p><p>目前没有办法解决,尽量避免使用吧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Maven依赖&quot;&gt;&lt;a href=&quot;#Maven依赖&quot; class=&quot;headerlink&quot; title=&quot;Maven依赖&quot;&gt;&lt;/a&gt;Maven依赖&lt;/h2&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
      <category term="spring boot" scheme="https://blog.milk4j.com/categories/spring-boot/"/>
    
    
      <category term="单元测试" scheme="https://blog.milk4j.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="spring boot" scheme="https://blog.milk4j.com/tags/spring-boot/"/>
    
      <category term="h2" scheme="https://blog.milk4j.com/tags/h2/"/>
    
  </entry>
  
  <entry>
    <title>我的ElasticSearch命令简记</title>
    <link href="https://blog.milk4j.com/2018/10/31/%E6%88%91%E7%9A%84ElasticSearch%E5%91%BD%E4%BB%A4%E7%AE%80%E8%AE%B0/"/>
    <id>https://blog.milk4j.com/2018/10/31/我的ElasticSearch命令简记/</id>
    <published>2018-10-31T05:59:00.000Z</published>
    <updated>2018-11-06T11:59:22.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用简单命令"><a href="#常用简单命令" class="headerlink" title="常用简单命令"></a>常用简单命令</h2><h3 id="条件删除数据"><a href="#条件删除数据" class="headerlink" title="条件删除数据"></a>条件删除数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 条件删除</span></span><br><span class="line">curl -XPOST <span class="string">"http://localhost:9200/opt-log-index/opt-log-type/_delete_by_query"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "query": &#123;</span></span><br><span class="line"><span class="string">    "match_all": &#123;&#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="删除index和数据"><a href="#删除index和数据" class="headerlink" title="删除index和数据"></a>删除index和数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE <span class="string">"http://localhost:9200/opt-log-index"</span></span><br></pre></td></tr></table></figure><h3 id="获取-mapping-结构"><a href="#获取-mapping-结构" class="headerlink" title="获取 mapping 结构"></a>获取 mapping 结构</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取所有的index的mapping</span></span><br><span class="line">curl -XGET <span class="string">"http://localhost:9200/_mapping"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定的index的mapping结构</span></span><br><span class="line">curl -XGET <span class="string">"http://localhost:9200/opt-log-index/_mapping"</span></span><br></pre></td></tr></table></figure><h3 id="创建index和mapping"><a href="#创建index和mapping" class="headerlink" title="创建index和mapping"></a>创建index和mapping</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建index和mapping</span></span><br><span class="line">curl -XPUT <span class="string">"http://localhost:9200/opt-log-index"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "settings":&#123;</span></span><br><span class="line"><span class="string">    "analysis":&#123;</span></span><br><span class="line"><span class="string">      "analyzer":&#123;</span></span><br><span class="line"><span class="string">        "ik":&#123;</span></span><br><span class="line"><span class="string">          "tokenizer":"ik_max_word"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  "mappings":&#123;</span></span><br><span class="line"><span class="string">    "opt-log-type":&#123;</span></span><br><span class="line"><span class="string">      "properties":&#123;</span></span><br><span class="line"><span class="string">        "id":&#123;</span></span><br><span class="line"><span class="string">          "type":"keyword"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "operator":&#123;</span></span><br><span class="line"><span class="string">          "type":"keyword"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "role":&#123;</span></span><br><span class="line"><span class="string">          "type":"keyword"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "operatorName":&#123;</span></span><br><span class="line"><span class="string">          "type":"text",</span></span><br><span class="line"><span class="string">          "analyzer":"ik",</span></span><br><span class="line"><span class="string">          "search_analyzer":"ik_max_word"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "remark":&#123;</span></span><br><span class="line"><span class="string">          "type":"keyword"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "operateType":&#123;</span></span><br><span class="line"><span class="string">          "type":"keyword"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "txId":&#123;</span></span><br><span class="line"><span class="string">          "type":"long"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "schemaName":&#123;</span></span><br><span class="line"><span class="string">          "type":"text",</span></span><br><span class="line"><span class="string">          "analyzer":"ik",</span></span><br><span class="line"><span class="string">          "search_analyzer":"ik_max_word"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "tableName":&#123;</span></span><br><span class="line"><span class="string">          "type":"text",</span></span><br><span class="line"><span class="string">          "analyzer":"ik",</span></span><br><span class="line"><span class="string">          "search_analyzer":"ik_max_word"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "afterData":&#123;</span></span><br><span class="line"><span class="string">          "type":"keyword"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "beforeData":&#123;</span></span><br><span class="line"><span class="string">          "type":"keyword"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "changeFields":&#123;</span></span><br><span class="line"><span class="string">          "type":"keyword"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "createdAt":&#123;</span></span><br><span class="line"><span class="string">          "type":"date",</span></span><br><span class="line"><span class="string">          "format":"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "updatedAt":&#123;</span></span><br><span class="line"><span class="string">          "type":"date",</span></span><br><span class="line"><span class="string">          "format":"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h4 id="查询所有数据"><a href="#查询所有数据" class="headerlink" title="查询所有数据"></a>查询所有数据</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">"http://localhost:9200/opt-log-index/opt-log-type/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "from": 0, </span></span><br><span class="line"><span class="string">  "size": 20, </span></span><br><span class="line"><span class="string">  "query": &#123;</span></span><br><span class="line"><span class="string">    "bool": &#123;</span></span><br><span class="line"><span class="string">      "must": [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          "match_all": &#123;&#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  "_source": &#123;</span></span><br><span class="line"><span class="string">    "excludes": [</span></span><br><span class="line"><span class="string">      "beforeData"</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><h4 id="精准匹配"><a href="#精准匹配" class="headerlink" title="精准匹配"></a>精准匹配</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">"http://localhost:9200/opt-log-index/opt-log-type/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "query": &#123;</span></span><br><span class="line"><span class="string">    "bool": &#123;</span></span><br><span class="line"><span class="string">      "must": [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          "term": &#123;</span></span><br><span class="line"><span class="string">            "tableName": "parana_item_detail"</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  "_source": &#123;</span></span><br><span class="line"><span class="string">    "excludes": [</span></span><br><span class="line"><span class="string">      "beforeData","schemaName"</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  "sort": [</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      "createdAt": &#123;</span></span><br><span class="line"><span class="string">        "order": "desc"</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用简单命令&quot;&gt;&lt;a href=&quot;#常用简单命令&quot; class=&quot;headerlink&quot; title=&quot;常用简单命令&quot;&gt;&lt;/a&gt;常用简单命令&lt;/h2&gt;&lt;h3 id=&quot;条件删除数据&quot;&gt;&lt;a href=&quot;#条件删除数据&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="elasticsearch" scheme="https://blog.milk4j.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="https://blog.milk4j.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin在IntelliJ Idea中无法生成 spring-configuration-metadata.json 文件</title>
    <link href="https://blog.milk4j.com/2018/09/05/%E7%94%A8Kotlin%E5%9C%A8IntelliJ-Idea%E4%B8%AD%E6%97%A0%E6%B3%95%E7%94%9F%E6%88%90-spring-configuration-metadata-json-%E6%96%87%E4%BB%B6/"/>
    <id>https://blog.milk4j.com/2018/09/05/用Kotlin在IntelliJ-Idea中无法生成-spring-configuration-metadata-json-文件/</id>
    <published>2018-09-05T11:12:09.000Z</published>
    <updated>2018-10-31T01:32:08.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在百度搜索关键词,搜索到了 Stack Overflow 有相关问题</p><blockquote><p>spring-configuration-metadata.json file is not generated in IntelliJ Idea for Kotlin @ConfigurationProperties class</p></blockquote><p>原文链接: </p><blockquote><p><a href="https://stackoverflow.com/questions/37858833/spring-configuration-metadata-json-file-is-not-generated-in-intellij-idea-for-ko" target="_blank" rel="noopener">https://stackoverflow.com/questions/37858833/spring-configuration-metadata-json-file-is-not-generated-in-intellij-idea-for-ko</a></p></blockquote><p>按照里面的方法试了一下,失败了,然后继续百度,在spring-boot的官方文档中找到了相关线索, 直达链接:</p><blockquote><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-kotlin.html#boot-features-kotlin-configuration-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-kotlin.html#boot-features-kotlin-configuration-properties</a></p></blockquote><p>在spring官方文档中找到了kotlin的官方示例,链接地址:</p><blockquote><p><a href="https://kotlinlang.org/docs/reference/kapt.html#using-in-maven" target="_blank" rel="noopener">https://kotlinlang.org/docs/reference/kapt.html#using-in-maven</a></p></blockquote><p>下面是我参考上面的文档所得出来的可用方案</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="一、添加插件"><a href="#一、添加插件" class="headerlink" title="一、添加插件"></a>一、添加插件</h2><p>在<strong>pom</strong>文件中添加插件,没有写版本号是因为项目继承了<code>spring-boot-starter-parent</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">proc</span>&gt;</span>none<span class="tag">&lt;/<span class="name">proc</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Replacing default-compile as it is treated specially by maven --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>none<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Replacing default-testCompile as it is treated specially by maven --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-testCompile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>none<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>java-compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>java-test-compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kotlin-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jetbrains.kotlin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">args</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-Xjsr305=strict<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">args</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">compilerPlugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">compilerPlugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jvmTarget</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">jvmTarget</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>kapt<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>kapt<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sourceDirs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">sourceDir</span>&gt;</span>src/main/kotlin<span class="tag">&lt;/<span class="name">sourceDir</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">sourceDir</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">sourceDir</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">sourceDirs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- Specify your annotation processors here. --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">annotationProcessorPath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">annotationProcessorPath</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jetbrains.kotlin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kotlin-maven-allopen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、使用插件生成"><a href="#二、使用插件生成" class="headerlink" title="二、使用插件生成"></a>二、使用插件生成</h2><p>我之前也是使用了同样的插件,但是始终生成不出来文件,直到看了kotlin官方文档我才发现有这么一句话</p><p><img src="https://oscimg.oschina.net/oscnet/32fe5bfc75b9a2618f9da47c91e0873bb16.jpg" alt="img"></p><p>文字的意思是: </p><p><strong>“请注意，kapt仍然不支持IntelliJ IDEA自己的构建系统。当你想要重新运行注释处理器时，可以从“Maven Projects”工具栏启动构建。”</strong></p><p><strong>很是坑爹啊,你也不标红也不加粗是想怎样啊</strong></p><p>好了,那就按照他说的做吧, 双击下面的插件按钮就可以生产<code>spring-configuration-metadata.json</code>文件了</p><p><img src="https://oscimg.oschina.net/oscnet/3622930814489ff201bd0db85aa89873930.jpg" alt="img"></p><p><strong>参考文档:</strong></p><blockquote><p><a href="https://stackoverflow.com/questions/37858833/spring-configuration-metadata-json-file-is-not-generated-in-intellij-idea-for-ko" target="_blank" rel="noopener">https://stackoverflow.com/questions/37858833/spring-configuration-metadata-json-file-is-not-generated-in-intellij-idea-for-ko</a></p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-kotlin.html#boot-features-kotlin-configuration-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-kotlin.html#boot-features-kotlin-configuration-properties</a></p><p>&lt;<a href="https://kotlinlang.org/docs/reference/kapt.html" target="_blank" rel="noopener">https://kotlinlang.org/docs/reference/kapt.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;在百度搜索关键词,搜索到了 Stack Overflow 有相关问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;spring-
      
    
    </summary>
    
      <category term="kotlin" scheme="https://blog.milk4j.com/categories/kotlin/"/>
    
    
      <category term="spring boot" scheme="https://blog.milk4j.com/tags/spring-boot/"/>
    
      <category term="kotlin" scheme="https://blog.milk4j.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Docker使用</title>
    <link href="https://blog.milk4j.com/2018/08/11/%E3%80%9002%E3%80%91Docker%20%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.milk4j.com/2018/08/11/【02】Docker 使用/</id>
    <published>2018-08-11T14:59:00.000Z</published>
    <updated>2018-12-22T06:26:35.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h1><h4 id="一-docker使用"><a href="#一-docker使用" class="headerlink" title="一. docker使用"></a><strong>一. docker使用</strong></h4><h5 id="1-docker-ps-查看运行中的容器"><a href="#1-docker-ps-查看运行中的容器" class="headerlink" title="　　1. docker ps 查看运行中的容器"></a>　　1. docker ps 查看运行中的容器</h5><h5 id="2-docker-images-查看docker镜像"><a href="#2-docker-images-查看docker镜像" class="headerlink" title="　　2. docker images 查看docker镜像"></a>　　2. docker images 查看docker镜像</h5><h5 id="3-docker-rm-id-容器id-删除容器（容器id可以通过docker-ps查看，容器必须停止后才能删除）"><a href="#3-docker-rm-id-容器id-删除容器（容器id可以通过docker-ps查看，容器必须停止后才能删除）" class="headerlink" title="　　3. docker rm id(容器id)  删除容器（容器id可以通过docker ps查看，容器必须停止后才能删除）"></a>　　3. docker rm id(容器id)  删除容器（容器id可以通过docker ps查看，容器必须停止后才能删除）</h5><h6 id="3-1-删除全部的容器-docker-rm-docker-ps-a-q"><a href="#3-1-删除全部的容器-docker-rm-docker-ps-a-q" class="headerlink" title="　　　　3.1 删除全部的容器 docker rm docker ps -a -q"></a>　　　　3.1 删除全部的容器 docker rm <code>docker ps -a -q</code></h6><h5 id="4-docker-stop-id-容器id-停止容器运行"><a href="#4-docker-stop-id-容器id-停止容器运行" class="headerlink" title="　　4. docker stop  id(容器id) 停止容器运行"></a>　　4. docker stop  id(容器id) 停止容器运行</h5><h5 id="5-docker-rmi-id-镜像id-删除镜像"><a href="#5-docker-rmi-id-镜像id-删除镜像" class="headerlink" title="　　5. docker rmi  id(镜像id) 删除镜像"></a>　　5. docker rmi  id(镜像id) 删除镜像</h5><h5 id="6-docker-pull-ubuntu-16-04-镜像名称-版本号-下载镜像"><a href="#6-docker-pull-ubuntu-16-04-镜像名称-版本号-下载镜像" class="headerlink" title="　　6. docker pull ubuntu:16.04(镜像名称:版本号) 下载镜像"></a>　　6. docker pull ubuntu:16.04(镜像名称:版本号) 下载镜像</h5><h5 id="7-docker-run-it-ubuntu-16-04-创建并运行容器容器"><a href="#7-docker-run-it-ubuntu-16-04-创建并运行容器容器" class="headerlink" title="　　7. docker run -it ubuntu:16.04 创建并运行容器容器"></a>　　7. docker run -it ubuntu:16.04 创建并运行容器容器</h5><p>　　　　-t 表示在新容器内指定一个伪终端或终端</p><p>　　　　-i 表示允许我们对容器内的 (STDIN) 进行交互</p><p>　　　　-p 指定映射端口</p><p>　　　　-d 在后台运行容器并打印容器ID</p><h6 id="7-1-docker-run-dit-ubuntu-16-04-创建并后台运行容器"><a href="#7-1-docker-run-dit-ubuntu-16-04-创建并后台运行容器" class="headerlink" title="　　　　7.1 docker run -dit ubuntu:16.04 创建并后台运行容器"></a>　　　　7.1 docker run -dit ubuntu:16.04 创建并后台运行容器</h6><h6 id="7-2-docker-run-ditp-8080-8080（主机端口-容器端口）-ubuntu-16-04-创建并后台运行容器且映射容器的端口"><a href="#7-2-docker-run-ditp-8080-8080（主机端口-容器端口）-ubuntu-16-04-创建并后台运行容器且映射容器的端口" class="headerlink" title="　　　　7.2 docker run -ditp 8080:8080（主机端口:容器端口） ubuntu:16.04 创建并后台运行容器且映射容器的端口"></a>　　　　7.2 docker run -ditp 8080:8080（主机端口:容器端口） ubuntu:16.04 创建并后台运行容器且映射容器的端口</h6><h5 id="8-docker-attach-id-容器id-进入正在运行中的容器环境"><a href="#8-docker-attach-id-容器id-进入正在运行中的容器环境" class="headerlink" title="　　8. docker attach id(容器id) 进入正在运行中的容器环境"></a>　　8. docker attach id(容器id) 进入正在运行中的容器环境</h5><h5 id="9-退出容器"><a href="#9-退出容器" class="headerlink" title="　　9. 退出容器"></a>　　9. 退出容器</h5><h6 id="9-1-exit-直接退出容器并终止容器运行"><a href="#9-1-exit-直接退出容器并终止容器运行" class="headerlink" title="　　　　9.1 exit 直接退出容器并终止容器运行"></a>　　　　9.1 exit 直接退出容器并终止容器运行</h6><h6 id="9-2-ctrl-p-ctrl-q-（快捷键）-退出容器，但是不会终止容器运行"><a href="#9-2-ctrl-p-ctrl-q-（快捷键）-退出容器，但是不会终止容器运行" class="headerlink" title="　　　　9.2 [ctrl+p]+[ctrl+q]（快捷键） 退出容器，但是不会终止容器运行"></a>　　　　9.2 [ctrl+p]+[ctrl+q]（快捷键） 退出容器，但是不会终止容器运行</h6><h5 id="10-docker-commit-m’版本标识’-id-容器id-ubuntu-16-04-镜像与版本号-提交镜像且生成镜像（可以通过该命令把搭建好的容器打包成一个新的镜像或者覆盖原镜像（即是修改原镜像内容，生成的镜像名与版本号相同就可以直接覆盖））"><a href="#10-docker-commit-m’版本标识’-id-容器id-ubuntu-16-04-镜像与版本号-提交镜像且生成镜像（可以通过该命令把搭建好的容器打包成一个新的镜像或者覆盖原镜像（即是修改原镜像内容，生成的镜像名与版本号相同就可以直接覆盖））" class="headerlink" title="　　10. docker commit -m’版本标识’ id(容器id) ubuntu:16.04(镜像与版本号)   提交镜像且生成镜像（可以通过该命令把搭建好的容器打包成一个新的镜像或者覆盖原镜像（即是修改原镜像内容，生成的镜像名与版本号相同就可以直接覆盖））"></a>　　10. docker commit -m’版本标识’ id(容器id) ubuntu:16.04(镜像与版本号)   提交镜像且生成镜像（可以通过该命令把搭建好的容器打包成一个新的镜像或者覆盖原镜像（即是修改原镜像内容，生成的镜像名与版本号相同就可以直接覆盖））</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker使用&quot;&gt;&lt;a href=&quot;#Docker使用&quot; class=&quot;headerlink&quot; title=&quot;Docker使用&quot;&gt;&lt;/a&gt;Docker使用&lt;/h1&gt;&lt;h4 id=&quot;一-docker使用&quot;&gt;&lt;a href=&quot;#一-docker使用&quot; class=&quot;
      
    
    </summary>
    
      <category term="docker" scheme="https://blog.milk4j.com/categories/docker/"/>
    
    
      <category term="docker" scheme="https://blog.milk4j.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker 安装redis</title>
    <link href="https://blog.milk4j.com/2018/08/05/Docker%20%E5%AE%89%E8%A3%85%20redis/"/>
    <id>https://blog.milk4j.com/2018/08/05/Docker 安装 redis/</id>
    <published>2018-08-05T14:59:00.000Z</published>
    <updated>2018-12-22T06:29:46.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-安装-Redis"><a href="#Docker-安装-Redis" class="headerlink" title="Docker 安装 Redis"></a>Docker 安装 Redis</h1><h5 id="下载镜像-创建运行容器"><a href="#下载镜像-创建运行容器" class="headerlink" title="下载镜像|创建运行容器"></a>下载镜像|创建运行容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line"><span class="meta">#</span>创建|运行容器</span><br><span class="line">docker run -d --name=myredis -p 6379:6379 redis</span><br></pre></td></tr></table></figure><h5 id="其他容器与-redis-容器通讯"><a href="#其他容器与-redis-容器通讯" class="headerlink" title="其他容器与 redis 容器通讯"></a>其他容器与 redis 容器通讯</h5><p>nginx容器需要与redis容器通信的话首先要知道它的ip地址，但是每次都手工获取容器的ip地址显然是一件繁琐的事情，于是我们需要修改容器的启动方式，加–link参数，建立其他容器与redis容器之间的联系。</p><p>删除掉之前的容器，现在重新修改 nginx容器的启动方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 使用 pwd 变量</span><br><span class="line">cd ~/nginx &amp;&amp; docker run -it -p 80:80 --name=mynginx --link=myredis:db -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/logs:/wwwlogs -d nginx</span><br><span class="line"></span><br><span class="line">docker run -it -p 80:80 --name=web --link=app1:app1 --link=app2:app2 --link=app3:app3 -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/logs:/wwwlogs -d nginx</span><br></pre></td></tr></table></figure><p>这次加入了两个参数：</p><ul><li><strong>-v /code:/usr/src/app</strong> 表示把宿主机上的/code目录挂载到容器内的/usr/src/app目录，可以通过直接管理宿主机上的挂载目录来管理容器内部的挂载目录。</li><li><strong>–link=redis:db</strong> 表示把redis容器以db别名与该容器建立关系，在该容器内以db作为主机名表示了redis容器的主机地址。</li></ul><p>现在进入到其他容器，通过ping命令确认nginx容器能访问到redis容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ping db</span><br><span class="line">PING db (192.168.32.12): 56 data bytes</span><br><span class="line">64 bytes from 192.168.32.12: icmp_seq=0 ttl=64 time=0.463 ms</span><br><span class="line">64 bytes from 192.168.32.12: icmp_seq=1 ttl=64 time=0.086 ms</span><br><span class="line"><span class="meta">#</span>ping 命令找不到</span><br><span class="line"><span class="meta">$</span> apt-get update</span><br><span class="line"><span class="meta">$</span> apt-get install inetutils-ping</span><br></pre></td></tr></table></figure><h5 id="Redis-集群搭建"><a href="#Redis-集群搭建" class="headerlink" title="Redis 集群搭建"></a>Redis 集群搭建</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>创建 redis master 容器</span><br><span class="line"><span class="meta">$</span> docker run -d --name=redis_master -p 6380:6379 redis</span><br><span class="line"><span class="meta">#</span>两个  redis slave 容器</span><br><span class="line"><span class="meta">$</span> docker run -d --name=redis_slave_1 -p 6380:6379 --link=redis_master:master redis redis-server --slaveof master 6379</span><br><span class="line"><span class="meta">$</span> docker run -d --name=redis_slave_2 -p 6381:6379 --link=redis_master:master redis redis-server --slaveof master 6379</span><br></pre></td></tr></table></figure><p>现在写入到Redis主节点的数据都会在从节点上备份一份数据。</p><p><img src="https://pic4.zhimg.com/80/v2-b97bbd401b2f169c36a3b660206c1abe_hd.jpg" alt="img"></p><p>为了防止 master 宕机，再由Sentinel集群根据投票选举出slave节点作为新的master。</p><p>下面为Sentinel编写Dockerfile，在redis镜像的基础上作改动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM redis:latest</span><br><span class="line">COPY run-sentinel.sh /run-sentinel.sh</span><br><span class="line">COPY sentinel.conf /etc/sentinel.conf</span><br><span class="line">RUN chmod +x /run-sentinel.sh</span><br><span class="line">ENTRYPOINT ["/run-sentinel.sh"]</span><br></pre></td></tr></table></figure><p>Sentinel的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">port 26379</span><br><span class="line">dir /tmp</span><br><span class="line">sentinel monitor master redis-master 6379 2</span><br><span class="line">sentinel down-after-milliseconds master 30000</span><br><span class="line">sentinel parallel-syncs master 1</span><br><span class="line">sentinel failover-timeout master 180000</span><br></pre></td></tr></table></figure><p>run-sentinel.sh：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">exec redis-server /etc/sentinel.conf --sentinel</span><br></pre></td></tr></table></figure><p>构建出Sentinel的镜像文件，容器运行的方式类似于redis：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -d --name=sentinel_1 --link=redis_master:redis-master [build_sentinel_image]</span><br><span class="line"><span class="meta">$</span> docker run -d --name=sentinel_2 --link=redis_master:redis-master [build_sentinel_image]</span><br><span class="line"><span class="meta">$</span> docker run -d --name=sentinel_3 --link=redis_master:redis-master [build_sentinel_image]</span><br></pre></td></tr></table></figure><p>这下Sentinel的容器也搭建起来了，应用的结构图如下：</p><p><img src="https://pic1.zhimg.com/80/v2-998b4229612939a15a00ec1905698ce4_hd.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-安装-Redis&quot;&gt;&lt;a href=&quot;#Docker-安装-Redis&quot; class=&quot;headerlink&quot; title=&quot;Docker 安装 Redis&quot;&gt;&lt;/a&gt;Docker 安装 Redis&lt;/h1&gt;&lt;h5 id=&quot;下载镜像-创建运行容器&quot;&gt;
      
    
    </summary>
    
      <category term="docker" scheme="https://blog.milk4j.com/categories/docker/"/>
    
    
      <category term="docker" scheme="https://blog.milk4j.com/tags/docker/"/>
    
      <category term="redis" scheme="https://blog.milk4j.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>docker 安装 nginx</title>
    <link href="https://blog.milk4j.com/2018/08/05/Docker%20%E5%AE%89%E8%A3%85%20nginx/"/>
    <id>https://blog.milk4j.com/2018/08/05/Docker 安装 nginx/</id>
    <published>2018-08-05T14:59:00.000Z</published>
    <updated>2018-12-22T06:29:12.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-安装-nginx"><a href="#Docker-安装-nginx" class="headerlink" title="Docker 安装 nginx"></a>Docker 安装 nginx</h1><h3 id="方式一：通过-pull-仓库镜像"><a href="#方式一：通过-pull-仓库镜像" class="headerlink" title="方式一：通过  pull 仓库镜像"></a>方式一：通过  pull 仓库镜像</h3><h4 id="一、下载镜像"><a href="#一、下载镜像" class="headerlink" title="一、下载镜像"></a>一、下载镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><h4 id="二、使用镜像创建容器"><a href="#二、使用镜像创建容器" class="headerlink" title="二、使用镜像创建容器"></a>二、使用镜像创建容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir -p ~/nginx/www ~/nginx/logs ~/nginx/conf</span><br><span class="line"><span class="meta">#</span>www目录将映射为nginx容器配置的虚拟目录</span><br><span class="line"><span class="meta">#</span>logs目录将映射为nginx容器的日志目录</span><br><span class="line"><span class="meta">#</span>conf目录里的配置文件将映射为nginx容器的配置文件</span><br><span class="line"><span class="meta">#</span>找一份默认的 nginx.conf 配置文件放在 conf 目录下,否则下面启动会报错</span><br><span class="line">docker run -p 80:80 --name web -v $PWD/www:/www -v  $PWD/logs:/wwwlogs -d nginx</span><br><span class="line">docker cp web:/etc/nginx/nginx.conf </span><br><span class="line"><span class="meta">#</span>删除容器后再运行下面的命令</span><br><span class="line">docker run -p 80:80 --name web --link=app1:app1 --link=app2:app2 --link=app3:app3 -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/conf/servers:/etc/nginx/conf.d -v $PWD/logs:/wwwlogs -d nginx</span><br><span class="line"><span class="meta">#</span>此时打开浏览器访问宿主机的 IP 就可看到 nginx 的界面了，安装启动成功</span><br><span class="line"><span class="meta">#</span>-d:让容器在后台运行。</span><br><span class="line"><span class="meta">#</span>-P:将容器内部使用的网络端口映射到我们使用的主机上。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>使用命令进入交互式终端</span><br><span class="line">docker exec -it mynginx /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>查看 IP</span><br><span class="line">ifconfig</span><br><span class="line"><span class="meta">#</span>发现找不到指令，需要安装 net-tools 工具依次执行，再执行 ifconfig</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install net-tools</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>在宿主机中查询容器的 IP，返回 json 串，里面包含了详细的容器信息，包括 IP ~</span><br><span class="line"><span class="meta">#</span>docker inspect [容器名|id]</span><br><span class="line">docker inspect mynginx</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li>-p 80:80：将容器的80端口映射到主机的80端口</li><li>–name  web：将容器命名为web</li><li>-v $PWD/www:/www：将主机中当前目录下的www挂载到容器的/www</li><li>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf：将主机中当前目录下的nginx.conf挂载到容器的/etc/nginx/nginx.conf</li><li>-v $PWD/logs:/wwwlogs：将主机中当前目录下的logs挂载到容器的/wwwlogs</li></ul><h3 id="方式二：通过-Dockerfile构建"><a href="#方式二：通过-Dockerfile构建" class="headerlink" title="方式二：通过 Dockerfile构建"></a>方式二：通过 Dockerfile构建</h3><h5 id="构建准备工作"><a href="#构建准备工作" class="headerlink" title="构建准备工作"></a>构建准备工作</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/nginx/www ~/nginx/logs ~/nginx/conf</span><br><span class="line">cd ~/nginx</span><br><span class="line">vi Dockerfile</span><br></pre></td></tr></table></figure><h5 id="在-Dockerfile-中输入如下内容："><a href="#在-Dockerfile-中输入如下内容：" class="headerlink" title="在 Dockerfile 中输入如下内容："></a>在 Dockerfile 中输入如下内容：</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#指定使用那个基础镜像</span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER ginkgo</span><br><span class="line">LABEL Discription="基于centos的nginx镜像" version="1.0"</span><br><span class="line">WORKDIR /usr/local/src</span><br><span class="line">RUN yum install -y wget</span><br><span class="line">RUN wget http://nginx.org/download/nginx-1.8.0.tar.gz</span><br><span class="line">RUN tar -zxvf nginx-1.8.0.tar.gz</span><br><span class="line">WORKDIR nginx-1.8.0</span><br><span class="line">#安装nginx所依赖的包</span><br><span class="line">RUN yum -y install gcc-c++</span><br><span class="line">RUN yum -y install pcre pcre-devel</span><br><span class="line">RUN yum -y install zlib zlib-devel</span><br><span class="line">RUN yum -y install openssl openssl-devel libssl-dev</span><br><span class="line">RUN ./configure</span><br><span class="line">RUN make</span><br><span class="line">RUN make install</span><br><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure><h5 id="通过Dockerfile-构建一个镜像"><a href="#通过Dockerfile-构建一个镜像" class="headerlink" title="通过Dockerfile 构建一个镜像"></a>通过Dockerfile 构建一个镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -t 镜像名 , "." 是Dockerfile 所在的目录，可以使用绝对路径</span><br><span class="line">docker build -t ginkgo/nginx .</span><br><span class="line"><span class="meta">#</span>查看镜像</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h5 id="构建-运行容器"><a href="#构建-运行容器" class="headerlink" title="构建|运行容器"></a>构建|运行容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>找一份默认的 nginx.conf 配置文件放在 ~/nginx/conf 目录下,否则下面启动会报错</span><br><span class="line">docker run -p 80:80 --name mynginx -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/logs:/wwwlogs -d nginx</span><br><span class="line"><span class="meta">#</span>此时打开浏览器访问宿主机的 IP 就可看到 nginx 的界面了，安装启动成功</span><br><span class="line"><span class="meta">#</span>-d:让容器在后台运行。</span><br><span class="line"><span class="meta">#</span>-P:将容器内部使用的网络端口映射到我们使用的主机上。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>使用命令进入交互式终端</span><br><span class="line">docker exec -it mynginx /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>查看 IP</span><br><span class="line">ifconfig</span><br><span class="line"><span class="meta">#</span>发现找不到指令，需要安装 net-tools 工具依次执行，再执行 ifconfig</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install net-tools</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>在宿主机中查询容器的 IP，返回 json 串，里面包含了详细的容器信息，包括 IP ~</span><br><span class="line">docker inspect [容器名|id]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-安装-nginx&quot;&gt;&lt;a href=&quot;#Docker-安装-nginx&quot; class=&quot;headerlink&quot; title=&quot;Docker 安装 nginx&quot;&gt;&lt;/a&gt;Docker 安装 nginx&lt;/h1&gt;&lt;h3 id=&quot;方式一：通过-pull-仓
      
    
    </summary>
    
      <category term="docker" scheme="https://blog.milk4j.com/categories/docker/"/>
    
    
      <category term="docker" scheme="https://blog.milk4j.com/tags/docker/"/>
    
      <category term="nginx" scheme="https://blog.milk4j.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Docker构建Epics</title>
    <link href="https://blog.milk4j.com/2018/08/05/Docker%E6%9E%84%E5%BB%BAEpics/"/>
    <id>https://blog.milk4j.com/2018/08/05/Docker构建Epics/</id>
    <published>2018-08-05T14:59:00.000Z</published>
    <updated>2018-12-22T06:30:41.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker构建Epics"><a href="#Docker构建Epics" class="headerlink" title="Docker构建Epics"></a>Docker构建Epics</h1><h2 id="基于MySQL-5-7-24镜像"><a href="#基于MySQL-5-7-24镜像" class="headerlink" title="基于MySQL:5.7.24镜像"></a>基于MySQL:5.7.24镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7.24</span><br><span class="line">docker run -p 3307:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7.24</span><br><span class="line">docker <span class="built_in">exec</span> -it mysql /bin/bash</span><br><span class="line"><span class="comment"># mysql 镜像是基于debian发行版Linux系统</span></span><br><span class="line">apt-get update <span class="comment"># 更新源</span></span><br><span class="line">apt-get install build-essential  </span><br><span class="line"><span class="comment"># 这个命令最方便，把所有要安装的全部安装好：build-essential是c语言的开发包，包含了gcc make gdb和libc函数库等很多工具。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保证perl gcc g++ c++ 都已安装</span></span><br><span class="line"><span class="built_in">which</span> perl </span><br><span class="line"><span class="built_in">which</span> gcc</span><br><span class="line"><span class="built_in">which</span> g++</span><br><span class="line"><span class="built_in">which</span> c++</span><br><span class="line"><span class="comment"># 编译中可能出现缺少 readline.h</span></span><br><span class="line">apt-get install libreadline-dev</span><br></pre></td></tr></table></figure><h2 id="准备安装"><a href="#准备安装" class="headerlink" title="准备安装"></a>准备安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir epics </span><br><span class="line"><span class="built_in">cd</span> epics</span><br><span class="line">mkdir extensions <span class="comment"># 存放扩展程序</span></span><br><span class="line"><span class="built_in">cd</span> /usr/src</span><br><span class="line">wget https://epics.anl.gov/download/base/base-3.15.5.tar.gz</span><br><span class="line">tar -vxzf base-3.15.5.tar.gz</span><br><span class="line">ln -s base-3.15.5.tar.gz base <span class="comment">#创建软连接</span></span><br><span class="line"><span class="built_in">cd</span> base</span><br><span class="line">./startup/EpicsHostArch <span class="comment"># 获取系统架构, 我的是linux-x86_64</span></span><br><span class="line"><span class="built_in">pwd</span> <span class="comment"># 输出 /home/parallels/epics/base</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vi .bashrc</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line"><span class="comment"># export EPICS_HOST_ARCH=linux-x86_64</span></span><br><span class="line"><span class="comment"># export HOST_ARCH=linux-x86_64</span></span><br><span class="line"><span class="comment"># 上面的linux-x86_64根据系统情况设置，具体参考base/configure/CONFIG_SITE</span></span><br><span class="line"><span class="comment"># export EPICS_EXTENSIONS=/home/parallels/epics/extensions</span></span><br><span class="line"><span class="comment"># export EPICS_BASE=/home/parallels/epics/base</span></span><br><span class="line"><span class="built_in">source</span> .bashrc <span class="comment"># 使环境变量生效</span></span><br><span class="line"><span class="built_in">cd</span> ~/epics/base/startup</span><br><span class="line">./EpicsHostArch <span class="comment"># 获取系统架构, 我的是linux-x86_64</span></span><br><span class="line"><span class="built_in">cd</span> ~/epics/base/configure</span><br><span class="line">vim CONFIG_SITE</span><br><span class="line"><span class="comment"># 填写下面几项值 , 下面的值来自于获取系统架构的输出</span></span><br><span class="line">CROSS_COMPILER_TARGET_ARCHS=linux-x86_64</span><br><span class="line">CROSS_COMPILER_HOST_ARCHS=linux-x86_64</span><br><span class="line">CROSS_COMPILER_RUNTEST_ARCHS=linux-x86_64</span><br></pre></td></tr></table></figure><p>安装Python3</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python3</span><br></pre></td></tr></table></figure><p>安装pip3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python3-pip</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker构建Epics&quot;&gt;&lt;a href=&quot;#Docker构建Epics&quot; class=&quot;headerlink&quot; title=&quot;Docker构建Epics&quot;&gt;&lt;/a&gt;Docker构建Epics&lt;/h1&gt;&lt;h2 id=&quot;基于MySQL-5-7-24镜像&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="docker" scheme="https://blog.milk4j.com/categories/docker/"/>
    
    
      <category term="docker" scheme="https://blog.milk4j.com/tags/docker/"/>
    
      <category term="epics" scheme="https://blog.milk4j.com/tags/epics/"/>
    
  </entry>
  
  <entry>
    <title>Epics编译安装</title>
    <link href="https://blog.milk4j.com/2018/08/05/Epics%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
    <id>https://blog.milk4j.com/2018/08/05/Epics编译安装/</id>
    <published>2018-08-05T14:59:00.000Z</published>
    <updated>2018-12-22T06:31:20.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Epics编译安装"><a href="#Epics编译安装" class="headerlink" title="Epics编译安装"></a>Epics编译安装</h1><h2 id="我的系统环境"><a href="#我的系统环境" class="headerlink" title="我的系统环境"></a>我的系统环境</h2><blockquote><p>macOS Mojave parallels desktop虚拟机系统: centos 7 linux-x86_64</p><p>Epics版本: <a href="https://epics.anl.gov/download/base/index.php" target="_blank" rel="noopener">3.15.5</a> 下载<a href="https://epics.anl.gov/download/base/base-3.15.5.tar.gz" target="_blank" rel="noopener">链接</a></p></blockquote><h3 id="记一笔"><a href="#记一笔" class="headerlink" title="记一笔:"></a>记一笔:</h3><p>parallels desktop下载的centos7 默认用户名是parallels 密码是需要设置的。软件没有自动设置。密码必须大于8位；</p><p>并且无法进行su命令，提示 Authentication failure。</p><p>这个问题产生的原因是由于系统默认是没有激活root用户的，需要我们手工进行操作，在命令行界面下，或者在终端中输入如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd</span><br><span class="line">Password：你当前的密码</span><br><span class="line">Enter new UNIX password：这个是root的密码</span><br><span class="line">Retype new UNIX password：重复root的密码</span><br></pre></td></tr></table></figure><p>然后会提示成功的信息。 在说明一点，使用su和sudo是有区别的，使用su切换用户需要输入所切换到的用户的密码，而使用sudo则是当前用户的密码。</p><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir epics </span><br><span class="line"><span class="built_in">cd</span> epics</span><br><span class="line">mkdir extensions <span class="comment"># 存放扩展程序</span></span><br><span class="line"><span class="built_in">cd</span> .. </span><br><span class="line">wget https://epics.anl.gov/download/base/base-3.15.5.tar.gz</span><br><span class="line">tar -vxzf base-3.15.5.tar.gz</span><br><span class="line">ln -s base-3.15.5.tar.gz base <span class="comment">#创建软连接</span></span><br><span class="line"><span class="built_in">cd</span> base</span><br><span class="line">./startup/EpicsHostArch <span class="comment"># 获取系统架构, 我的是linux-x86_64</span></span><br><span class="line"><span class="built_in">pwd</span> <span class="comment"># 输出 /home/parallels/epics/base</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vi .bashrc</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line"><span class="comment"># export EPICS_HOST_ARCH=linux-x86_64</span></span><br><span class="line"><span class="comment"># export HOST_ARCH=linux-x86_64</span></span><br><span class="line"><span class="comment"># 上面的linux-x86_64根据系统情况设置，具体参考base/configure/CONFIG_SITE</span></span><br><span class="line"><span class="comment"># export EPICS_EXTENSIONS=/home/parallels/epics/extensions</span></span><br><span class="line"><span class="comment"># export EPICS_BASE=/home/parallels/epics/base</span></span><br><span class="line"><span class="built_in">source</span> .bashrc <span class="comment"># 使环境变量生效</span></span><br><span class="line"><span class="built_in">cd</span> ~/epics/base/startup</span><br><span class="line">./EpicsHostArch <span class="comment"># 获取系统架构, 我的是linux-x86_64</span></span><br><span class="line"><span class="built_in">cd</span> ~/epics/base/configure</span><br><span class="line">vim CONFIG_SITE</span><br><span class="line"><span class="comment"># 填写下面几项值 , 下面的值来自于获取系统架构的输出</span></span><br><span class="line">CROSS_COMPILER_TARGET_ARCHS=linux-x86_64</span><br><span class="line">CROSS_COMPILER_HOST_ARCHS=linux-x86_64</span><br><span class="line">CROSS_COMPILER_RUNTEST_ARCHS=linux-x86_64</span><br></pre></td></tr></table></figure><p><strong>为了确保安装过程顺利</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译中可能出现缺少 readline.h</span></span><br><span class="line">sudo yum install readline-static.x86_64</span><br><span class="line"><span class="comment"># 确保环境安装了 g++ c++ gcc perl</span></span><br><span class="line"><span class="built_in">which</span> perl <span class="comment"># 输出 /usr/bin/perl表示安装了perl,其他三个类似</span></span><br><span class="line"><span class="comment"># 由于我的环境没有g++ 和 c++ ,安装一下</span></span><br><span class="line">sudo yum install gcc gcc-c++</span><br></pre></td></tr></table></figure><p>Make安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/epics/base <span class="comment"># 回到epics base的根目录</span></span><br><span class="line">make </span><br><span class="line"><span class="comment"># 下面就是漫长的等待...</span></span><br><span class="line"><span class="comment"># 如果没有什么问题就成功了,如果编译报缺失什么文件,安装后再依次执行 </span></span><br><span class="line"><span class="comment"># make distclean </span></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line"><span class="comment"># 我的make过程很顺利,花了大概1分钟,但是我在云主机上花了30多分钟</span></span><br><span class="line">ls </span><br><span class="line"><span class="comment"># bin  configure  db  dbd  documentation  html  include  lib  LICENSE  Makefile  README  src  startup  templates</span></span><br><span class="line">vi ~/.bashrc</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:/home/parallels/epics/base/bin/linux-x86_64</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"><span class="comment"># 生效环境变量</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>创建example软件和IOC环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/epics</span><br><span class="line">mkdir -p iocs/example</span><br><span class="line"><span class="built_in">cd</span> iocs</span><br><span class="line"><span class="built_in">cd</span> example</span><br><span class="line">makeBaseApp.pl -t example example</span><br><span class="line">makeBaseApp.pl -i -t example example</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># configure  exampleApp  iocBoot  Makefile</span></span><br><span class="line">make <span class="comment"># 等待完成</span></span><br><span class="line">ls</span><br><span class="line"><span class="comment"># bin  configure  db  dbd  exampleApp  include  iocBoot  lib  Makefile</span></span><br><span class="line"><span class="built_in">cd</span> iocBoot/iocexample/</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># envPaths  Makefile  README  st.cmd</span></span><br><span class="line">sudo chmod +x ./st.cmd</span><br><span class="line">./st.cmd</span><br><span class="line">epics&gt; dbl</span><br><span class="line">parallels:xxxExample</span><br><span class="line">parallels:compressExample</span><br><span class="line">parallels:calcExample</span><br><span class="line">parallels:calcExample1</span><br><span class="line">parallels:calc1</span><br><span class="line">parallels:calcExample2</span><br><span class="line">parallels:calc2</span><br><span class="line">parallels:calcExample3</span><br><span class="line">parallels:calc3</span><br><span class="line">parallels:aSubExample</span><br><span class="line">parallels:subExample</span><br><span class="line">parallels:aiExample</span><br><span class="line">parallels:aiExample1</span><br><span class="line">parallels:ai1</span><br><span class="line">parallels:aiExample2</span><br><span class="line">parallels:ai2</span><br><span class="line">parallels:aiExample3</span><br><span class="line">parallels:ai3</span><br><span class="line">epics&gt; dbpr parallels:ai1</span><br><span class="line">ASG:                DESC: Analog input No. 1                DISA: 0</span><br><span class="line">DISP: 0             DISV: 1             NAME: parallels:aiExample1</span><br><span class="line">RVAL: 0             SEVR: MAJOR         STAT: LOLO          SVAL: 0</span><br><span class="line">TPRO: 0             VAL: 0</span><br></pre></td></tr></table></figure><p>开启一个新终端,继续输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">camonitor parallels:aiExample</span><br></pre></td></tr></table></figure><p>mac os 安装问题</p><ol><li>EXTERN.h 文件缺失:是因为perl的原因, 解决方案 brew install perl-build</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Epics编译安装&quot;&gt;&lt;a href=&quot;#Epics编译安装&quot; class=&quot;headerlink&quot; title=&quot;Epics编译安装&quot;&gt;&lt;/a&gt;Epics编译安装&lt;/h1&gt;&lt;h2 id=&quot;我的系统环境&quot;&gt;&lt;a href=&quot;#我的系统环境&quot; class=&quot;head
      
    
    </summary>
    
      <category term="epics" scheme="https://blog.milk4j.com/categories/epics/"/>
    
    
      <category term="epics" scheme="https://blog.milk4j.com/tags/epics/"/>
    
  </entry>
  
  <entry>
    <title>线上系统常用命令</title>
    <link href="https://blog.milk4j.com/2018/08/05/%E7%BA%BF%E4%B8%8A%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://blog.milk4j.com/2018/08/05/线上系统常用命令/</id>
    <published>2018-08-05T14:59:00.000Z</published>
    <updated>2018-12-22T06:28:21.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线上系统常用命令"><a href="#线上系统常用命令" class="headerlink" title="线上系统常用命令"></a>线上系统常用命令</h1><h2 id="一、日志查找"><a href="#一、日志查找" class="headerlink" title="一、日志查找"></a>一、日志查找</h2><h3 id="1-日志内容查询"><a href="#1-日志内容查询" class="headerlink" title="1. 日志内容查询"></a>1. 日志内容查询</h3><h4 id="1-1-tail命令"><a href="#1-1-tail命令" class="headerlink" title="1.1 tail命令"></a>1.1 tail命令</h4><p><strong>一、tail命令语法</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">tail [ -f ][ -c Number | -n Number | -m Number | -b Number | -k Number ] [ File ]</span><br><span class="line">参数解释：</span><br><span class="line">-f 该参数用于监视File文件增长。</span><br><span class="line">-c Number 从 Number 字节位置读取指定文件</span><br><span class="line">-n Number 从 Number 行位置读取指定文件。</span><br><span class="line">-m Number 从 Number 多字节字符位置读取指定文件，比方你的文件假设包括中文字，假设指定-c参数，可能导致截断，但使用-m则会避免该问题。</span><br><span class="line">-b Number 从 Number 表示的512字节块位置读取指定文件。</span><br><span class="line">-k Number 从 Number 表示的1KB块位置读取指定文件。</span><br><span class="line">File 指定操作的目标文件名称</span><br><span class="line">上述命令中，都涉及到number，假设不指定，默认显示10行。Number前面可使用正负号，表示该偏移从顶部还是从尾部開始计算。</span><br><span class="line">tail可运行文件一般在/usr/bin/下。</span><br><span class="line"></span><br><span class="line">tail [OPTION]... [FILE]...</span><br><span class="line">Print the last 10 lines of each FILE to standard output.</span><br><span class="line">With more than one FILE, precede each with a header giving the file name.</span><br><span class="line">With no FILE, or when FILE is -, <span class="built_in">read</span> standard input.</span><br><span class="line"></span><br><span class="line">Mandatory arguments to long options are mandatory <span class="keyword">for</span> short options too.</span><br><span class="line">  -c, --bytes=K            output the last K bytes; or use -c +K to output</span><br><span class="line">                             bytes starting with the Kth of each file</span><br><span class="line">  -f, --follow[=&#123;name|descriptor&#125;]</span><br><span class="line">                           output appended data as the file grows;</span><br><span class="line">                             an absent option argument means <span class="string">'descriptor'</span></span><br><span class="line">  -F                       same as --follow=name --retry</span><br><span class="line">  -n, --lines=K            output the last K lines, instead of the last 10;</span><br><span class="line">                             or use -n +K to output starting with the Kth</span><br><span class="line">      --max-unchanged-stats=N</span><br><span class="line">                           with --follow=name, reopen a FILE <span class="built_in">which</span> has not</span><br><span class="line">                             changed size after N (default 5) iterations</span><br><span class="line">                             to see <span class="keyword">if</span> it has been unlinked or renamed</span><br><span class="line">                             (this is the usual <span class="keyword">case</span> of rotated <span class="built_in">log</span> files);</span><br><span class="line">                             with inotify, this option is rarely useful</span><br><span class="line">      --pid=PID            with -f, terminate after process ID, PID dies</span><br><span class="line">  -q, --quiet, --silent    never output headers giving file names</span><br><span class="line">      --retry              keep trying to open a file <span class="keyword">if</span> it is inaccessible</span><br><span class="line">  -s, --sleep-interval=N   with -f, sleep <span class="keyword">for</span> approximately N seconds</span><br><span class="line">                             (default 1.0) between iterations;</span><br><span class="line">                             with inotify and --pid=P, check process P at</span><br><span class="line">                             least once every N seconds</span><br><span class="line">  -v, --verbose            always output headers giving file names</span><br><span class="line">      --<span class="built_in">help</span>     display this <span class="built_in">help</span> and <span class="built_in">exit</span></span><br><span class="line">      --version  output version information and <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">If the first character of K (the number of bytes or lines) is a <span class="string">'+'</span>,</span><br><span class="line"><span class="built_in">print</span> beginning with the Kth item from the start of each file, otherwise,</span><br><span class="line"><span class="built_in">print</span> the last K items <span class="keyword">in</span> the file.  K may have a multiplier suffix:</span><br><span class="line">b 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,</span><br><span class="line">GB 1000*1000*1000, G 1024*1024*1024, and so on <span class="keyword">for</span> T, P, E, Z, Y.</span><br><span class="line"></span><br><span class="line">With --follow (-f), tail defaults to following the file descriptor, <span class="built_in">which</span></span><br><span class="line">means that even <span class="keyword">if</span> a tail<span class="string">'ed file is renamed, tail will continue to track</span></span><br><span class="line"><span class="string">its end.  This default behavior is not desirable when you really want to</span></span><br><span class="line"><span class="string">track the actual name of the file, not the file descriptor (e.g., log</span></span><br><span class="line"><span class="string">rotation).  Use --follow=name in that case.  That causes tail to track the</span></span><br><span class="line"><span class="string">named file in a way that accommodates renaming, removal and creation.</span></span><br></pre></td></tr></table></figure><p><strong>二、tail命令使用方法演示例子</strong></p><p>1、tail -f filename<br>说明：监视filename文件的尾部内容（默认10行，相当于增加参数 -n 10），刷新显示在屏幕上。退出，按下CTRL+C。</p><p>2、tail -n 20 filename<br>说明：显示filename最后20行。</p><p>3、tail -r -n 10 filename<br>说明：逆序显示filename最后10行。</p><p>补充：<br>跟tail功能相似的命令还有：<br>cat 从第一行開始显示档案内容。<br>tac 从最后一行開始显示档案内容。<br>more 分页显示档案内容。<br>less 与 more 相似，但支持向前翻页<br>head 仅仅显示前面几行<br>tail 仅仅显示后面几行<br>n 带行号显示档案内容<br>od 以二进制方式显示档案内容</p><h4 id="1-2-more-命令"><a href="#1-2-more-命令" class="headerlink" title="1.2 more 命令"></a>1.2 more 命令</h4><p><strong>一、more命令语法</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">more [options] file</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -d        display <span class="built_in">help</span> instead of ring bell</span><br><span class="line">  -f        count logical, rather than screen lines</span><br><span class="line">  -l        suppress pause after form feed</span><br><span class="line">  -p        <span class="keyword">do</span> not scroll, clean screen and display text</span><br><span class="line">  -c        <span class="keyword">do</span> not scroll, display text and clean line ends</span><br><span class="line">  -u        suppress underlining</span><br><span class="line">  -s        squeeze multiple blank lines into one</span><br><span class="line">  -NUM      specify the number of lines per screenful</span><br><span class="line">  +NUM      display file beginning from line number NUM</span><br><span class="line">  +/STRING  display file beginning from search string match</span><br><span class="line">  -V        output version information and <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线上系统常用命令&quot;&gt;&lt;a href=&quot;#线上系统常用命令&quot; class=&quot;headerlink&quot; title=&quot;线上系统常用命令&quot;&gt;&lt;/a&gt;线上系统常用命令&lt;/h1&gt;&lt;h2 id=&quot;一、日志查找&quot;&gt;&lt;a href=&quot;#一、日志查找&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="常用命令" scheme="https://blog.milk4j.com/categories/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="常用命令" scheme="https://blog.milk4j.com/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Centos 7 环境构建</title>
    <link href="https://blog.milk4j.com/2018/08/05/%E3%80%9001%E3%80%91Centos%207%20%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA%E6%96%87%E6%A1%A3/"/>
    <id>https://blog.milk4j.com/2018/08/05/【01】Centos 7 环境构建文档/</id>
    <published>2018-08-05T14:59:00.000Z</published>
    <updated>2018-12-22T06:27:30.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Centos-7-环境构建"><a href="#Centos-7-环境构建" class="headerlink" title="Centos 7 环境构建"></a>Centos 7 环境构建</h1><h2 id="目录准备"><a href="#目录准备" class="headerlink" title="目录准备"></a>目录准备</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在~目录下建立如下目录结构</span><br><span class="line">|-apps</span><br><span class="line">|-bin存放可执行文件</span><br><span class="line">|- cellar存放安装文件 lib</span><br><span class="line">|-data存放应用数据</span><br><span class="line">|- etc存放配置文件</span><br><span class="line">|- sbin存放超管执行文件</span><br><span class="line">|- src存放源码文件</span><br><span class="line">|- var存放运行时产生文件，log、pid</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 构建目录</span></span><br><span class="line">cd ~</span><br><span class="line">mkdir apps</span><br><span class="line">cd apps</span><br><span class="line">mkdir src bin sbin data var cellar etc</span><br></pre></td></tr></table></figure><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="必装软件"><a href="#必装软件" class="headerlink" title="必装软件"></a>必装软件</h3><p>Git、JDK、Maven、Docker、Nginx、Redis、MySQL、Zookeeper、Node</p><h4 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更新 yum 包</span></span><br><span class="line">sudo yum update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 git</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查是否自带的 git</span></span><br><span class="line">yum list installed | grep git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果有，卸载自带的 git</span></span><br><span class="line">yum remove git</span><br><span class="line"><span class="meta">#</span><span class="bash">安装gcc</span></span><br><span class="line">yum install gcc</span><br><span class="line"><span class="meta">#</span><span class="bash">安装其它所需的包</span></span><br><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel </span><br><span class="line">yum install gcc-c++ perl-ExtUtils-MakeMaker</span><br><span class="line">yum install autoconf automake libtool</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入源码目录</span></span><br><span class="line">cd ~/apps/src</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载 git 源码，使用源码安装</span></span><br><span class="line">wget https://github.com/git/git/archive/v2.17.0.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar zxvf v2.17.0.tar.gz</span><br><span class="line">cd git-2.17.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置源码安装</span></span><br><span class="line">make configure</span><br><span class="line">./configure --help</span><br><span class="line"><span class="meta">#</span><span class="bash"> 比较有用，下面的配置都是来自于 <span class="built_in">help</span> ，返回响应省略</span></span><br><span class="line">./configure --prefix=/root/apps/cellar/git --sbindir=/root/apps/sbin/git --bindir=/root/apps/bin/git --sysconfdir=/root/apps/etc/git/git.conf --datadir=/root/apps/data/git -docdir=/root/apps/data/git/doc</span><br><span class="line"><span class="meta">#</span><span class="bash"> make 和 install</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清理 make 文件</span></span><br><span class="line">make clean</span><br><span class="line">make distclean</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">git 添加到文件最后</span></span><br><span class="line">export PATH="$PATH:/root/apps/bin/git"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生效配置的变量</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建用户</span><br><span class="line">git config --global user.name &quot;你的名字&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br><span class="line"># 创建秘钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br><span class="line"># 获取公钥，将公钥添加到 git 加入 git 服务器</span><br></pre></td></tr></table></figure><h4 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查并卸载OpenJDK</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查命令：</span></span><br><span class="line">java -version</span><br><span class="line">rpm -qa | grep java</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载 OpenJDK</span></span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-headless-debug-1.8.0.171-3.b10.el6_9.x86_64</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.171-3.b10.el6_9.x86_64</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-demo-debug-1.8.0.171-3.b10.el6_9.x86_64</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-debug-1.8.0.171-3.b10.el6_9.x86_64</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-devel-debug-1.8.0.171-3.b10.el6_9.x86_64</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-src-1.8.0.171-3.b10.el6_9.x86_64</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-demo-1.8.0.171-3.b10.el6_9.x86_64</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-src-debug-1.8.0.171-3.b10.el6_9.x86_64</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-1.8.0.171-3.b10.el6_9.x86_64</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-devel-1.8.0.171-3.b10.el6_9.x86_64</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面两个可以不用删</span></span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-javadoc-debug-1.8.0.171-3.b10.el6_9.noarch</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-javadoc-1.8.0.171-3.b10.el6_9.noarch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证删除是否完成</span></span><br><span class="line">java -version</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果还没有删除，则用yum -y remove去删除他们</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 去官网下载指定版本的 jdk 压缩包解压</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令介绍：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rpm 　　　　管理套件  </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -e　　　　　删除指定的套件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --nodeps　　不验证套件档的相互关联性</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置环境变量</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装完成后需要配置一下环境变量，编辑/etc/profile文件：</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在文件尾部添加如下配置：</span></span><br><span class="line">export JAVA_HOME=/tools/jdk1.8.0_171</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar </span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使变量生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="Maven-安装"><a href="#Maven-安装" class="headerlink" title="Maven 安装"></a>Maven 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载压缩包</span></span><br><span class="line">wget http://mirrors.shu.edu.cn/apache/maven/maven-3/3.5.3/binaries/apache-maven-3.5.3-bin.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 版本 apache-maven-3.5.3-bin.tar.gz</span></span><br><span class="line">tar -xvf apache-maven-3.5.3-bin.tar.gz</span><br><span class="line">mv apache-maven-3.5.3 /usr/local/maven</span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件存放好之后，设置环境变量，</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">写入环境变量</span></span><br><span class="line">export M2_HOME=/usr/local/maven</span><br><span class="line">export PATH=$PATH:$M2_HOME/bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再执行</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证</span></span><br><span class="line">mvn -v</span><br></pre></td></tr></table></figure><h4 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h4><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-from-a-package" target="_blank" rel="noopener">官方安装文档</a></p><p><strong>方式一：</strong>通过 yum 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过 uname -r 命令查看你当前的内核版本</span></span><br><span class="line">uname -r</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载旧版本(如果安装过旧版本的话)</span></span><br><span class="line">sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置稳定的镜像，使用国内阿里云的</span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看哪些 docker 版本可用，都是稳定版</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 docker</span></span><br><span class="line">sudo yum install docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本使用 sudo yum install docker-ce-&lt;VERSION STRING&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开机启动</span></span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><p><strong>方式二：</strong>通过 rpm 安装包安装</p><ol><li><p>去 <a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/" target="_blank" rel="noopener">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a> 下载你要的版本的 <code>.rpm</code> 文件</p></li><li><p>指定下载的文件路径去安装 docker</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install /path/to/package.rpm</span><br></pre></td></tr></table></figure><ol start="3"><li>启动 docker</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开机启动</span></span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h5 id="设置mirror"><a href="#设置mirror" class="headerlink" title="设置mirror"></a>设置mirror</h5><p>使用清华源  <a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker" target="_blank" rel="noopener">https://lug.ustc.edu.cn/wiki/mirrors/help/docker</a>          </p><p>新版的 Docker 使用 /etc/docker/daemon.json 来配置 Daemon ，在该配置文件中加入（没有该文件的话，请先创建一个）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"registry-mirrors"</span>:[<span class="string">"http://13694f87.m.daocloud.io"</span>]&#125;</span><br></pre></td></tr></table></figure><p>如果 docker 不能 pull ，设置其它镜像参考：<a href="http://www.datastart.cn/tech/2016/09/28/docker-mirror.html" target="_blank" rel="noopener">http://www.datastart.cn/tech/2016/09/28/docker-mirror.html</a></p><p>最后，通过 hello-world 验证是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h4 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">wget http://mirror.bit.edu.cn/apache/zookeeper/stable/zookeeper-3.4.12.tar.gz</span><br><span class="line">tar zxvf zookeeper-3.4.12.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建zookeeper配置文件,Zookeeper需要一个名为zoo.cfg的配置文件，我们解压后，得到的是官方的示例文件，名为zoo_sample.cfg，这个文件在zookeeper根目录的conf子目录下</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入 config 文件夹</span></span><br><span class="line">cd zookeeper-3.4.10/conf/</span><br><span class="line">cp zoo_sample.cfg  zoo.cfg</span><br><span class="line"><span class="meta">#</span><span class="bash"> 用 vim 打开 zoo.cfg 文件并修改其内容为如下：</span></span><br><span class="line">    # The number of milliseconds of each tick</span><br><span class="line"> </span><br><span class="line">    # zookeeper 定义的基准时间间隔，单位：毫秒</span><br><span class="line">    tickTime=2000</span><br><span class="line"> </span><br><span class="line">    # The number of ticks that the initial </span><br><span class="line">    # synchronization phase can take</span><br><span class="line">    initLimit=10</span><br><span class="line">    # The number of ticks that can pass between </span><br><span class="line">    # sending a request and getting an acknowledgement</span><br><span class="line">    syncLimit=5</span><br><span class="line">    # the directory where the snapshot is stored.</span><br><span class="line">    # do not use /tmp for storage, /tmp here is just </span><br><span class="line">    # example sakes.</span><br><span class="line">    # dataDir=/tmp/zookeeper</span><br><span class="line"> </span><br><span class="line">    # 数据文件夹</span><br><span class="line">    dataDir=/root/apps/data/zookeeper</span><br><span class="line"> </span><br><span class="line">    # 日志文件夹</span><br><span class="line">    dataLogDir=/root/apps/var/zookeeper/logs</span><br><span class="line"> </span><br><span class="line">    # the port at which the clients will connect</span><br><span class="line">    # 客户端访问 zookeeper 的端口号</span><br><span class="line">    clientPort=2181</span><br><span class="line"> </span><br><span class="line">    # the maximum number of client connections.</span><br><span class="line">    # increase this if you need to handle more clients</span><br><span class="line">    #maxClientCnxns=60</span><br><span class="line">    #</span><br><span class="line">    # Be sure to read the maintenance section of the </span><br><span class="line">    # administrator guide before turning on autopurge.</span><br><span class="line">    #</span><br><span class="line">    # http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class="line">    #</span><br><span class="line">    # The number of snapshots to retain in dataDir</span><br><span class="line">    #autopurge.snapRetainCount=3</span><br><span class="line">    # Purge task interval in hours</span><br><span class="line">    # Set to "0" to disable auto purge feature</span><br><span class="line">    #autopurge.purgeInterval=1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 用 vim 打开 /etc/ 目录下的配置文件 profile：</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加</span></span><br><span class="line">export ZOOKEEPER_HOME=/root/apps/zookeeper</span><br><span class="line">export PATH=$ZOOKEEPER_HOME/bin:$PATH</span><br><span class="line">export PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使 /etc/ 目录下的 profile 文件即可生效：</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">zkServer.sh   start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新启动</span></span><br><span class="line">zkServer.sh   restart</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行命令查看zookeeper状态：</span></span><br><span class="line">zkServer.sh   status</span><br></pre></td></tr></table></figure><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> gcc 安装</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</span></span><br><span class="line">yum install gcc-c++</span><br><span class="line"><span class="meta">#</span><span class="bash"> PCRE pcre-devel 安装</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：</span></span><br><span class="line">yum install -y pcre pcre-devel</span><br><span class="line"><span class="meta">#</span><span class="bash"> zlib 安装</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</span></span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line"><span class="meta">#</span><span class="bash"> OpenSSL 安装</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</span></span><br><span class="line">yum install -y openssl openssl-devel</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx 下载</span></span><br><span class="line">wget -c https://nginx.org/download/nginx-1.14.0.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 依然是直接命令：</span></span><br><span class="line">tar -zxvf nginx-1.14.0.tar.gz</span><br><span class="line">cd nginx-1.14.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其实在 nginx-1.10.1 版本中你就不需要去配置相关东西，默认就可以了。当然，如果你要自己配置目录也是可以的。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.使用默认配置</span></span><br><span class="line">./configure</span><br><span class="line"><span class="meta">#</span><span class="bash">2.自定义配置（不推荐）</span></span><br><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--conf-path=/usr/local/nginx/conf/nginx.conf \</span><br><span class="line">--pid-path=/usr/local/nginx/conf/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注：将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译安装</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找安装路径：</span></span><br><span class="line">whereis nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动、停止nginx</span></span><br><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx </span><br><span class="line">./nginx -s stop</span><br><span class="line">./nginx -s quit</span><br><span class="line">./nginx -s reload</span><br><span class="line"><span class="meta">#</span><span class="bash"> ./nginx -s quit:此方式停止步骤是待nginx进程处理任务完毕进行停止。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./nginx -s stop:此方式相当于先查出nginx进程id再使用<span class="built_in">kill</span>命令强制杀掉进程。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询nginx进程：</span></span><br><span class="line">ps aux|grep nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.先停止再启动（推荐）：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对 nginx 进行重启相当于先停止再启动，即先执行停止命令再执行启动命令。如下：</span></span><br><span class="line">./nginx -s quit</span><br><span class="line">./nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.重新加载配置文件：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当 ngin x的配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，使用-s reload不用先停止 ngin x再启动 nginx 即可将配置信息在 nginx 中生效，如下：</span></span><br><span class="line">./nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开机自启动</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 即在rc.local增加启动代码就可以了。</span></span><br><span class="line">vi /etc/rc.local</span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加一行 /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置执行权限：</span></span><br><span class="line">chmod 755 rc.local</span><br></pre></td></tr></table></figure><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://download.redis.io/releases/redis-4.0.9.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar xzf redis-4.0.9.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> redis-4.0.9</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> src/redis-server</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> src/redis-cli</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> <span class="built_in">set</span> foo bar</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> get foo</span></span><br><span class="line">"bar"</span><br></pre></td></tr></table></figure><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><h5 id="1、配置YUM源"><a href="#1、配置YUM源" class="headerlink" title="1、配置YUM源"></a>1、配置YUM源</h5><p>在MySQL官网中下载YUM源rpm安装包：<a href="http://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">http://dev.mysql.com/downloads/repo/yum/</a><br><img src="https://www.linuxidc.com/upload/2016_09/160918124758191.png" alt="MySQL YUM源下载地址"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 下载mysql源安装包</span><br><span class="line">shell&gt; wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line"># 安装mysql源</span><br><span class="line">shell&gt; yum localinstall mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure><p>检查mysql源是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br></pre></td></tr></table></figure><p><img src="https://www.linuxidc.com/upload/2016_09/160918124758192.png" alt="检查mysql源安装是否正确"><br>看到上图所示表示安装成功。<br>可以修改<code>vim /etc/yum.repos.d/mysql-community.repo</code>源，改变默认安装的mysql版本。比如要安装5.6版本，将5.7源的enabled=1改成enabled=0。然后再将5.6源的enabled=0改成enabled=1即可。改完之后的效果如下所示：<br><img src="https://www.linuxidc.com/upload/2016_09/160918124758197.jpg" alt="这里写图片描述"></p><h5 id="2、安装MySQL"><a href="#2、安装MySQL" class="headerlink" title="2、安装MySQL"></a>2、安装MySQL</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; yum install mysql-community-server</span><br></pre></td></tr></table></figure><h5 id="3、启动MySQL服务"><a href="#3、启动MySQL服务" class="headerlink" title="3、启动MySQL服务"></a>3、启动MySQL服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; systemctl start mysqld</span><br></pre></td></tr></table></figure><p>查看MySQL的启动状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; systemctl status mysqld</span><br><span class="line">● mysqld.service - MySQL Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 五 2016-06-24 04:37:37 CST; 35min ago</span><br><span class="line"> Main PID: 2888 (mysqld)</span><br><span class="line">   CGroup: /system.slice/mysqld.service</span><br><span class="line">           └─2888 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br><span class="line">6月 24 04:37:36 localhost.localdomain systemd[1]: Starting MySQL Server...</span><br><span class="line">6月 24 04:37:37 localhost.localdomain systemd[1]: Started MySQL Server.</span><br></pre></td></tr></table></figure><h5 id="4、开机启动"><a href="#4、开机启动" class="headerlink" title="4、开机启动"></a>4、开机启动</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; systemctl enable mysqld</span><br><span class="line">shell&gt; systemctl daemon-reload</span><br></pre></td></tr></table></figure><h5 id="5、修改root本地登录密码"><a href="#5、修改root本地登录密码" class="headerlink" title="5、修改root本地登录密码"></a>5、修改root本地登录密码</h5><p>mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; grep &apos;temporary password&apos; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><img src="https://www.linuxidc.com/upload/2016_09/160918124758193.png" alt="root默认密码"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; mysql -uroot -p</span><br><span class="line">mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;MyNewPass4!&apos;;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set password for &apos;root&apos;@&apos;localhost&apos;=password(&apos;MyNewPass4!&apos;);</span><br></pre></td></tr></table></figure><p>注意：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误，如下图所示：<br><img src="https://www.linuxidc.com/upload/2016_09/160918124758194.png" alt="密码策略提示"></p><p>通过msyql环境变量可以查看密码策略的相关信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;%password%&apos;;</span><br></pre></td></tr></table></figure><p><img src="https://www.linuxidc.com/upload/2016_09/160918124758195.png" alt="mysql密码策略"><br>validate_password_policy：密码策略，默认为MEDIUM策略<br>validate_password_dictionary_file：密码策略文件，策略为STRONG才需要<br>validate_password_length：密码最少长度<br>validate_password_mixed_case_count：大小写字符长度，至少1个<br>validate_password_number_count ：数字至少1个<br>validate_password_special_char_count：特殊字符至少1个<br><em>上述参数是默认策略MEDIUM的密码检查规则。</em></p><p>共有以下几种密码策略：</p><table><thead><tr><th>策略</th><th>检查规则</th></tr></thead><tbody><tr><td>0 or LOW</td><td>Length</td></tr><tr><td>1 or MEDIUM</td><td>Length; numeric, lowercase/uppercase, and special characters</td></tr><tr><td>2 or STRONG</td><td>Length; numeric, lowercase/uppercase, and special characters; dictionary file</td></tr></tbody></table><p>MySQL官网密码策略详细说明：<a href="http://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html#sysvar_validate_password_policy" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html#sysvar_validate_password_policy</a></p><h5 id="修改密码策略"><a href="#修改密码策略" class="headerlink" title="修改密码策略"></a>修改密码策略</h5><p>在/etc/my.cnf文件添加validate_password_policy配置，指定密码策略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 选择0（LOW），1（MEDIUM），2（STRONG）其中一种，选择2需要提供密码字典文件</span><br><span class="line">validate_password_policy=0</span><br></pre></td></tr></table></figure><p>如果不需要密码策略，添加my.cnf文件中添加如下配置禁用即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">validate_password = off</span><br></pre></td></tr></table></figure><p>重新启动mysql服务使配置生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><h5 id="6、添加远程登录用户"><a href="#6、添加远程登录用户" class="headerlink" title="6、添加远程登录用户"></a>6、添加远程登录用户</h5><p>默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户，为了安全起见，我添加一个新的帐户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;yangxin&apos;@&apos;%&apos; IDENTIFIED BY &apos;Yangxin0917!&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><h5 id="7、配置默认编码为utf8"><a href="#7、配置默认编码为utf8" class="headerlink" title="7、配置默认编码为utf8"></a>7、配置默认编码为utf8</h5><p>修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect=&apos;SET NAMES utf8&apos;</span><br></pre></td></tr></table></figure><p>重新启动mysql服务，查看数据库默认编码如下所示：</p><p><img src="https://www.linuxidc.com/upload/2016_09/160918124758196.png" alt="mysql默认编码"></p><hr><p><strong>默认配置文件路径：</strong><br>配置文件：/etc/my.cnf<br>日志文件：/var/log//var/log/mysqld.log<br>服务启动脚本：/usr/lib/systemd/system/mysqld.service<br>socket文件：/var/run/mysqld/mysqld.pid</p><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><p>1、下载源码，你需要下载最新的Nodejs版本，本文以node-v8.11.2.tar.gz为例:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://npm.taobao.org/mirrors/node/v8.11.2/node-v8.11.2.tar.gz</span><br></pre></td></tr></table></figure><p>2、解压源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf node-v8.11.2.tar.gz</span><br></pre></td></tr></table></figure><p>3、 编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd node-v8.11.2</span><br><span class="line">./configure --prefix=/root/apps/cellar/node</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>4、 配置NODE_HOME，进入profile编辑环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>设置nodejs环境变量，在 <strong>*export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL*</strong> 一行的上面添加如下内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> <span class="keyword">for</span> nodejs</span></span><br><span class="line">export NODE_HOME=/root/apps/cellar/node</span><br><span class="line">export PATH=$NODE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>:wq保存并退出，编译/etc/profile 使配置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>验证是否安装配置成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>输出 版本号表示配置成功</p><p>npm模块安装路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/apps/cellar/node/lib/node_modules/</span><br></pre></td></tr></table></figure><h3 id="可选装"><a href="#可选装" class="headerlink" title="可选装"></a>可选装</h3><p>ElasticSearch5.x、Kibana5.x、RocketMQ、zsh、MongoDB、Kafka、RabbitMQ、MariaDB</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Centos-7-环境构建&quot;&gt;&lt;a href=&quot;#Centos-7-环境构建&quot; class=&quot;headerlink&quot; title=&quot;Centos 7 环境构建&quot;&gt;&lt;/a&gt;Centos 7 环境构建&lt;/h1&gt;&lt;h2 id=&quot;目录准备&quot;&gt;&lt;a href=&quot;#目录准备&quot;
      
    
    </summary>
    
      <category term="centos" scheme="https://blog.milk4j.com/categories/centos/"/>
    
    
      <category term="centos" scheme="https://blog.milk4j.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 使用文档</title>
    <link href="https://blog.milk4j.com/2018/07/05/Arthas%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/"/>
    <id>https://blog.milk4j.com/2018/07/05/Arthas使用文档/</id>
    <published>2018-07-05T14:59:00.000Z</published>
    <updated>2018-12-22T06:47:23.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arthas-使用文档"><a href="#Arthas-使用文档" class="headerlink" title="Arthas 使用文档"></a>Arthas 使用文档</h1><p>Arthas 是基于 Greys 开发的, 所以命令基本通用</p><p><a href="https://alibaba.github.io/arthas/" target="_blank" rel="noopener">https://alibaba.github.io/arthas/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Arthas-使用文档&quot;&gt;&lt;a href=&quot;#Arthas-使用文档&quot; class=&quot;headerlink&quot; title=&quot;Arthas 使用文档&quot;&gt;&lt;/a&gt;Arthas 使用文档&lt;/h1&gt;&lt;p&gt;Arthas 是基于 Greys 开发的, 所以命令基本通用&lt;/p&gt;
      
    
    </summary>
    
      <category term="Arthas" scheme="https://blog.milk4j.com/categories/Arthas/"/>
    
    
      <category term="Arthas" scheme="https://blog.milk4j.com/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>Greys 使用手册 [安装]</title>
    <link href="https://blog.milk4j.com/2018/07/05/Greys%20%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%5B%E5%AE%89%E8%A3%85%5D/"/>
    <id>https://blog.milk4j.com/2018/07/05/Greys 使用手册[安装]/</id>
    <published>2018-07-05T14:59:00.000Z</published>
    <updated>2018-12-22T06:32:05.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Greys-使用手册-安装"><a href="#Greys-使用手册-安装" class="headerlink" title="Greys 使用手册 [安装]"></a>Greys 使用手册 [安装]</h1><p>Greys支持在线安装和本地安装两种安装方案，安装即可用，推荐使用在线安装。</p><h2 id="在线安装（推荐）"><a href="#在线安装（推荐）" class="headerlink" title="在线安装（推荐）"></a>在线安装（推荐）</h2><p>请复制以下内容，并粘贴到命令行中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sLk http://ompc.oss.aliyuncs.com/greys/install.sh|bash</span><br></pre></td></tr></table></figure><p>命令将会下载的启动脚本文件<code>greys.sh</code>到当前目录，你可以放在任何地方或加入到<code>$PATH</code>中</p><h2 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h2><p>在某些情况下，目标服务器无法访问远程阿里云主机，此时你需要自行下载greys的安装文件。</p><ol><li><p>下载最新版本的Greys</p><p><a href="http://ompc.oss.aliyuncs.com/greys/release/greys-stable-bin.zip" target="_blank" rel="noopener">http://ompc.oss.aliyuncs.com/greys/release/greys-stable-bin.zip</a></p></li><li><p>解压zip文件后，执行以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> greys</span><br><span class="line">sh ./install-local.sh</span><br></pre></td></tr></table></figure><p>即完成本地安装。</p></li></ol><h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><ul><li><p><strong>多版本管理</strong></p><p>从<code>1.7.0.1</code>版本开始，<code>greys.sh</code>支持自动更新，在网络允许的情况下会自动监测远程服务器上是否存在可升级的最新版本。</p><p>若网络不可达（网络隔离的环境）则需要进行本地安装。本地安装的greys也一样会纳入到多版本管理识别范围。</p></li><li><p><strong>大版本兼容性问题</strong></p><p>大版本之间不做任何兼容性保障，比如<code>1.7.0.0</code>版本的客户端不保证能访问<code>1.6.0.0</code>启动的服务端。</p></li></ul><h2 id="常见安装问题"><a href="#常见安装问题" class="headerlink" title="常见安装问题"></a>常见安装问题</h2><ul><li><p><strong>下载失败</strong></p><p>通常这样的原因你需要检查你的网络是否畅通，核对是否能正确访问这个网址<a href="http://ompc.oss.aliyuncs.com/greys/greys.sh" target="_blank" rel="noopener">http://ompc.oss.aliyuncs.com/greys/greys.sh</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">downloading...</span><br><span class="line">download failed!</span><br></pre></td></tr></table></figure></li><li><p><strong>没有权限</strong></p><p>安装脚本首先会将greys文件从阿里云服务器上下载到当前执行脚本的目录，所以你必须要拥有当前目录的写权限。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permission denied, target directory is not writable.</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Greys-使用手册-安装&quot;&gt;&lt;a href=&quot;#Greys-使用手册-安装&quot; class=&quot;headerlink&quot; title=&quot;Greys 使用手册 [安装]&quot;&gt;&lt;/a&gt;Greys 使用手册 [安装]&lt;/h1&gt;&lt;p&gt;Greys支持在线安装和本地安装两种安装方案
      
    
    </summary>
    
      <category term="greys" scheme="https://blog.milk4j.com/categories/greys/"/>
    
    
      <category term="greys" scheme="https://blog.milk4j.com/tags/greys/"/>
    
  </entry>
  
  <entry>
    <title>Greys 使用手册 [快速入门]</title>
    <link href="https://blog.milk4j.com/2018/07/05/Greys%20%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%5B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%5D/"/>
    <id>https://blog.milk4j.com/2018/07/05/Greys 使用手册[快速入门]/</id>
    <published>2018-07-05T14:59:00.000Z</published>
    <updated>2018-12-22T06:32:51.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Greys-使用手册-快速入门"><a href="#Greys-使用手册-快速入门" class="headerlink" title="Greys 使用手册[快速入门]"></a>Greys 使用手册[快速入门]</h1><h2 id="启动Greys"><a href="#启动Greys" class="headerlink" title="启动Greys"></a>启动Greys</h2><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./greys &lt;PID&gt;[@IP:PORT]</span><br></pre></td></tr></table></figure><ul><li><strong>PID：</strong>目标Java进程ID（请确保执行当前执行命令的用户必须有足够的权限操作对应的Java进程）</li><li><strong>IP：</strong>目标服务器IP地址，当远程服务开启之后，其他人可以通过指定IP的形式加载到对应目标机器的Java进程中，从而实现远程协助。专门用于解决目标主机账号没有权限，但对方兄弟却非常需要你支援的时候。Greys允许多个用户同时访问，并且各自的命令不会相互干扰执行。</li><li><strong>PORT：</strong>目标服务器端口号，设计端口号的初心则是希望解决同台机器上存在多个Java进程需要被Greys分析的情况，默认的端口号是3658，如果不做区分则会引起端口冲突。</li></ul><h3 id="启动范例"><a href="#启动范例" class="headerlink" title="启动范例"></a>启动范例</h3><ul><li><p>如果不指定<strong>IP</strong>和<strong>PORT</strong>，默认是<strong>127.0.0.1</strong>和<strong>3658</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./greys.sh 12345</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./greys.sh 12345@127.0.0.1</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./greys.sh 12356@127.0.0.1:3658</span><br></pre></td></tr></table></figure></li></ul><h3 id="会话与任务"><a href="#会话与任务" class="headerlink" title="会话与任务"></a>会话与任务</h3><p>Greys是一个C/S架构的程序，所以当Client访问到Server时，Server会维护一个session（会话），以及session的心跳、超时机制。事务（Tx）机制则是建立在session的基础上，所有的命令交互都会创建一个事务，并且产生对应的队列进行输出缓冲。</p><p>事务伴随着命令的生命周期而存在，命令分两种：</p><ul><li><p>立即返回</p><p>立即返回的命令定义是：敲下命令后Server端立即返回最终结果，后续无持续反馈信息，释放Client对输入的锁定，重新开放让用户输入信息，比如<strong>version</strong>、<strong>sc</strong>、<strong>sm</strong>等。</p></li><li><p>等待中止</p><p>等待中止的命令则是需要用户主动输入<strong>Ctrl+D</strong>完成的命令中止操作。命令执行后无法立即返回最终结果，而是不断的将中间产生的输出源源不断的输出到客户端中，这种命令比如<strong>stack</strong>、<strong>monitor</strong>等。</p></li></ul><p>当session关闭时，所有挂在session的事务也会立即被关闭。</p><h2 id="重要命令"><a href="#重要命令" class="headerlink" title="重要命令"></a>重要命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#help" target="_blank" rel="noopener">help</a></td><td>查看命令的帮助文档，每个命令和参数都有很详细的说明</td></tr><tr><td><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#sc" target="_blank" rel="noopener">sc</a></td><td>查看JVM已加载的类信息</td></tr><tr><td><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#sm" target="_blank" rel="noopener">sm</a></td><td>查看已加载的方法信息</td></tr><tr><td><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#monitor" target="_blank" rel="noopener">monitor</a></td><td>方法执行监控</td></tr><tr><td><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#trace" target="_blank" rel="noopener">trace</a></td><td>渲染方法内部调用路径，并输出方法路径上的每个节点上耗时</td></tr><tr><td><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#ptrace" target="_blank" rel="noopener">ptrace</a></td><td>强化版的<code>trace</code>命令。通过指定渲染路径，并可记录下路径中所有方法的入参、返值；与<code>tt</code>命令联动。</td></tr><tr><td><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#watch" target="_blank" rel="noopener">watch</a></td><td>方法执行数据观测</td></tr><tr><td><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#tt" target="_blank" rel="noopener">tt</a> <a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/TimeTunnel" target="_blank" rel="noopener">详细用法</a></td><td>方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</td></tr><tr><td><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#stack" target="_blank" rel="noopener">stack</a></td><td>输出当前方法被调用的调用路径</td></tr><tr><td><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#version" target="_blank" rel="noopener">version</a></td><td>输出当前目标Java进程所加载的Greys版本号</td></tr><tr><td><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#quit" target="_blank" rel="noopener">quit</a></td><td>退出greys客户端</td></tr><tr><td><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#shutdown" target="_blank" rel="noopener">shutdown</a></td><td>关闭greys服务端</td></tr><tr><td><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#reset" target="_blank" rel="noopener">reset</a></td><td>重置增强类，将被greys增强过的类全部还原</td></tr><tr><td><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#jvm" target="_blank" rel="noopener">jvm</a></td><td>查看当前JVM的信息</td></tr></tbody></table><h2 id="重要类结构"><a href="#重要类结构" class="headerlink" title="重要类结构"></a>重要类结构</h2><p>用于watch/tt命令，grovvy表达式的重要数据结构</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Advice</span><br><span class="line">   |</span><br><span class="line">   +--ClassLoader loader    (ClassLoader)</span><br><span class="line">   +--Class&lt;?&gt;    clazz     (目标类)</span><br><span class="line">   +--GaMethod    method    (目标方法，包括普通方法和构造函数)</span><br><span class="line">   +--Object[]    params    (调用参数)</span><br><span class="line">   +--Object      returnObj (返回值)</span><br><span class="line">   `--Throwable   throwExp  (抛出异常)</span><br></pre></td></tr></table></figure><p>在表达式中直接使用变量名，例如</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -b *StringUtil* isEmpty params[0].length()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Greys-使用手册-快速入门&quot;&gt;&lt;a href=&quot;#Greys-使用手册-快速入门&quot; class=&quot;headerlink&quot; title=&quot;Greys 使用手册[快速入门]&quot;&gt;&lt;/a&gt;Greys 使用手册[快速入门]&lt;/h1&gt;&lt;h2 id=&quot;启动Greys&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="greys" scheme="https://blog.milk4j.com/categories/greys/"/>
    
    
      <category term="greys" scheme="https://blog.milk4j.com/tags/greys/"/>
    
  </entry>
  
  <entry>
    <title>JVM 分析工具概述</title>
    <link href="https://blog.milk4j.com/2018/07/05/JVM%20%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E6%A6%82%E8%BF%B0/"/>
    <id>https://blog.milk4j.com/2018/07/05/JVM 分析工具概述/</id>
    <published>2018-07-05T14:59:00.000Z</published>
    <updated>2018-12-22T06:35:43.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM-分析工具概述"><a href="#JVM-分析工具概述" class="headerlink" title="JVM 分析工具概述"></a>JVM 分析工具概述</h1><h2 id="指令简述"><a href="#指令简述" class="headerlink" title="指令简述"></a>指令简述</h2><ul><li><code>JPS</code> : <code>java process status</code> 查看进程</li><li><code>Jstat</code>: 类装载、内存、垃圾收集、jit编译信息</li><li><code>Jinfo</code>: 实时查看和调整虚拟机的各项参数</li><li><code>Jmap</code>: 打印JVM堆内对象情况,查询Java堆和永久代的详细信息, 使用率, 使用大小</li><li><code>Jhat</code> : <code>jvm heap analysis tool</code>  <code>jvm</code>堆分析工具, 内存占用较高</li><li><code>Jstack</code>: 打印线程堆栈信息</li><li><code>Jconsole</code>: 内存监控</li><li><code>visualVm</code>: 可视化的<code>java</code>虚拟机界面</li></ul><h4 id="JPS-java-process-status"><a href="#JPS-java-process-status" class="headerlink" title="JPS(java process status)"></a>JPS(java process status)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ jps</span><br><span class="line"><span class="comment"># PID | 主函数类名</span></span><br><span class="line">29057 CanalLauncher</span><br><span class="line">28849 BrokerStartup</span><br><span class="line">31315 Jps</span><br><span class="line">28870 rocketmq-console-ng-1.0.0.jar</span><br><span class="line">488 QuorumPeerMain</span><br><span class="line">30297 RemoteMavenServer</span><br><span class="line"></span><br><span class="line">$ jps -m  <span class="comment"># 输出主函数传入的参数</span></span><br><span class="line">29057 CanalLauncher</span><br><span class="line">28849 BrokerStartup -n localhost:9876</span><br><span class="line">28870 rocketmq-console-ng-1.0.0.jar</span><br><span class="line">488 QuorumPeerMain /usr/<span class="built_in">local</span>/etc/zookeeper/zoo.cfg</span><br><span class="line">30297 RemoteMavenServer</span><br><span class="line"></span><br><span class="line">$ jps -q  <span class="comment"># 只显示PID</span></span><br><span class="line">31328</span><br><span class="line">29057</span><br><span class="line">28849</span><br><span class="line">28870</span><br><span class="line">488</span><br><span class="line">30297</span><br><span class="line"></span><br><span class="line">$ jps -l  <span class="comment"># 输出应用程序主类全类名或启动jar包的完整路径名</span></span><br><span class="line">29057 com.alibaba.otter.canal.deployer.CanalLauncher</span><br><span class="line">28849 org.apache.rocketmq.broker.BrokerStartup</span><br><span class="line">28870 /Users/ginkgo/myapp/rocketmq-console/target/rocketmq-console-ng-1.0.0.jar</span><br><span class="line">31335 sun.tools.jps.Jps</span><br><span class="line">488 org.apache.zookeeper.server.quorum.QuorumPeerMain</span><br><span class="line">30297 org.jetbrains.idea.maven.server.RemoteMavenServer</span><br><span class="line"></span><br><span class="line">$ jps -v  <span class="comment"># 列出jvm参数</span></span><br><span class="line">345 Elasticsearch -Xms1g -Xmx1g -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:+AlwaysPreTouch -Xss1m -Djava.awt.headless=<span class="literal">true</span> -Dfile.encoding=UTF-8 -Djna.nosys=<span class="literal">true</span> -XX:-OmitStackTraceInFastThrow -Dio.netty.noUnsafe=<span class="literal">true</span> -Dio.netty.noKeySetOptimization=<span class="literal">true</span> -Dio.netty.recycler.maxCapacityPerThread=0 -Dlog4j.shutdownHookEnabled=<span class="literal">false</span> -Dlog4j2.disable.jmx=<span class="literal">true</span> -Djava.io.tmpdir=/var/folders/3v/pls8r6nj2jz09pbtmqxcxy700000gn/T/elasticsearch.FXTflx5J -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=data -XX:ErrorFile=logs/hs_err_pid%p.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:logs/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=32 -XX:GCLogFileSize=64m -Des.path.home=/usr/<span class="built_in">local</span>/Cellar/elasticsearch/6.4.2/libexec -Des.path.conf=/usr/<span class="built_in">local</span>/etc/elasticsearch -Des.distribution.flavor=oss -Des.distribution.type=tar</span><br></pre></td></tr></table></figure><p>详情请参考<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jps.html" target="_blank" rel="noopener">地址</a></p><h4 id="获取远程服务器-jps-信息"><a href="#获取远程服务器-jps-信息" class="headerlink" title="获取远程服务器 jps 信息"></a>获取远程服务器 jps 信息</h4><p><code>jps</code> 支持查看远程服务上的 <code>jvm</code> 进程信息。如果需要查看其他机器上的  <code>jvm</code> 进程，需要在待查看机器上启动 <code>jstatd</code> 服务。</p><h4 id="开启-jstatd-服务"><a href="#开启-jstatd-服务" class="headerlink" title="开启 jstatd 服务"></a>开启 jstatd 服务</h4><p>启动 <code>jstatd</code> 服务，需要有足够的权限。 需要使用 <code>Java</code> 的安全策略分配相应的权限。</p><p>创建 <code>jstatd.all.policy</code> 策略文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant codebase <span class="string">"file:<span class="variable">$&#123;java.home&#125;</span>/../lib/tools.jar"</span> &#123;</span><br><span class="line">    permission java.security.AllPermission;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>启动 <code>jstatd</code> 服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jstatd -J-Djava.security.policy=jstatd.all.policy -J-Djava.rmi.server.hostname=192.168.31.241</span><br><span class="line"></span><br><span class="line">-J 参数是一个公共的参数，如 jps、 jstat 等命令都可以接收这个参数。 由于 jps、 jstat 命令本身也是 Java 应用程序， -J 参数可以为 jps 等命令本身设置 Java 虚拟机参数。</span><br><span class="line">-Djava.security.policy：指定策略文件</span><br><span class="line">-Djava.rmi.server.hostname：指定服务器的ip地址（可忽略）</span><br></pre></td></tr></table></figure><p>默认情况下， <code>jstatd</code> 开启在 <code>1099</code> 端口上开启 <code>RMI</code> 服务器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JVM-分析工具概述&quot;&gt;&lt;a href=&quot;#JVM-分析工具概述&quot; class=&quot;headerlink&quot; title=&quot;JVM 分析工具概述&quot;&gt;&lt;/a&gt;JVM 分析工具概述&lt;/h1&gt;&lt;h2 id=&quot;指令简述&quot;&gt;&lt;a href=&quot;#指令简述&quot; class=&quot;head
      
    
    </summary>
    
      <category term="jvm" scheme="https://blog.milk4j.com/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://blog.milk4j.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Greys 使用手册 [watch命令]</title>
    <link href="https://blog.milk4j.com/2018/07/05/Greys%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%5Bwatch%E5%91%BD%E4%BB%A4%5D/"/>
    <id>https://blog.milk4j.com/2018/07/05/Greys使用手册[watch命令]/</id>
    <published>2018-07-05T14:59:00.000Z</published>
    <updated>2018-12-22T06:34:50.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Greys使用手册-watch命令"><a href="#Greys使用手册-watch命令" class="headerlink" title="Greys使用手册[watch命令]"></a>Greys使用手册[watch命令]</h1><p>写到这一篇的时候, 发现了Arthas, 他是基于greys开发的, 有很完善的文档, <a href="https://alibaba.github.io/arthas/" target="_blank" rel="noopener">https://alibaba.github.io/arthas/</a></p><p>后面就直接参考就好</p><blockquote><p>方法执行数据观测</p></blockquote><p>让你能方便的观察到指定方法的调用情况。能观察到的范围为：<code>返回值</code>、<code>抛出异常</code>、<code>入参</code>，通过编写 OGNL 表达式进行对应变量的查看。</p><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><p>watch 的参数比较多，主要是因为它能在 4 个不同的场景观察对象</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达式匹配</td></tr><tr><td><em>method-pattern</em></td><td>方法名表达式匹配</td></tr><tr><td><em>express</em></td><td>观察表达式</td></tr><tr><td><em>condition-express</em></td><td>条件表达式</td></tr><tr><td>[b]</td><td>在<strong>方法调用之前</strong>观察</td></tr><tr><td>[e]</td><td>在<strong>方法异常之后</strong>观察</td></tr><tr><td>[s]</td><td>在<strong>方法返回之后</strong>观察</td></tr><tr><td>[f]</td><td>在<strong>方法结束之后</strong>(正常返回和异常返回)观察</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td>[x:]</td><td>指定输出结果的属性遍历深度，默认为 1</td></tr></tbody></table><p>这里重点要说明的是观察表达式，观察表达式的构成主要由 ognl 表达式组成，所以你可以这样写<code>&quot;{params,returnObj}&quot;</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p><p>观察的维度也比较多，主要体现在参数 <code>advice</code> 的数据结构上。<code>Advice</code> 参数最主要是封装了通知节点的所有信息。请参考<a href="https://alibaba.github.io/arthas/advice-class.html" target="_blank" rel="noopener">表达式核心变量</a>中关于该节点的描述。</p><ul><li>特殊用法请参考：<a href="https://github.com/alibaba/arthas/issues/71" target="_blank" rel="noopener">https://github.com/alibaba/arthas/issues/71</a></li><li>OGNL表达式官网：<a href="https://commons.apache.org/proper/commons-ognl/language-guide.html" target="_blank" rel="noopener">https://commons.apache.org/proper/commons-ognl/language-guide.html</a></li></ul><p><strong>特别说明</strong>：</p><ul><li>watch 命令定义了4个观察事件点，即 <code>-b</code> 方法调用前，<code>-e</code> 方法异常后，<code>-s</code> 方法返回后，<code>-f</code> 方法结束后</li><li>4个观察事件点 <code>-b</code>、<code>-e</code>、<code>-s</code> 默认关闭，<code>-f</code> 默认打开，当指定观察点被打开后，在相应事件点会对观察表达式进行求值并输出</li><li>这里要注意<code>方法入参</code>和<code>方法出参</code>的区别，有可能在中间被修改导致前后不一致，除了 <code>-b</code> 事件点 <code>params</code> 代表方法入参外，其余事件都代表方法出参</li><li>当使用 <code>-b</code> 时，由于观察事件点是在方法调用前，此时返回值或异常均不存在</li></ul><h2 id="使用参考"><a href="#使用参考" class="headerlink" title="使用参考"></a>使用参考</h2><h3 id="观察方法出参和返回值"><a href="#观察方法出参和返回值" class="headerlink" title="观察方法出参和返回值"></a>观察方法出参和返回值</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ watch demo.MathGame primeFactors <span class="string">"&#123;params,returnObj&#125;"</span> -x 2</span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 44 ms.</span><br><span class="line">ts=2018-12-03 19:16:51; [cost=1.280502ms] result=@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @Integer[535629513],</span><br><span class="line">    ],</span><br><span class="line">    @ArrayList[</span><br><span class="line">        @Integer[3],</span><br><span class="line">        @Integer[19],</span><br><span class="line">        @Integer[191],</span><br><span class="line">        @Integer[49199],</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="观察方法入参"><a href="#观察方法入参" class="headerlink" title="观察方法入参"></a>观察方法入参</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ watch demo.MathGame primeFactors <span class="string">"&#123;params,returnObj&#125;"</span> -x 2 -b</span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 50 ms.</span><br><span class="line">ts=2018-12-03 19:23:23; [cost=0.0353ms] result=@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @Integer[-1077465243],</span><br><span class="line">    ],</span><br><span class="line">    null,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>对比前一个例子，返回值为空（事件点为方法执行前，因此获取不到返回值）</li></ul><h3 id="同时观察方法调用前和方法返回后"><a href="#同时观察方法调用前和方法返回后" class="headerlink" title="同时观察方法调用前和方法返回后"></a>同时观察方法调用前和方法返回后</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ watch demo.MathGame primeFactors <span class="string">"&#123;params,target,returnObj&#125;"</span> -x 2 -b -s -n 2</span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 46 ms.</span><br><span class="line">ts=2018-12-03 19:29:54; [cost=0.01696ms] result=@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @Integer[1544665400],</span><br><span class="line">    ],</span><br><span class="line">    @MathGame[</span><br><span class="line">        random=@Random[java.util.Random@522b408a],</span><br><span class="line">        illegalArgumentCount=@Integer[13038],</span><br><span class="line">    ],</span><br><span class="line">    null,</span><br><span class="line">]</span><br><span class="line">ts=2018-12-03 19:29:54; [cost=4.277392ms] result=@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @Integer[1544665400],</span><br><span class="line">    ],</span><br><span class="line">    @MathGame[</span><br><span class="line">        random=@Random[java.util.Random@522b408a],</span><br><span class="line">        illegalArgumentCount=@Integer[13038],</span><br><span class="line">    ],</span><br><span class="line">    @ArrayList[</span><br><span class="line">        @Integer[2],</span><br><span class="line">        @Integer[2],</span><br><span class="line">        @Integer[2],</span><br><span class="line">        @Integer[5],</span><br><span class="line">        @Integer[5],</span><br><span class="line">        @Integer[73],</span><br><span class="line">        @Integer[241],</span><br><span class="line">        @Integer[439],</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>参数里<code>-n 2</code>，表示只执行两次</li><li>这里输出结果中，第一次输出的是方法调用前的观察表达式的结果，第二次输出的是方法返回后的表达式的结果</li><li>结果的顺序和命令中 <code>-s -b</code> 的顺序没有关系，只与事件本身的先后顺序有关</li></ul><h3 id="调整-x的值，观察具体的方法参数值"><a href="#调整-x的值，观察具体的方法参数值" class="headerlink" title="调整-x的值，观察具体的方法参数值"></a>调整<code>-x</code>的值，观察具体的方法参数值</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ watch demo.MathGame primeFactors <span class="string">"&#123;params,target&#125;"</span> -x 3</span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 58 ms.</span><br><span class="line">ts=2018-12-03 19:34:19; [cost=0.587833ms] result=@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @Integer[47816758],</span><br><span class="line">    ],</span><br><span class="line">    @MathGame[</span><br><span class="line">        random=@Random[</span><br><span class="line">            serialVersionUID=@Long[3905348978240129619],</span><br><span class="line">            seed=@AtomicLong[3133719055989],</span><br><span class="line">            multiplier=@Long[25214903917],</span><br><span class="line">            addend=@Long[11],</span><br><span class="line">            mask=@Long[281474976710655],</span><br><span class="line">            DOUBLE_UNIT=@Double[1.1102230246251565E-16],</span><br><span class="line">            BadBound=@String[bound must be positive],</span><br><span class="line">            BadRange=@String[bound must be greater than origin],</span><br><span class="line">            BadSize=@String[size must be non-negative],</span><br><span class="line">            seedUniquifier=@AtomicLong[-3282039941672302964],</span><br><span class="line">            nextNextGaussian=@Double[0.0],</span><br><span class="line">            haveNextNextGaussian=@Boolean[<span class="literal">false</span>],</span><br><span class="line">            serialPersistentFields=@ObjectStreamField[][isEmpty=<span class="literal">false</span>;size=3],</span><br><span class="line">            unsafe=@Unsafe[sun.misc.Unsafe@2eaa1027],</span><br><span class="line">            seedOffset=@Long[24],</span><br><span class="line">        ],</span><br><span class="line">        illegalArgumentCount=@Integer[13159],</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><code>-x</code>表示遍历深度，可以调整来打印具体的参数和结果内容，默认值是1。</li></ul><h3 id="条件表达式的例子"><a href="#条件表达式的例子" class="headerlink" title="条件表达式的例子"></a>条件表达式的例子</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ watch demo.MathGame primeFactors <span class="string">"&#123;params[0],target&#125;"</span> <span class="string">"params[0]&lt;0"</span></span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 68 ms.</span><br><span class="line">ts=2018-12-03 19:36:04; [cost=0.530255ms] result=@ArrayList[</span><br><span class="line">    @Integer[-18178089],</span><br><span class="line">    @MathGame[demo.MathGame@41cf53f9],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>只有满足条件的调用，才会有响应。</li></ul><h3 id="观察异常信息的例子"><a href="#观察异常信息的例子" class="headerlink" title="观察异常信息的例子"></a>观察异常信息的例子</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ watch demo.MathGame primeFactors <span class="string">"&#123;params[0],throwExp&#125;"</span> -e -x 2</span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 62 ms.</span><br><span class="line">ts=2018-12-03 19:38:00; [cost=1.414993ms] result=@ArrayList[</span><br><span class="line">    @Integer[-1120397038],</span><br><span class="line">    java.lang.IllegalArgumentException: number is: -1120397038, need &gt;= 2</span><br><span class="line">    at demo.MathGame.primeFactors(MathGame.java:46)</span><br><span class="line">    at demo.MathGame.run(MathGame.java:24)</span><br><span class="line">    at demo.MathGame.main(MathGame.java:16)</span><br><span class="line">,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><code>-e</code>表示抛出异常时才触发</li><li>express中，表示异常信息的变量是<code>throwExp</code></li></ul><h3 id="按照耗时进行过滤"><a href="#按照耗时进行过滤" class="headerlink" title="按照耗时进行过滤"></a>按照耗时进行过滤</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ watch demo.MathGame primeFactors <span class="string">'&#123;params, returnObj&#125;'</span> <span class="string">'#cost&gt;200'</span> -x 2</span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 66 ms.</span><br><span class="line">ts=2018-12-03 19:40:28; [cost=2112.168897ms] result=@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @Integer[2141897465],</span><br><span class="line">    ],</span><br><span class="line">    @ArrayList[</span><br><span class="line">        @Integer[5],</span><br><span class="line">        @Integer[428379493],</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><code>#cost&gt;200</code>(单位是<code>ms</code>)表示只有当耗时大于200ms时才会输出，过滤掉执行时间小于200ms的调用</li></ul><h3 id="观察当前对象中的属性"><a href="#观察当前对象中的属性" class="headerlink" title="观察当前对象中的属性"></a>观察当前对象中的属性</h3><p>如果想查看方法运行前后，当前对象中的属性，可以使用<code>target</code>关键字，代表当前对象</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ watch demo.MathGame primeFactors <span class="string">'target'</span></span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 52 ms.</span><br><span class="line">ts=2018-12-03 19:41:52; [cost=0.477882ms] result=@MathGame[</span><br><span class="line">    random=@Random[java.util.Random@522b408a],</span><br><span class="line">    illegalArgumentCount=@Integer[13355],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后使用<code>target.field_name</code>访问当前对象的某个属性</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ watch demo.MathGame primeFactors <span class="string">'target.illegalArgumentCount'</span></span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 67 ms.</span><br><span class="line">ts=2018-12-03 20:04:34; [cost=131.303498ms] result=@Integer[8]</span><br><span class="line">ts=2018-12-03 20:04:35; [cost=0.961441ms] result=@Integer[8]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Greys使用手册-watch命令&quot;&gt;&lt;a href=&quot;#Greys使用手册-watch命令&quot; class=&quot;headerlink&quot; title=&quot;Greys使用手册[watch命令]&quot;&gt;&lt;/a&gt;Greys使用手册[watch命令]&lt;/h1&gt;&lt;p&gt;写到这一篇的时候
      
    
    </summary>
    
      <category term="greys" scheme="https://blog.milk4j.com/categories/greys/"/>
    
    
      <category term="greys" scheme="https://blog.milk4j.com/tags/greys/"/>
    
  </entry>
  
  <entry>
    <title>java应用jvm配置参考</title>
    <link href="https://blog.milk4j.com/2018/07/05/java%E5%BA%94%E7%94%A8jvm%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/"/>
    <id>https://blog.milk4j.com/2018/07/05/java应用jvm参数配置参考/</id>
    <published>2018-07-05T14:59:00.000Z</published>
    <updated>2018-12-22T06:35:16.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java应用jvm配置参考"><a href="#java应用jvm配置参考" class="headerlink" title="java应用jvm配置参考"></a>java应用jvm配置参考</h1><blockquote><p>一切配置在亲身测试之后，才比较靠谱。这里给出我们的经验值，仅供参考。</p></blockquote><h3 id="WEB服务器JVM配置"><a href="#WEB服务器JVM配置" class="headerlink" title="WEB服务器JVM配置"></a>WEB服务器JVM配置</h3><p><strong>容器内存4G</strong><br>java内存：4096m * 0.75 = 3072m</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-server//服务器模式</span><br><span class="line">-Xmx3072m //JVM最大允许分配的堆内存，按需分配</span><br><span class="line">-Xms3072m //JVM初始分配的堆内存，一般和Xmx配置成一样以避免每次gc后JVM重新分配内存。</span><br><span class="line">-XX:NewRatio=1 //表示年轻代与年老代所占比值为1:1 </span><br><span class="line">-XX:+DisableExplicitGC //忽略手动调用GC, System.gc()的调用就会变成一个空调用，完全不触发GC</span><br><span class="line">-XX:+UseConcMarkSweepGC //并发标记清除（CMS）收集器</span><br><span class="line">-XX:+CMSParallelRemarkEnabled //降低标记停顿</span><br><span class="line">-XX:+UseCMSCompactAtFullCollection //在FULL GC的时候对年老代的压缩</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=70 //使用cms作为垃圾回收使用70％后开始CMS收集</span><br></pre></td></tr></table></figure><p><strong>容器内存3G</strong><br>java内存：3072m * 0.7 = 2150m</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-server//服务器模式</span><br><span class="line">-Xmx2150m //JVM最大允许分配的堆内存，按需分配</span><br><span class="line">-Xms2150m //JVM初始分配的堆内存，一般和Xmx配置成一样以避免每次gc后JVM重新分配内存。</span><br><span class="line">-XX:NewRatio=1 //表示年轻代与年老代所占比值为1:1 </span><br><span class="line">-XX:+DisableExplicitGC //忽略手动调用GC, System.gc()的调用就会变成一个空调用，完全不触发GC</span><br><span class="line">-XX:+UseConcMarkSweepGC //并发标记清除（CMS）收集器</span><br><span class="line">-XX:+CMSParallelRemarkEnabled //降低标记停顿</span><br><span class="line">-XX:+UseCMSCompactAtFullCollection //在FULL GC的时候对年老代的压缩</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=70 //使用cms作为垃圾回收使用70％后开始CMS收集</span><br></pre></td></tr></table></figure><p><strong>容器内存2G</strong><br>java内存：2048m * 0.7 = 1434m</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-server//服务器模式</span><br><span class="line">-Xmx1434m //JVM最大允许分配的堆内存，按需分配</span><br><span class="line">-Xms1434m //JVM初始分配的堆内存，一般和Xmx配置成一样以避免每次gc后JVM重新分配内存。</span><br><span class="line">-XX:NewRatio=1 //表示年轻代与年老代所占比值为1:1 </span><br><span class="line">-XX:+DisableExplicitGC //忽略手动调用GC, System.gc()的调用就会变成一个空调用，完全不触发GC</span><br><span class="line">-XX:+UseConcMarkSweepGC //并发标记清除（CMS）收集器</span><br><span class="line">-XX:+CMSParallelRemarkEnabled //降低标记停顿</span><br><span class="line">-XX:+UseCMSCompactAtFullCollection //在FULL GC的时候对年老代的压缩</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=70 //使用cms作为垃圾回收使用70％后开始CMS收集</span><br></pre></td></tr></table></figure><p><strong>容器内存1.5G</strong><br>java内存：1536m * 0.7 = 1075m</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-server//服务器模式</span><br><span class="line">-Xmx1075m //JVM最大允许分配的堆内存，按需分配</span><br><span class="line">-Xms1075m //JVM初始分配的堆内存，一般和Xmx配置成一样以避免每次gc后JVM重新分配内存。</span><br><span class="line">-XX:NewRatio=1 //表示年轻代与年老代所占比值为1:1 </span><br><span class="line">-XX:+DisableExplicitGC //忽略手动调用GC, System.gc()的调用就会变成一个空调用，完全不触发GC</span><br><span class="line">-XX:+UseConcMarkSweepGC //并发标记清除（CMS）收集器</span><br><span class="line">-XX:+CMSParallelRemarkEnabled //降低标记停顿</span><br><span class="line">-XX:+UseCMSCompactAtFullCollection //在FULL GC的时候对年老代的压缩</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=70 //使用cms作为垃圾回收使用70％后开始CMS收集</span><br></pre></td></tr></table></figure><p><strong>容器内存1G</strong><br>java内存：1024m * 0.7 = 717m</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-server//服务器模式</span><br><span class="line">-Xmx717m //JVM最大允许分配的堆内存，按需分配</span><br><span class="line">-Xms717m //JVM初始分配的堆内存，一般和Xmx配置成一样以避免每次gc后JVM重新分配内存。</span><br><span class="line">-XX:NewRatio=1 //表示年轻代与年老代所占比值为1:1 </span><br><span class="line">-XX:+DisableExplicitGC //忽略手动调用GC, System.gc()的调用就会变成一个空调用，完全不触发GC</span><br><span class="line">-XX:+UseConcMarkSweepGC //并发标记清除（CMS）收集器</span><br><span class="line">-XX:+CMSParallelRemarkEnabled //降低标记停顿</span><br><span class="line">-XX:+UseCMSCompactAtFullCollection //在FULL GC的时候对年老代的压缩</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=70 //使用cms作为垃圾回收使用70％后开始CMS收集</span><br></pre></td></tr></table></figure><h3 id="常用参数说明"><a href="#常用参数说明" class="headerlink" title="常用参数说明"></a>常用参数说明</h3><p><strong>参数设置</strong><br>在Java虚拟机的参数中，有3种表示方法：</p><ul><li>标准参数（-），所有的JVM实现都必须实现这些参数的功能，而且向后兼容；</li><li>非标准参数（-X），默认jvm实现这些参数的功能，但是并不保证所有jvm实现都满足，且不保证向后兼容；</li><li>非Stable参数（-XX），此类参数各个jvm实现会有所不同，将来可能会随时取消，需要慎重使用（但是，这些参数往往是非常有用的）；</li></ul><p><strong>常用参数</strong><br>现在的JVM运行Java程序时在高效性和稳定性方面做的非常出色。自适应内存管理、垃圾收集、及时编译、动态类加载、锁优化等使得普通程序员几乎不会case内存相关的事情。但JVM仍然大量的参数，使得我们可以针对不同场景进行不同的配置和调优。</p><p><em>-client</em><br><em>-server</em><br>指定JVM的启动模式是client模式还是server模式，具体就是 Java HotSpot Client(Server) VM 版本。目前64位的JDK启动，一定是server模式，会忽略这个参数。</p><p><em>-Xmn</em><br>设置初始最大的年轻代堆大小。</p><p><em>-Xms</em><br>设置初始的堆大小。</p><p><em>-Xmx</em><br>设置最大的内存分配大小。一般的服务端部署，-Xms和-Xmx设置为同样大小。</p><h3 id="基础回顾"><a href="#基础回顾" class="headerlink" title="基础回顾"></a>基础回顾</h3><p><strong>JVM内存结构</strong><br>当代主流虚拟机（Hotspot VM）的垃圾回收都采用“分代回收”的算法。“分代回收”是基于这样一个事实：对象的生命周期不同，所以针对不同生命周期的对象可以采取不同的回收方式，以便提高回收效率。</p><p>Hotspot VM将内存划分为不同的物理区，就是“分代”思想的体现。如图所示，JVM内存主要由新生代、老年代、永久代构成。</p><ol><li>新生代<br>大多数对象在新生代中被创建，其中很多对象的生命周期很短。每次新生代的垃圾回收（又称Minor GC）后只有少量对象存活，所以选用复制算法，只需要少量的复制成本就可以完成回收。<br>新生代内又分三个区：一个Eden区，两个Survivor区（一般而言），大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到两个Survivor区（中的一个）。当这个Survivor区满时，此区的存活且不满足“晋升”条件的对象将被复制到另外一个Survivor区。<br>对象每经历一次Minor GC，年龄加1，达到“晋升年龄阈值”后，被放到老年代，这个过程也称为“晋升”。</li><li>老年代<br>在新生代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代，该区域中对象存活率高。老年代的垃圾回收（又称Major GC）通常使用“标记-清理”或“标记-整理”算法。整堆包括新生代和老年代的垃圾回收称为Full GC（HotSpot VM里，除了CMS之外，其它能收集老年代的GC都会同时收集整个GC堆，包括新生代）。</li><li>永久代<br>主要存放元数据，例如Class、Method的元信息，与垃圾回收要回收的Java对象关系不大。相对于新生代和年老代来说，该区域的划分对垃圾回收影响比较小。</li></ol><blockquote><p>jdk1.8中, 永久代最终被移除，方法区移至Metaspace，字符串常量移至Java Heap。永久代的垃圾回收主要两部分：废弃常量和无用类。</p></blockquote><p><strong>常见垃圾回收器</strong><br>不同的垃圾回收器，适用于不同的场景。常用的垃圾回收器：</p><ul><li>串行（Serial）回收器是单线程的一个回收器，简单、易实现、效率高。</li><li>并行（ParNew）回收器是Serial的多线程版，可以充分的利用CPU资源，减少回收的时间。</li><li>吞吐量优先（Parallel Scavenge）回收器，侧重于吞吐量的控制。</li><li>并发标记清除（CMS，Concurrent Mark Sweep）回收器是一种以获取最短回收停顿时间为目标的回收器，该回收器是基于“标记-清除”算法实现的。</li></ul><h3 id="实用方法"><a href="#实用方法" class="headerlink" title="实用方法"></a>实用方法</h3><p><strong>jstat</strong><br>jstat可以实时显示本地或远程JVM进程中类装载、内存、垃圾收集、JIT编译等数据（如果要显示远程JVM信息，需要远程主机开启RMI支持）。如果在服务启动时没有指定启动参数-verbose:gc，则可以用jstat实时查看gc情况。</p><p>如图，如我本机RemoteMavenServer的GC情况（后两个参数表示，每隔1秒打印1次）：</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>S0</td><td>第一个Survivor的使用大小</td></tr><tr><td>S1</td><td>第二个Survivor的使用大小</td></tr><tr><td>EU</td><td>伊甸园区的使用大小</td></tr><tr><td>O</td><td>老年代使用大小</td></tr><tr><td>M</td><td>方法区使用大小</td></tr><tr><td>CCS</td><td>压缩类空间使用大小</td></tr><tr><td>YGC</td><td>年轻代垃圾回收次数</td></tr><tr><td>YGCT</td><td>年轻代垃圾回收消耗时间</td></tr><tr><td>FGC</td><td>老年代垃圾回收次数</td></tr><tr><td>FGCT</td><td>老年代垃圾回收消耗时间</td></tr><tr><td>GCT</td><td>垃圾回收消耗总时间</td></tr></tbody></table><p><strong>gc log</strong><br>GC日志是一个很重要的工具，它准确记录了每一次的GC的执行时间和执行结果，通过分析GC日志可以优化堆设置和GC设置，或者改进应用程序的对象分配模式。<br>不同的垃圾收集器，输出的日志格式各不相同，但也有一些相同的特征。熟悉各个常用垃圾收集器的GC日志，是进行JVM调优的必备一步。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-XX:+PrintGCDetails</td><td>打印GC详细信息</td></tr><tr><td>-XX:+PrintGCTimeStamps</td><td>输出GC的时间戳（以基准时间的形式）</td></tr><tr><td>-XX:+PrintGCDateStamps</td><td>输出GC的时间戳（以日期的形式）</td></tr><tr><td>-XX:+PrintHeapAtGC</td><td>在进行GC的前后打印出堆的信息</td></tr><tr><td>-XX:+PrintTenuringDistribution</td><td>在进行GC时打印survivor中的对象年龄分布信息</td></tr><tr><td>-Xloggc:$CATALINA_HOME/logs/gc.log</td><td>指定输出路径收集日志到日志文件</td></tr></tbody></table><p>这里以-XX:+UseConcMarkSweepGC日志为例。<br>-XX:+UseConcMarkSweepGC会指定CMS收集器+ParNew收集器+Serial Old收集器组合，优先使用ParNew收集器+CMS收集器的组合，当出现ConcurrentMode Fail或者Promotion Failed时，则采用ParNew收集器+Serial Old收集器的组合。日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM (25.131-b11) for windows-amd64 JRE (1.8.0_131-b11), built on Mar 15 2017 01:23:53 by &quot;java_re&quot; with MS VC++ 10.0 (VS2010)</span><br><span class="line">Memory: 4k page, physical 8303556k(2846816k free), swap 16215992k(7664596k free)</span><br><span class="line">CommandLine flags: -XX:InitialHeapSize=29360128 -XX:MaxHeapSize=29360128 -XX:MaxNewSize=14680064 -XX:MaxTenuringThreshold=6 -XX:OldPLABSize=16 -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:-UseLargePagesIndividualAllocation -XX:+UseParNewGC </span><br><span class="line">2018-05-09T20:53:14.086+0800: 0.590: [GC (Allocation Failure) 2018-08-09T11:53:14.086+0800: 0.590: [ParNew: 11520K-&gt;1407K(12928K), 0.0034803 secs] 11520K-&gt;2254K(27264K), 0.0039082 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">2018-05-09T20:53:14.247+0800: 0.751: [Full GC (System.gc()) 2018-08-09T11:53:14.247+0800: 0.751: [CMS: 846K-&gt;1930K(14336K), 0.0103698 secs] 7165K-&gt;1930K(27264K), [Metaspace: 5963K-&gt;5963K(1056768K)], 0.0104529 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] </span><br><span class="line">2018-05-09T20:53:14.292+0800: 0.795: [GC (Allocation Failure) 2018-08-09T11:53:14.292+0800: 0.795: [ParNew: 11519K-&gt;1199K(12928K), 0.0085679 secs] 13450K-&gt;3129K(27264K), 0.0086244 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] </span><br><span class="line">2018-05-09T20:53:14.333+0800: 0.836: [GC (Allocation Failure) 2018-08-09T11:53:14.333+0800: 0.836: [ParNew: 12719K-&gt;300K(12928K), 0.0002620 secs] 14649K-&gt;2230K(27264K), 0.0003041 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">2018-05-09T20:53:14.364+0800: 0.867: [GC (Allocation Failure) 2018-08-09T11:53:14.364+0800: 0.867: [ParNew: 11820K-&gt;75K(12928K), 0.0002787 secs] 13750K-&gt;2005K(27264K), 0.0003223 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line"># 并发标记周期开始，根区域扫描</span><br><span class="line">2018-05-09T20:59:47.982+0800: 9.634: [GC concurrent-root-region-scan-start]</span><br><span class="line">2018-05-09T20:59:47.982+0800: 9.652: [GC concurrent-root-region-scan-end, 0.0184308 secs]</span><br><span class="line"># 并发标记</span><br><span class="line">2018-05-09T20:59:47.982+0800: 9.652: [GC concurrent-mark-start]</span><br><span class="line">2018-05-09T20:59:47.982+0800: 9.693: [GC concurrent-mark-end, 0.0406187 secs]</span><br><span class="line"># 重新标记</span><br><span class="line">2018-05-09T20:59:47.982+0800: 9.695: [GC remark 9.695: [Finalize Marking, 0.0005100 secs] 9.695: [GC ref-proc, 0.0003461 secs] 9.696: [Unloading, 0.0069466 secs], 0.0082011 secs]</span><br><span class="line"> [Times: user=0.02 sys=0.00, real=0.01 secs] </span><br><span class="line"># 独占清理</span><br><span class="line">2018-05-09T20:59:47.982+0800: 9.703: [GC cleanup 25M-&gt;21M(1024M), 0.0027119 secs]</span><br><span class="line"> [Times: user=0.00 sys=0.01, real=0.00 secs] </span><br><span class="line"># 并发清理</span><br><span class="line">2018-05-09T20:59:47.982+0800: 9.706: [GC concurrent-cleanup-start]</span><br><span class="line">2018-05-09T20:59:47.982+0800: 9.706: [GC concurrent-cleanup-end, 0.0000167 secs]</span><br><span class="line">2018-05-09T20:54:39.299+0800: 85.803: [Full GC (System.gc()) 2018-08-09T11:54:39.299+0800: 85.803: [CMS: 1930K-&gt;1832K(14336K), 0.0089015 secs] 12748K-&gt;1832K(27264K), [Metaspace: 6035K-&gt;6035K(1056768K)], 0.0089724 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] </span><br><span class="line"></span><br><span class="line">Heap</span><br><span class="line"> par new generation   total 12928K, used 227K [0x00000000fe400000, 0x00000000ff200000, 0x00000000ff200000)</span><br><span class="line">  eden space 11520K,   1% used [0x00000000fe400000, 0x00000000fe438cd8, 0x00000000fef40000)</span><br><span class="line">  from space 1408K,   0% used [0x00000000fef40000, 0x00000000fef40000, 0x00000000ff0a0000)</span><br><span class="line">  to   space 1408K,   0% used [0x00000000ff0a0000, 0x00000000ff0a0000, 0x00000000ff200000)</span><br><span class="line"> concurrent mark-sweep generation total 14336K, used 1832K [0x00000000ff200000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line"> Metaspace       used 6045K, capacity 6252K, committed 6400K, reserved 1056768K</span><br><span class="line">  class space    used 691K, capacity 761K, committed 768K, reserved 1048576K</span><br></pre></td></tr></table></figure><p>第三行把当前使用的JVM参数打印出来，其中，-XX:MaxTenuringThreshold=6是指对象从新生代晋升到老年代需要对象年龄达到6岁，即经过6次GC。</p><p>第四行是新生代Young区的GC，首先是GC发生的时间。然后是GC发生的原因GC (Allocation Failure)，对象分配失败。[ParNew: 11520K-&gt;1407K(12928K), 0.0034803 secs]表示新生代回收前是11520K，回收后是1407K，新生代总大小12928K，回收耗时0.0034803 secs。11520K-&gt;2254K(27264K), 0.0039082 secs表示回收前堆大小11520K，回收后堆大小2254K，堆的总大小27264K。</p><p>第五行是老年代Old区的GC，首先是GC发生的时间。然后是GC发生的原因System.gc()，由于代码调用。[CMS: 846K-&gt;1930K(14336K), 0.0103698 secs]表示回收前老年代是846K，回收后1930K，老年代总大小14336K，回收耗时0.0103698 secs。7165K-&gt;1930K(27264K)表示回收前堆大小7165K，回收后堆大小1930K，堆的总大小27264K。</p><p>后面有一次并发标记周期，设置参数-XX:InitiatingHeapOccupancyPercent的值，可以指定堆占有率达到百分之多少时，触发并发标记，默认值是45%。</p><p>最后打印出了堆的整体使用情况，分为新生代、老年代、元空间。</p><h3 id="调优方法"><a href="#调优方法" class="headerlink" title="调优方法"></a>调优方法</h3><p><strong>请记住下面的原则：</strong></p><ol><li>多数的Java应用不需要在服务器上进行GC优化；</li><li>多数导致GC问题的Java应用，都不是因为我们参数设置错误，而是代码问题；</li><li>在应用上线之前，先考虑将机器的JVM参数设置到最优（最适合）；</li><li>减少创建对象的数量；</li><li>减少使用全局变量和大对象；</li><li>GC优化是到最后不得已才采用的手段；</li></ol><blockquote><p>在实际使用中，分析GC情况优化代码比优化GC参数要多得多。</p></blockquote><p><strong>GC优化的目的有两个：</strong></p><ol><li>将转移到老年代的对象数量降低到最小；</li><li>减少full GC的执行时间；</li></ol><p><strong>为了达到上面的目的，一般地，你需要做的事情有：</strong></p><ol><li>减少使用全局变量和大对象；</li><li>调整新生代的大小到最合适；</li><li>设置老年代的大小为最合适；</li><li>选择合适的GC收集器；</li></ol><p><strong>进行监控和调优的一般步骤：</strong></p><ol><li>监控GC的状态<br>使用各种JVM工具，查看当前日志，分析当前JVM参数设置，并且分析当前堆内存快照和gc日志，根据实际的各区域内存划分和GC执行时间，觉得是否进行优化；</li><li>分析结果，判断是否需要优化<br>如果各项参数设置合理，系统没有超时日志出现，GC频率不高，GC耗时不高，那么没有必要进行GC优化；如果GC时间超过1-3秒，或者频繁GC，则必须优化；</li></ol><blockquote><p>注：如果满足下面的指标，则一般不需要进行GC调优：</p><p>Minor GC执行时间不到50ms；<br>Minor GC执行不频繁，约10秒一次；<br>Full GC执行时间不到1s；<br>Full GC执行频率不算频繁，不低于10分钟1次；</p></blockquote><ol><li>调整GC类型和内存分配<br>如果内存分配过大或过小，或者采用的GC收集器比较慢，则应该优先调整这些参数，并且先找1台或几台机器进行beta，然后比较优化过的机器和没有优化的机器的性能对比，并有针对性的做出最后选择；</li><li>不断的分析和调整<br>通过不断的试验和试错，分析并找到最合适的参数</li><li>全面应用参数<br>如果找到了最合适的参数，则将这些参数应用到所有服务器，并进行后续跟踪。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java应用jvm配置参考&quot;&gt;&lt;a href=&quot;#java应用jvm配置参考&quot; class=&quot;headerlink&quot; title=&quot;java应用jvm配置参考&quot;&gt;&lt;/a&gt;java应用jvm配置参考&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一切配置在亲身测试之后，才
      
    
    </summary>
    
      <category term="jvm" scheme="https://blog.milk4j.com/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://blog.milk4j.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot配置文件</title>
    <link href="https://blog.milk4j.com/2018/07/05/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://blog.milk4j.com/2018/07/05/SpringBoot配置文件/</id>
    <published>2018-07-05T14:59:00.000Z</published>
    <updated>2018-12-22T06:36:54.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot配置文件"><a href="#SpringBoot配置文件" class="headerlink" title="SpringBoot配置文件"></a>SpringBoot配置文件</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p><ul><li><p>application.properties</p></li><li><p>application.yml</p></li></ul><p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p><p>YAML（YAML Ain’t Markup Language）</p><ul><li>YAML  A Markup Language：是一个标记语言</li><li>YAML   isn’t Markup Language：不是一个标记语言；</li></ul><p>标记语言：</p><p>以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；</p><p>YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p><p>YAML：配置例子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>XML：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、YAML语法："><a href="#2、YAML语法：" class="headerlink" title="2、YAML语法："></a>2、YAML语法：</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p><p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p>属性和值也是大小写敏感；</p><h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><h4 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h4><blockquote><p> k: v：字面直接来写；</p><p>字符串默认不用加上单引号或者双引号；</p><p>“”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思,eg: name:   “zhangsan \n lisi” ==&gt;输出；zhangsan 换行  lisi</p><p>‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据name:   ‘zhangsan \n lisi’ ==&gt; 输出；zhangsan \n  lisi</p></blockquote><h4 id="对象、Map："><a href="#对象、Map：" class="headerlink" title="对象、Map："></a>对象、Map：</h4><pre><code>k: v：在下一行来写对象的属性和值的关系；注意缩进对象还是k: v的方式</code></pre><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">  lastName:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastName:</span> <span class="string">zhangsan,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h4><p>用- 值表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure><h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">    lastName:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">    boss:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    birth:</span> <span class="number">2017</span><span class="string">/12/12</span></span><br><span class="line"><span class="attr">    maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="number">12</span><span class="string">&#125;</span></span><br><span class="line"><span class="attr">    lists:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">lisi</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">zhaoliu</span></span><br><span class="line"><span class="attr">    dog:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">小狗</span></span><br><span class="line"><span class="attr">      age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><p>javaBean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><p>我们可以导入配置文件处理器，以后编写配置就有提示了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1、properties配置文件在idea中默认utf-8可能会乱码"><a href="#1、properties配置文件在idea中默认utf-8可能会乱码" class="headerlink" title="1、properties配置文件在idea中默认utf-8可能会乱码"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><h4 id="2、-Value获取值和-ConfigurationProperties获取值比较"><a href="#2、-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2、@Value获取值和@ConfigurationProperties获取值比较"></a>2、@Value获取值和@ConfigurationProperties获取值比较</h4><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>配置文件yml还是properties他们都能获取到值；</p><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p><h4 id="3、配置文件注入值数据校验"><a href="#3、配置文件注入值数据校验" class="headerlink" title="3、配置文件注入值数据校验"></a>3、配置文件注入值数据校验</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><h4 id="4、-PropertySource-amp-ImportResource-amp-Bean"><a href="#4、-PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="4、@PropertySource&amp; @ImportResource&amp; @Bean"></a>4、@PropertySource&amp; @ImportResource&amp; @Bean</h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@ConfigurationProperties</span>(prefix = "person")默认从全局配置文件中获取值；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">   <span class="comment">// @Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br></pre></td></tr></table></figure><p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p><p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br><span class="line">导入Spring的配置文件让其生效</span><br></pre></td></tr></table></figure><p>不来编写Spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.milk4j.springboot.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p><p>1、配置类<strong>@Configuration ==&gt; Spring配置文件</strong></p><p>2、使用<strong>@Bean</strong>给容器中添加组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配置类@Bean给容器中添加组件了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##4、配置文件占位符</p><h3 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.<span class="keyword">int</span>&#125;、$&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;、$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure><h3 id="2、占位符获取之前配置的值，如果没有可以是用-quot-quot-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以是用-quot-quot-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以是用&quot;:&quot;指定默认值"></a>2、占位符获取之前配置的值，如果没有可以是用<code>&quot;:&quot;</code>指定默认值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">person.last-name=张三$&#123;random.uuid&#125;</span><br><span class="line">person.age=$&#123;random.int&#125;</span><br><span class="line">person.birth=2017/12/15</span><br><span class="line">person.boss=false</span><br><span class="line">person.maps.k1=v1</span><br><span class="line">person.maps.k2=14</span><br><span class="line">person.lists=a,b,c</span><br><span class="line">person.dog.name=$&#123;person.hello:hello&#125;_dog</span><br><span class="line">person.dog.age=15</span><br></pre></td></tr></table></figure><h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是<code>application-{profile}.properties/yml</code></p><p>默认使用application.properties的配置；</p><h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure><h3 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h3><pre><code>1、在配置文件中指定  spring.profiles.active=dev2、命令行：    java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev；    可以直接在测试的时候，配置传入命令行参数3、虚拟机参数；    -Dspring.profiles.active=dev</code></pre><h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><p>– file:./config/</p><p>– file:./</p><p>– classpath:/config/</p><p>– classpath:/</p><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p><p>==我们还可以通过spring.config.location来改变默认的配置文件位置==</p><p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p><p><code>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=G:/application.properties</code></p><h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p><strong>==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==</strong></p><p><strong>1.命令行参数</strong></p><p>所有的配置都可以在命令行上进行指定</p><p><code>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --server.port=8087  --server.context-path=/abc</code></p><p>多个配置用空格分开； –配置项=值</p><p>2.来自java:comp/env的JNDI属性</p><p>3.Java系统属性（System.getProperties()）</p><p>4.操作系统环境变量</p><p>5.RandomValuePropertySource配置的random.*属性值</p><p>==<strong>由jar包外向jar包内进行寻找；</strong>==</p><p>==<strong>优先加载带profile</strong>==</p><p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p>==<strong>再来加载不带profile</strong>==</p><p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p>10.@Configuration注解类上的@PropertySource</p><p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p><p>所有支持的配置加载来源；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">参考官方文档</a></p><h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">配置文件能配置的属性参照</a></p><h3 id="1、自动配置原理："><a href="#1、自动配置原理：" class="headerlink" title="1、自动配置原理："></a>1、<strong>自动配置原理：</strong></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==</p><p><strong>2）、@EnableAutoConfiguration 作用：</strong></p><ul><li>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</li></ul><ul><li><p>可以查看selectImports()方法的内容；</p></li><li><p>List<string> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</string></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SpringFactoriesLoader.loadFactoryNames()</span><br><span class="line">扫描所有jar包类路径下  META-INF/spring.factories</span><br><span class="line">把扫描到的这些文件的内容包装成properties对象</span><br><span class="line">从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中</span><br></pre></td></tr></table></figure><p><strong>==将 类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；==</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure><p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p><p>3）、每一个自动配置类进行自动配置功能；</p><p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   <span class="comment">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HttpEncodingProperties.class)  <span class="comment">//启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(CharacterEncodingFilter.class)  <span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.http.encoding"</span>, value = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>)  <span class="comment">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span></span><br><span class="line"><span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.properties = properties;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(CharacterEncodingFilter.class) <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line"><span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据当前不同的条件判断，决定这个配置类是否生效？</p><p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p><p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.http.encoding"</span>)  <span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure><p><strong>精髓：</strong></p><p><strong>1）、SpringBoot启动会加载大量的自动配置类</strong><br>​<br><strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong><br>​<br><strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong><br>​<br><strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></p><p>xxxxAutoConfigurartion：自动配置类；</p><p>给容器中添加组件</p><p>xxxxProperties:封装配置文件中相关属性；</p><h3 id="2、细节"><a href="#2、细节" class="headerlink" title="2、细节"></a>2、细节</h3><h4 id="1、-Conditional派生注解（Spring注解版原生的-Conditional作用）"><a href="#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）" class="headerlink" title="1、@Conditional派生注解（Spring注解版原生的@Conditional作用）"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><table><thead><tr><th>@Conditional扩展注解</th><th>作用（判断是否满足当前指定条件）</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean；</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean；</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table><p><strong>自动配置类必须在一定的条件下才能生效；</strong></p><p>我们怎么知道哪些自动配置类生效；</p><p><strong>==我们可以通过启用  debug=true属性；来让控制台打印自动配置报告==</strong>，这样我们就可以很方便的知道哪些自动配置类生效；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">=========================</span><br><span class="line">AUTO-CONFIGURATION REPORT</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:（自动配置类启用的）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   DispatcherServletAutoConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnClass</span> found required <span class="class"><span class="keyword">class</span> '<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>'</span>; <span class="meta">@ConditionalOnMissingClass</span> <span class="function">did not find unwanted <span class="title">class</span> <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function">      - @<span class="title">ConditionalOnWebApplication</span> <span class="params">(required)</span> found <span class="title">StandardServletEnvironment</span> <span class="params">(OnWebApplicationCondition)</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">Negative matches:（没有启动，没有匹配成功的自动配置类）</span></span><br><span class="line"><span class="function">-----------------</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   ActiveMQAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   AopAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice' <span class="params">(OnClassCondition)</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot配置文件&quot;&gt;&lt;a href=&quot;#SpringBoot配置文件&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot配置文件&quot;&gt;&lt;/a&gt;SpringBoot配置文件&lt;/h1&gt;&lt;h2 id=&quot;1、配置文件&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="springboot" scheme="https://blog.milk4j.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://blog.milk4j.com/tags/springboot/"/>
    
  </entry>
  
</feed>
